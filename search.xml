<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>并发容器</title>
    <url>/2020/05/15/%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<!-- build time:Tue Jun 09 2020 08:31:58 GMT+0800 (GMT+08:00) --><h3 id="1、并发容器概览"><a href="#1、并发容器概览" class="headerlink" title="1、并发容器概览"></a>1、并发容器概览</h3><ul><li><code>ConcurrentHashMap</code>：线程安全的HashMap</li><li><code>CopyOnWriteArrayList</code>：线程安全的List</li><li><code>BlockingQueue</code>：这是一个接口，表示阻塞队列，非常适用于作为数据共享的通道</li><li><code>ConcurrentLinkedQueue</code>：高效的非阻塞并发队列，使用链表实现。可以看做一个线程安全的LinkedList</li><li><code>ConcurrentSkipListMap</code>：是一个Map，使用跳表的数据结构进行快速查找</li></ul><a id="more"></a><h3 id="2、同步容器"><a href="#2、同步容器" class="headerlink" title="2、同步容器"></a>2、同步容器</h3><ul><li><p><code>Vector</code>和<code>Hashtable</code>：这两个容器的方法都是使用了synchronized修饰，虽然是线程安全的，但是在多线程的情况下的效率是比较低的</p></li><li><p><code>ArrayList</code>和<code>HashMap</code>：虽然这两个类不是线程安全的，但是可以用</p><p><code>Collections.synchronizedList(new ArrayList&lt;E&gt;())</code>和<code>Collections.synchronizedMap(new HashMap&lt;K,V&gt;())</code>使之变成安全的，但是效率也是不高</p></li><li><p><code>ConcurrentHashMap</code>和<code>CopyOnWriteArrayList</code>：取代同步的HashMap和同步的ArrayList</p><ul><li><strong>绝大多数</strong>并发情况下，ConcurrentHashMap和CopyOnWriteArrayList的性能都更好</li><li>如果一个list经常改动：同步的Arraylist的性能优于CopyOnWriteArrayList，因为CopyOnWriteArrayList适用于读多写少的情况</li><li>ConcurrentHashMap在任何情况下的性能都要比HashMap或Vector要好</li></ul></li></ul><h3 id="3、ConcurrentHashMap"><a href="#3、ConcurrentHashMap" class="headerlink" title="3、ConcurrentHashMap"></a>3、ConcurrentHashMap</h3><h4 id="3-1、Map简介"><a href="#3-1、Map简介" class="headerlink" title="3.1、Map简介"></a>3.1、Map简介</h4><p><img src="https://gitee.com/zhouxiaping/Pictures/raw/master/20200412232130.png" alt=""></p><ol><li><p>HashMap：</p><ul><li>HashMap由数组+链表组成，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的。</li><li>如果通过hash定位到数组位置没有链表，则查找、添加速度很快。否则，就要解决hash冲突，操作链表。遍历链表时，通过key对象的equals方法逐一比对。</li><li>构造hashmap的时候有两个参数，initialCapacity初始容量（默认16）、loadFactor装载因子（默认0.75）。</li><li>向容器中添加元素的时候，如果元素个数达到阈值（元素个数=数组长度*loadFactor），就要自动扩容。使用一个新的数组代替已有的数组，每次扩容为先前的两倍。</li><li>经过 rehash 之后，元素的位置要么在原位置，要么在原位置再移动2次幂的位置。</li></ul></li></ol><ol start="2"><li><p>Hashtable：</p><ul><li>Hashtable对外提供的public函数几乎都是同步的（synchronized关键字修饰），线程安全。</li><li>key和value都不能为null。</li><li>HashTable的数据结构和HashMap一样，采用Entry数组 + 链表的方法实现。</li><li>HashTabale初始的容量为11，负载因子为0.75，这点和HashMap不同，HashMap初始化时容量大小总是2的幂次方，即使给定一个不是2的幂次方容量的值，也会自动初始化为最接近其2的幂次方的容量。</li></ul></li><li><p>LinkedHashMap：</p><ul><li>LinkedHashMap保证数据可以保持插入顺序</li><li>LinkedHashMap在HashMap的基础上多了一个双向链表来维持顺序。</li></ul></li><li><p>TreeMap：</p><ul><li>TreeMap的数据结构是红黑树。</li><li>HashMap和Hashtable不保证数据有序，LinkedHashMap保证数据可以保持插入顺序，而TreeMap可以按key的大小顺序排序。</li></ul></li></ol><h4 id="3-2、为什么需要ConcurrentHashMap"><a href="#3-2、为什么需要ConcurrentHashMap" class="headerlink" title="3.2、为什么需要ConcurrentHashMap"></a>3.2、为什么需要ConcurrentHashMap</h4><h5 id="为什么HashMap是线程不安全的？"><a href="#为什么HashMap是线程不安全的？" class="headerlink" title="为什么HashMap是线程不安全的？"></a>为什么HashMap是线程不安全的？</h5><ul><li>同时put<strong>碰撞</strong>导致数据丢失<ul><li>假设两个线程计算出来的hash值一样，那么两个key会放到同一个位置，导致最终一个数据会丢失</li></ul></li><li>同时put<strong>扩容</strong>导致数据丢失<ul><li>两个线程同时扩容，那么最后也只会保存一个线程中的扩容HashMap</li></ul></li><li>死循环造成的CPU100%<ul><li>主要存在于JDK1.7当中，多个线程同时扩容的时候会造成死循环，也就是你指向我我指向你，因为HashMap并不是为了并发情况下设计的</li></ul></li></ul><h5 id="JDK1-7的ConcurrentHashMap实现和分析"><a href="#JDK1-7的ConcurrentHashMap实现和分析" class="headerlink" title="JDK1.7的ConcurrentHashMap实现和分析"></a>JDK1.7的ConcurrentHashMap实现和分析</h5><p><img src="https://gitee.com/zhouxiaping/Pictures/raw/master/20200413201014.png" alt=""></p><ul><li>Java 7中的ConcurrentHashMap最外层是多个<code>segment</code>，每个segment的底层数据结构与HashMap类似，仍然是数组和链表组成的拉链法</li><li>每个segment独立上<code>ReentrantLock</code>锁（重入锁），每个segment之间互不影响，提高了并发效率</li><li>ConcurrentHashMap默认有16个segemnt，所以最多可以支持16个线程并发写（操作分布在不同的segment上）。这个默认值可以在初始化的时候设置为其他值，但是一旦初始化以后，是不可以扩容的</li></ul><h5 id="JDK1-8的ConcurrentHashMap实现和分析"><a href="#JDK1-8的ConcurrentHashMap实现和分析" class="headerlink" title="JDK1.8的ConcurrentHashMap实现和分析"></a>JDK1.8的ConcurrentHashMap实现和分析</h5><p><img src="https://gitee.com/zhouxiaping/Pictures/raw/master/20200413200928.png" alt=""></p><h3 id="4、CopyOnWriteArrayList"><a href="#4、CopyOnWriteArrayList" class="headerlink" title="4、CopyOnWriteArrayList"></a>4、CopyOnWriteArrayList</h3><h4 id="4-1、诞生的历史和原因"><a href="#4-1、诞生的历史和原因" class="headerlink" title="4.1、诞生的历史和原因"></a>4.1、诞生的历史和原因</h4><ul><li>代替Vector和SynchronizedList，就和ConcurrenthHashMap代理SynchronizedMap的原因一样</li><li>Vector和SynchronizedList的锁的粒度太大，并发效率相对比较低，并且迭代时无法编辑</li><li>Copy-On-Write并发容器还包括CopyOnWriteArraySet，用来代替同步Set</li></ul><h4 id="4-2、适用场景"><a href="#4-2、适用场景" class="headerlink" title="4.2、适用场景"></a>4.2、适用场景</h4><ul><li>读操作可以尽可能快，而写即使慢一些也没有太大关系</li><li>读多写少：黑名单、每日更新、监听器：迭代操作远多于修改操作</li></ul><h4 id="4-3、读写规则"><a href="#4-3、读写规则" class="headerlink" title="4.3、读写规则"></a>4.3、读写规则</h4><ul><li>回顾读写锁：读读共享、其他都互斥（写写互斥、读写互斥、写读互斥）</li><li>读写锁规则的升级：<strong>读取时完全不用加锁的</strong>，并且更厉害的是，写入也不会阻塞读取操作。只有<strong>写入和写入</strong>之间需要进行同步等待</li></ul><h4 id="4-4、实现原理"><a href="#4-4、实现原理" class="headerlink" title="4.4、实现原理"></a>4.4、实现原理</h4><ul><li>创建新副本，读写分离。写入的时候是Copy一个新的，然后在新的里面添加数据</li><li>“不可变原理”：</li></ul><h4 id="4-5、缺点"><a href="#4-5、缺点" class="headerlink" title="4.5、缺点"></a>4.5、缺点</h4><ul><li>数据一致性问题：CopyOnWrite容器只能保证数据的最终一致性，不能保证数据的实时一致性</li><li>内存占用问题：因为CopyOnWrite的写是复制机制，所以在进行写操作的时候，内存里会同时驻扎两个对象的内存。</li></ul><p><code>add方法</code>：首先获取ReentrantLock，然后调用Array.copyOf(elements，len+1)复制出一个新数组，把需要新加的数据set进新数组最后一个位置，然后setArray(newElements)更新为新的数组</p><p><img src="http://pics.oncevan.cn/img/20200608124423.png" alt=""></p><h3 id="5、并发队列"><a href="#5、并发队列" class="headerlink" title="5、并发队列"></a>5、并发队列</h3><h4 id="5-1、为什么使用队列"><a href="#5-1、为什么使用队列" class="headerlink" title="5.1、为什么使用队列"></a>5.1、为什么使用队列</h4><ul><li>用队列可以在线程间传递数据：生产者和消费者模式</li><li>考虑锁等线程安全问题的重任从“你”转移到了“队列”上</li></ul><h4 id="5-2、并发队列简介"><a href="#5-2、并发队列简介" class="headerlink" title="5.2、并发队列简介"></a>5.2、并发队列简介</h4><ul><li>Queue</li><li>BlockingQueue</li></ul><p><img src="http://pics.oncevan.cn/img/20200608124917.png" alt="Queue最主要的关系"></p><h4 id="5-3、阻塞队列简介"><a href="#5-3、阻塞队列简介" class="headerlink" title="5.3、阻塞队列简介"></a>5.3、阻塞队列简介</h4><ul><li>阻塞队列是具有阻塞功能的队列，所以它首先是一个队列，其次是具有阻塞功能</li><li>通常，阻塞队列的一段是给生产者放数据用，另一端给消费者拿数据用。阻塞队列是线程安全的，所以生产者和消费者都可以是多线程的</li></ul><p>take方法：获取并移除队列的头结点，一旦执行take的时候，队列里无数据，则阻塞，直到队列里有数据</p><p>put方法：插入元素，如果队列已满，那么再执行put方法的时候就put不进去，则阻塞，直到队列中还有空位置</p><p>add、remove、element</p><p>offer、poll、peek</p><p><code>ArrayBlockingQueue</code>：有界队列，指定容量，默认公平可以设置</p><p><code>LinkedBlockingQueue</code>：无界队列，容量为Integer.MAX_VALUE</p><p><code>SynchronousQueue</code>：容量为0，是一个极好的用力啊直接传递的并发数据结构，同时也是线程池<code>Executors.newCachedThreadPool</code>（）使用的阻塞队列</p><p><code>PriorityBlockingQueue</code>：支持优先级、自然顺序而不是先进先出，无界队列，PriorityQueue的线程安全版本</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><ul><li>JUC包提供的容器，分为3类：Concurrent<em><em>、CopyOnWrite</em>、Blocking</em></li><li>Concurrent<em>的特点是大部分通过CAS实现并发，而CopyOnWrite</em>则是通过复制一份原始数据来实现的，Blocking通过ReentrantLock实质上就是AQS实现的</li></ul><h3 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h3><p>【HashMap和ConcurrentHashMap的扩容机制】</p><p><a href="https://www.cnblogs.com/lfs2640666960/p/9621461.html" target="_blank" rel="noopener">https://www.cnblogs.com/lfs2640666960/p/9621461.html</a></p><p>【为什么hashMap的容量扩容时一定是2的幂次】<a href="https://blog.csdn.net/gududedabai/article/details/85784161" target="_blank" rel="noopener">https://blog.csdn.net/gududedabai/article/details/85784161</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>J.U.C</category>
      </categories>
      <tags>
        <tag>多线程与并发</tag>
        <tag>J.U.C</tag>
      </tags>
  </entry>
  <entry>
    <title>线程协作</title>
    <url>/2020/05/15/%E7%BA%BF%E7%A8%8B%E5%8D%8F%E4%BD%9C/</url>
    <content><![CDATA[<!-- build time:Tue Jun 09 2020 08:35:02 GMT+0800 (GMT+08:00) --><h2 id="1、控制并发流程"><a href="#1、控制并发流程" class="headerlink" title="1、控制并发流程"></a>1、控制并发流程</h2><h3 id="1-1、什么是控制并发流程"><a href="#1-1、什么是控制并发流程" class="headerlink" title="1.1、什么是控制并发流程"></a>1.1、什么是控制并发流程</h3><ul><li>控制并发流程的工具类，作用就是帮助我们程序员更容易的让线程之间合作</li><li>让线程之间相互配合，来满足业务逻辑</li><li>比如让线程A等待线程B执行完毕后再执行等合作策略</li></ul><a id="more"></a><h3 id="1-2、控制并发流程的工具类"><a href="#1-2、控制并发流程的工具类" class="headerlink" title="1.2、控制并发流程的工具类"></a>1.2、控制并发流程的工具类</h3><p><img src="http://pics.oncevan.cn/img/20200609083412.png" alt=""></p><h4 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h4><ul><li>字面解读：倒数门闩</li><li>例子：购物拼团满人后才能购买；大巴满人发车</li><li>流程：倒数结束之前，一直处于等待状态，知道倒计时结束了，此流程才继续工作</li></ul><p>方法</p><ul><li><code>CountDownLatch（int count）</code>：仅有这一个构造函数，参数count为需要倒数的数值</li><li><code>await()</code>：调用await()方法的线程会被挂起，它会等待知道count值为0才继续执行</li><li><code>countDown()</code>：将count值减1，直到为0时，等待的线程会被唤起。</li></ul><p><img src="http://pics.oncevan.cn/img/20200608155410.png" alt=""></p><p>典型用法</p><ul><li>用法一：一个线程等待多个线程都执行完毕，再继续自己的工作</li><li>用法二：多个线程等待某一个线程的信号，同时开始执行</li></ul><p>注意点</p><ul><li>CountDownLatch不可重用（不可回滚重置），也就是说，倒数完成后，不能再次执行倒数。可以考虑使用CyclicBarrier或者创建新的CountDownLatch实例</li></ul><h2 id="2、信号量Semaphore"><a href="#2、信号量Semaphore" class="headerlink" title="2、信号量Semaphore"></a>2、信号量Semaphore</h2><ul><li>Semaphore可以用来限制或管理数量有限的资源的使用情况</li><li>信号量的作用是维护一个<strong>许可证</strong>的计数，线程可以“获取”许可证，那信号量剩余的许可证就减一，线程也可以“释放”一个许可证，那信号量的许可证就加一，当信号量所拥有的许可证数量为0，那么下一个还想要获取许可证的线程，就需要等待，直到有另外的线程释放了许可证</li></ul><h3 id="2-1、信号量使用流程"><a href="#2-1、信号量使用流程" class="headerlink" title="2.1、信号量使用流程"></a>2.1、信号量使用流程</h3><ol><li>初始化Semaphore并指定许可证的数量</li><li>在需要信号量的代码前加acquire()或者acquireUninterruptibly()方法</li><li>任务执行结束后，调用release（）来释放许可证</li></ol><h3 id="2-2、信号量主要方法"><a href="#2-2、信号量主要方法" class="headerlink" title="2.2、信号量主要方法"></a>2.2、信号量主要方法</h3><ul><li><code>new Semaphore(int permits,boolean fair)</code>:传入许可证的数量，设置是否公平，公平是指遵循先来先得，（一般设置为公平比较合理）</li><li><code>acquire</code>:获取许可证，允许中断发生，获得的许可证数量<strong>可大一1</strong></li><li><code>acquireUninterruptibly:</code>获得许可证，不允许中断发生</li><li><code>tryAcquire</code>:和tryLock很像，查看现在是否有空闲的许可证，如果有的话就获取，没有的话也没关系，可以执行别的任务</li><li><code>tryAcquire(timeout):</code>和tryAcquire一样，只不过设置了超时的时间</li><li><code>release()</code>：归还许可证，用完以后需要归还，最好和获取的许可证数量一致</li></ul><h2 id="3、CountDownLatch"><a href="#3、CountDownLatch" class="headerlink" title="3、CountDownLatch"></a>3、CountDownLatch</h2><ul><li>字面解读：倒数门闩</li><li>例子：购物拼团满人后才能购买；大巴满人发车</li><li>流程：倒数结束之前，一直处于等待状态，知道倒计时结束了，此流程才继续工作</li></ul><h3 id="3-1、主要方法"><a href="#3-1、主要方法" class="headerlink" title="3.1、主要方法"></a>3.1、主要方法</h3><ul><li><code>CountDownLatch（int count）</code>：仅有这一个构造函数，参数count为需要倒数的数值</li><li><code>await()</code>：调用await()方法的线程会被挂起，它会等待知道count值为0才继续执行</li><li><code>countDown()</code>：将count值减1，直到为0时，等待的线程会被唤起。</li></ul><h3 id="3-2、典型用法"><a href="#3-2、典型用法" class="headerlink" title="3.2、典型用法"></a>3.2、典型用法</h3><ul><li>用法一：一个线程等待多个线程都执行完毕，再继续自己的工作</li><li>用法二：多个线程等待某一个线程的信号，同时开始执行</li></ul><h3 id="3-3、注意点"><a href="#3-3、注意点" class="headerlink" title="3.3、注意点"></a>3.3、注意点</h3><ul><li>CountDownLatch不可重用（不可回滚重置），也就是说，倒数完成后，不能再次执行倒数。可以考虑使用CyclicBarrier或者创建新的CountDownLatch实例</li></ul><h2 id="4、Condition接口（又称条件对象）"><a href="#4、Condition接口（又称条件对象）" class="headerlink" title="4、Condition接口（又称条件对象）"></a>4、Condition接口（又称条件对象）</h2><h3 id="4-1、作用"><a href="#4-1、作用" class="headerlink" title="4.1、作用"></a>4.1、作用</h3><ul><li>当线程1需要等待某个条件才能执行的hi后，他就去执行Condition.await()方法，一旦执行了await()方法，线程就会进入阻塞状态</li><li>然后通常会有另一个线程，假设是线程2，去执行对应的条件，直到这个条件达成的时候，线程2就会去执行condition.signal()方法，这时JVM就会从被阻塞的线程里找到那些等待该condition的线程，当线程1就会收到可执行信号的时候，它的线程状态就会变成Runnble可执行状态</li></ul><h4 id="signalAll-和signal-的区别"><a href="#signalAll-和signal-的区别" class="headerlink" title="signalAll()和signal()的区别"></a>signalAll()和signal()的区别</h4><ul><li>signalAll()会唤起所有的正在等待的线程</li><li>但是signal()是公平的，只会唤起哪个等待时间最长的线程</li></ul><h3 id="4-2、代码演示"><a href="#4-2、代码演示" class="headerlink" title="4.2、代码演示"></a>4.2、代码演示</h3><ul><li><h4 id="普通示例"><a href="#普通示例" class="headerlink" title="普通示例"></a>普通示例</h4></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionDemo</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> Condition condition = lock.newCondition();<span class="comment">//Condition依赖于锁</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptException</span>&#123;</span><br><span class="line">        lock.lock();<span class="comment">//获取锁</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"条件不满足，开始await"</span>);</span><br><span class="line">            condition.await();</span><br><span class="line">            System.out.println(<span class="string">"条件满足了，开始执行后续的任务"</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"准备工作完成，唤醒其他的线程"</span>);</span><br><span class="line">            condition.signal();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ConditionDemo conditionDemo = <span class="keyword">new</span> ConditonDemo();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    conditionDemo.method2();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        conditionDemo.method1();<span class="comment">//和Thread的顺序不能变换，换了会一直阻塞在method1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  条件不满足，开始await</span></span><br><span class="line"><span class="comment">*  准备工作完成，唤醒其他线程</span></span><br><span class="line"><span class="comment">*  条件满足了，开始执行后续的任务</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li><h4 id="实现消费者生产者模式"><a href="#实现消费者生产者模式" class="headerlink" title="实现消费者生产者模式"></a>实现消费者生产者模式</h4></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> queueSize = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> PriorityQueue&lt;Integer&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Integer&gt;(queueSize);</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> Condition notFull = lock.newCondition();<span class="comment">//生产者使用</span></span><br><span class="line">    <span class="keyword">private</span> Condition notEmpty = lock.newCondition();<span class="comment">//消费者使用</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConditionDemo conditionDemo = <span class="keyword">new</span> ConditionDemo();</span><br><span class="line"></span><br><span class="line">       Producer producer = conditionDemo.<span class="keyword">new</span> Producer();</span><br><span class="line">        Consumer consumer = conditionDemo.<span class="keyword">new</span> Consumer();</span><br><span class="line">        producer.start();</span><br><span class="line">        consumer.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            consume();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//消费者</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="keyword">while</span> (queue.size() == <span class="number">0</span>)&#123;</span><br><span class="line">                        System.out.println(<span class="string">"队列空，等待数据"</span>);</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            notEmpty.await();</span><br><span class="line">                        &#125;<span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    queue.poll();</span><br><span class="line">                    notFull.signal();</span><br><span class="line">                    System.out.println(<span class="string">"从队列里取走了一条数据，队列剩余"</span>+queue.size()+<span class="string">"个元素"</span>);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            producer();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//消费者</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">producer</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="keyword">while</span> (queue.size() == queueSize)&#123;</span><br><span class="line">                        System.out.println(<span class="string">"队列满，等待取出"</span>);</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            notFull.await();</span><br><span class="line">                        &#125;<span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    queue.offer(<span class="number">1</span>);</span><br><span class="line">                    notEmpty.signal();</span><br><span class="line">                    System.out.println(<span class="string">"生产一条数据到队列目前有"</span>+(queueSize-queue.size())+<span class="string">"个元素"</span>);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3、注意点"><a href="#4-3、注意点" class="headerlink" title="4.3、注意点"></a>4.3、注意点</h3><ul><li>实际上，如果说Lock用来代替synchronized，那么Condition就是用来代替相对应的Object.wait/notify的（await、signal），所以在用法和性质上，几乎都一样</li><li>await方法会自动释放持有的Lock锁，和Object.wait一样，不需要自己手动先释放锁</li><li>调用await的时候，必须持有锁，否则会抛出异常，和Object.wait一样</li></ul><h2 id="5、CyclicBarrier循环栅栏"><a href="#5、CyclicBarrier循环栅栏" class="headerlink" title="5、CyclicBarrier循环栅栏"></a>5、CyclicBarrier循环栅栏</h2><h3 id="5-1、作用"><a href="#5-1、作用" class="headerlink" title="5.1、作用"></a>5.1、作用</h3><ul><li>CyclicBarrier循环栅栏和CountDownLatch很类似，都能阻塞一组线程</li><li>当大量线程相互配合，分别计算不同任务，并且需要最后统一汇总的时候，我们可以使用CyclicBarrier。CyclicBarrier可以构造一个集结点，当某一个线程执行完毕，它会到集合点等待，直到所有线程都到了集合点，那么该栅栏就会被撤销，所有线程再统一出发，继续执行剩下的任务</li></ul><h3 id="5-2、代码演示"><a href="#5-2、代码演示" class="headerlink" title="5.2、代码演示"></a>5.2、代码演示</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">3</span>, <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"所有人都到场了，大家统一出发！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//这里的i改成6的话会分为两拨集合 3个一拨，这说明CyclicBarrier是可重用的</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123; </span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Task(i,cyclicBarrier)).start();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">        <span class="keyword">private</span> CyclicBarrier cyclicBarrier;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Task</span><span class="params">(<span class="keyword">int</span> id, CyclicBarrier cyclicBarrier)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">            <span class="keyword">this</span>.cyclicBarrier = cyclicBarrier;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"线程"</span>+id+<span class="string">"前往集合地点"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep((<span class="keyword">long</span>) (Math.random()*<span class="number">10000</span>));</span><br><span class="line">                System.out.println(<span class="string">"线程"</span>+id+<span class="string">"到达集合地点，开始等待其他线程"</span>);</span><br><span class="line">                cyclicBarrier.await();</span><br><span class="line">                <span class="comment">//await下面是集合完以后的操作</span></span><br><span class="line">                <span class="comment">//System.out.println("线程"+id+"出发了");</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**  结果如下：</span></span><br><span class="line"><span class="comment"> * 线程0前往集合地点</span></span><br><span class="line"><span class="comment"> * 线程2前往集合地点</span></span><br><span class="line"><span class="comment"> * 线程1前往集合地点</span></span><br><span class="line"><span class="comment"> * 线程1到达集合地点，开始等待其他线程</span></span><br><span class="line"><span class="comment"> * 线程0到达集合地点，开始等待其他线程</span></span><br><span class="line"><span class="comment"> * 线程2到达集合地点，开始等待其他线程</span></span><br><span class="line"><span class="comment"> * 所有人都到场了，大家统一出发！</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="5-3、CyclicBarrier和CountDownLatch的区别"><a href="#5-3、CyclicBarrier和CountDownLatch的区别" class="headerlink" title="5.3、CyclicBarrier和CountDownLatch的区别"></a>5.3、CyclicBarrier和CountDownLatch的区别</h3><ul><li>作用不同：<code>CyclicBarrier</code>要等固定数量的线程都到达了栅栏位置才能继续执行，而<code>CountDownLatch</code>只需等待数字到0，也就是说<code>CountDownLatch</code>用于事件，但是<code>CyclicBarrier</code>是用于线程的。</li><li>可重用性不同：<code>CountDownLatch</code>在倒数到0并触发门闩打开后就不能再次使用了，除非新建新的实例；而<code>CyclicBarrier</code>可以重复使用。</li><li><code>CyclicBarrier</code>等线程集合后可以执行统一的工作</li></ul><h3 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h3><p>【CountDownLatch与join的区别】<a href="https://www.jianshu.com/p/795151ac271b" target="_blank" rel="noopener">https://www.jianshu.com/p/795151ac271b</a></p><p>【CountDownLatch】<a href="https://www.jianshu.com/p/e233bb37d2e6" target="_blank" rel="noopener">https://www.jianshu.com/p/e233bb37d2e6</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>多线程与并发</category>
      </categories>
      <tags>
        <tag>多线程与并发</tag>
      </tags>
  </entry>
  <entry>
    <title>手写红黑树</title>
    <url>/2020/05/28/%E6%89%8B%E5%86%99%E7%BA%A2%E9%BB%91%E6%A0%91/</url>
    <content><![CDATA[<!-- build time:Thu May 28 2020 20:03:30 GMT+0800 (GMT+08:00) --><a id="more"></a><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.*；</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、创建RBTree，定义颜色</span></span><br><span class="line"><span class="comment"> * 2、创建RBNode</span></span><br><span class="line"><span class="comment"> * 3、辅助方法定义：parentOf(node),isRed(node),isBlack(node),setBlack(node),setRed(node),inOrderPrint()</span></span><br><span class="line"><span class="comment"> * 4、左旋方法定义：leftRotate(node)</span></span><br><span class="line"><span class="comment"> * 5、右旋方法定义：rightRotate(node)</span></span><br><span class="line"><span class="comment"> * 6、公开插入接口方法定义：insert(K key,V value)</span></span><br><span class="line"><span class="comment"> * 7、内部插入接口方法的定义：insert(RBNode node)</span></span><br><span class="line"><span class="comment"> * 8、修正插入导致红黑树失衡的方法定义：insertFixUp(RBNode node)</span></span><br><span class="line"><span class="comment"> * 9、测试红黑树正确性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;K&gt; K继承了Comparable是为了之后key之间的比较</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RBTree</span>&lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">K</span>&gt;,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> RED = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> BLACK = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//红黑树的树根</span></span><br><span class="line">    <span class="keyword">private</span> RBNode root;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这里使用Lombok是为了减少代码量</span></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RBNode</span>&lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">K</span>&gt;,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> RBNode parent;</span><br><span class="line">        <span class="keyword">private</span> RBNode left;</span><br><span class="line">        <span class="keyword">private</span> RBNode right;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> color;</span><br><span class="line">        <span class="keyword">private</span> K key;</span><br><span class="line">        <span class="keyword">private</span> V value；</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前节点的父节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> RBNode <span class="title">parentOf</span><span class="params">(RBNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node!= <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> node.parent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检测当前节点是否为红色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isRed</span><span class="params">(RBNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> node.color==RED;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检测当前节点是否为黑色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBlack</span><span class="params">(RBNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> node.color==BLACK;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将当前节点设置为黑色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setBlack</span><span class="params">(RBNode node)</span></span>&#123;</span><br><span class="line">        node.setColor(BLACK);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将当前节点设置为红色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setRed</span><span class="params">(RBNode node)</span></span>&#123;</span><br><span class="line">        node.setColor(RED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 供外部调用的打印方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrderPrint</span><span class="params">()</span></span>&#123;</span><br><span class="line">        inOrderPrint(<span class="keyword">this</span>.root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归打印出树的key和value</span></span><br><span class="line"><span class="comment">     * 中序遍历</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inOrderPrint</span><span class="params">(RBNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            inOrderPrint(node.left);</span><br><span class="line">            System.out.println(<span class="string">"key:"</span> + node.key + <span class="string">",value:"</span> + node.value);</span><br><span class="line">            inOrderPrint(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *     P                P</span></span><br><span class="line"><span class="comment">     *     |                |</span></span><br><span class="line"><span class="comment">     *     x     ---&gt;       y</span></span><br><span class="line"><span class="comment">     *    / \              / \</span></span><br><span class="line"><span class="comment">     *   lx  y            x  ry</span></span><br><span class="line"><span class="comment">     *      / \          / \</span></span><br><span class="line"><span class="comment">       *   ly ry        lx ly</span></span><br><span class="line"><span class="comment">     *  左旋的步骤：</span></span><br><span class="line"><span class="comment">     *  1、将y的左子节点的父节点更新为x，将x的右节点更新为y的左子节点</span></span><br><span class="line"><span class="comment">     *  2、x的父节点（不为空），将y的父节点更新为x的父节点，将x的父节点的子节点更新为y</span></span><br><span class="line"><span class="comment">     *  3、将x的父节点更新为y，将y的左子节点更新为x</span></span><br><span class="line"><span class="comment">     *  注：要左旋的节点用x表示同下面node，y代表x的右子节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 要左旋的节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leftRotate</span><span class="params">(RBNode node)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//y表示要左旋节点的右子节点</span></span><br><span class="line">        RBNode y = node.right;</span><br><span class="line">        <span class="comment">//将y的左子节点的父节点更新node</span></span><br><span class="line">        y.right.parent = node;</span><br><span class="line">        <span class="comment">//将node的右节点更新y的左子节点</span></span><br><span class="line">        node.right = y.left;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.parent != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//当node不为根节点时：</span></span><br><span class="line">            <span class="comment">//将y的父节点更新node的父节点</span></span><br><span class="line">            y.parent = node.parent;</span><br><span class="line">            <span class="keyword">if</span> (node == node.parent.left)&#123;</span><br><span class="line">                <span class="comment">//当node是左节点时，就把node的父节点的左子节点更新y</span></span><br><span class="line">                node.parent.left = y;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//当node是右节点时，就把node的父节点的右子节点更新y</span></span><br><span class="line">                node.parent.right = y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//这是表示node本身就是根节点，那么需要把根节点替换成y</span></span><br><span class="line">            <span class="keyword">this</span>.root = y;</span><br><span class="line">            y.parent =<span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将node的父节点更新y</span></span><br><span class="line">        node.parent = y;</span><br><span class="line">        <span class="comment">//将y的左子节点更新node</span></span><br><span class="line">        y.left = node;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *     P</span></span><br><span class="line"><span class="comment">     *  右旋的步骤：</span></span><br><span class="line"><span class="comment">     *  1、将y的右子节点的父节点更新x，将x的左子节点更新y的右子节点</span></span><br><span class="line"><span class="comment">     *  2、如果x的父节点不为空，将y的父节点更新为x的父节点，将x的父节点的子节点更新为y</span></span><br><span class="line"><span class="comment">     *  3、将x的父节点更新为y，将y的右子节点更新为x</span></span><br><span class="line"><span class="comment">     *  注：x代表要右旋的节点同下面的node，y代表x的左子节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rightRotate</span><span class="params">(RBNode node)</span></span>&#123;</span><br><span class="line">        RBNode y = node.left;</span><br><span class="line"></span><br><span class="line">        node.left = y.right;</span><br><span class="line">        <span class="keyword">if</span> (y.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            y.right.parent = node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.parent!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            y.parent = node.parent;</span><br><span class="line">            <span class="keyword">if</span> (node.parent.left == node)&#123;</span><br><span class="line">                node.parent.left = y;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                node.parent.right = y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.root = y;</span><br><span class="line">            <span class="keyword">this</span>.root.parent =<span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        node.parent = y;</span><br><span class="line">        y.left = node;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对外提供的插入新节点的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(K key,V value)</span></span>&#123;</span><br><span class="line">        RBNode node = <span class="keyword">new</span> RBNode();</span><br><span class="line">        node.setKey(key);</span><br><span class="line">        node.setValue(value);</span><br><span class="line">        <span class="comment">//插入的节点必须是红色的</span></span><br><span class="line">        node.setColor(RED);</span><br><span class="line">        insert(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入节点的方法实现</span></span><br><span class="line"><span class="comment">     * 1、查找当前node的父节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(RBNode node)</span></span>&#123;</span><br><span class="line">        RBNode parent = <span class="keyword">null</span>;</span><br><span class="line">        RBNode x  = <span class="keyword">this</span>.root;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (x !=  <span class="keyword">null</span>)&#123;</span><br><span class="line">            parent = x;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//cmp &gt; 0,说明node的key大于x.key,需要到x的右子树查找</span></span><br><span class="line">            <span class="comment">//cmp = 0,说明node的key等于x.key,需要进行替换操作</span></span><br><span class="line">            <span class="comment">//cmp &lt; 0,说明node的key小于x.key,需要到x的左子树查找</span></span><br><span class="line">            <span class="keyword">int</span> cmp = node.key.compareTo(x.key);</span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                x = x.left;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                x = x.right;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                x.setValue(node.value);</span><br><span class="line">                <span class="comment">//直接替换的话就直接返回</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这是没有key相同的情况，找到了parent</span></span><br><span class="line">        node.parent = parent;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//判断node与parent的key谁大</span></span><br><span class="line">            <span class="keyword">int</span> cmp = node.key.compareTo(parent.key);</span><br><span class="line">            <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//cmp大于0的话说明node比parent大，为parent的右节点</span></span><br><span class="line">                parent.right = node;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//cmp小于0的话说明node的key比parent的key小，为parent的左节点</span></span><br><span class="line">                parent.left = node;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//没有parent节点，就自己成为root</span></span><br><span class="line">            <span class="keyword">this</span>.root = node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//插入节点后，可能会破环红黑树的平衡,需要修复</span></span><br><span class="line">        insertFixUp(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入后修复红黑树的方法</span></span><br><span class="line"><span class="comment">     * |---情景1：红黑树为空树  【将根节点染色为黑】</span></span><br><span class="line"><span class="comment">     * |---情景2：插入节点的key已经存在  【不用处理】</span></span><br><span class="line"><span class="comment">     * |---情景3：插入节点的父节点为黑色  【不违背黑高性质，无需处理】</span></span><br><span class="line"><span class="comment">     * 以下是需要处理的情况</span></span><br><span class="line"><span class="comment">     * |---情景4：插入节点的父节点为红色</span></span><br><span class="line"><span class="comment">     *     |---情景4.1：叔叔节点存在，并且为红色（父-叔 双红）</span></span><br><span class="line"><span class="comment">     *     【将父节点和叔叔节点染色为黑，爷爷节点染色为红，再以爷爷节点为当前节点进行下一轮处理】</span></span><br><span class="line"><span class="comment">     *     |---情景4.2：叔叔节点不存在，或者为黑色，父节点为爷爷节点的左子树</span></span><br><span class="line"><span class="comment">     *         |---情景4.2.1：插入节点为其父节点的左子节点（LL双红情况）</span></span><br><span class="line"><span class="comment">     *         【将父节点染色为黑色，将爷爷节点染色为红色，再以爷爷节点右旋，就完成了】</span></span><br><span class="line"><span class="comment">     *            |---情景4.2.2：插入节点为其父节点的右子节点（LR双红情况）</span></span><br><span class="line"><span class="comment">     *            【以父节点进行一次左旋，然后就变成了4.2.1这种情景，以父节点为当前节点进行下一轮处理】</span></span><br><span class="line"><span class="comment">     *     |---情景4.3：叔叔节点不存在，或者为黑色，父节点为爷爷节点的右子树</span></span><br><span class="line"><span class="comment">     *             |---情景4.3.1：插入节点为其父节点的右子节点（RR双红情况）</span></span><br><span class="line"><span class="comment">     *             【将父节点染成黑色，将爷爷节点染色为红色，以爷爷节点为当前节点，进行左旋，完成】</span></span><br><span class="line"><span class="comment">     *             |---情景4.3.2：插入节点为其父节点的左子节点（RL双红情况）</span></span><br><span class="line"><span class="comment">     *             【以父节点进行右旋，得到4.3.1情景，以父节点为当前节点进行下一轮处理】</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertFixUp</span><span class="params">(RBNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.root.setColor(BLACK);</span><br><span class="line"></span><br><span class="line">        RBNode parent = parentOf(node);</span><br><span class="line">        RBNode gparent = parentOf(parent);</span><br><span class="line">        RBNode uncle = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//情景4：插入节点的父节点为红色</span></span><br><span class="line">        <span class="keyword">if</span> (parent!=<span class="keyword">null</span> &amp;&amp; isRed(parent))&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果父节点为红色，那么一定存在爷爷节点</span></span><br><span class="line">            <span class="keyword">if</span> (parent == gparent.left)&#123;</span><br><span class="line">                <span class="comment">//如果父节点为左节点，那么叔叔节点为右节点</span></span><br><span class="line">                uncle = gparent.right;</span><br><span class="line">                <span class="comment">//情景4.1：叔叔节点存在，并且为红色（父-叔 双红）</span></span><br><span class="line">                <span class="keyword">if</span> (uncle!=<span class="keyword">null</span> &amp;&amp; isRed(uncle))&#123;</span><br><span class="line">                    <span class="comment">//【将父节点和叔叔节点染色为黑，爷爷节点染色为红，再以爷爷节点为当前节点进行下一轮处理】</span></span><br><span class="line">                    parent.setColor(BLACK);</span><br><span class="line">                    uncle.setColor(BLACK);</span><br><span class="line">                    gparent.setColor(RED);</span><br><span class="line">                    insertFixUp(gparent);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//情景4.2：叔叔节点不存在，或者为黑色，父节点为爷爷节点的左子树</span></span><br><span class="line">                <span class="keyword">if</span> (uncle==<span class="keyword">null</span> || isBlack(uncle))&#123;</span><br><span class="line">                    <span class="comment">//情景4.2.1：插入节点为其父节点的左子节点（LL双红情况）</span></span><br><span class="line">                    <span class="keyword">if</span> (node == parent.left)&#123;</span><br><span class="line">                        <span class="comment">//【将父节点染色为黑色，将爷爷节点染色为红色，再以爷爷节点右旋，就完成了】</span></span><br><span class="line">                        parent.setColor(BLACK);</span><br><span class="line">                        gparent.setColor(RED);</span><br><span class="line">                        rightRotate(gparent);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                   <span class="comment">//情景4.2.2：插入节点为其父节点的右子节点（LR双红情况）</span></span><br><span class="line">                    <span class="keyword">if</span> (node == parent.right)&#123;</span><br><span class="line">                        <span class="comment">//【以父节点进行一次左旋，然后就变成了4.2.1这种情景，再按4.2.1的方案处理】</span></span><br><span class="line">                        leftRotate(parent);</span><br><span class="line">                        insertFixUp(parent);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//uncle除了在右边或空外，还有可能在左边或者为空</span></span><br><span class="line">                uncle=gparent.left;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">//情景4.1：叔叔节点存在，并且为红色（父-叔 双红）</span></span><br><span class="line">                <span class="keyword">if</span> (uncle!=<span class="keyword">null</span> &amp;&amp; isRed(uncle))&#123;</span><br><span class="line">                    <span class="comment">//【将父节点和叔叔节点染色为黑，爷爷节点染色为红，再以爷爷节点为当前节点进行下一轮处理】</span></span><br><span class="line">                    parent.setColor(BLACK);</span><br><span class="line">                    uncle.setColor(BLACK);</span><br><span class="line">                    gparent.setColor(RED);</span><br><span class="line">                    insertFixUp(gparent);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//情景4.3：叔叔节点不存在，或者为黑色，父节点为爷爷节点的右子树</span></span><br><span class="line">                <span class="keyword">if</span> (uncle==<span class="keyword">null</span> || isBlack(uncle))&#123;</span><br><span class="line">                    <span class="comment">// 情景4.3.1：插入节点为其父节点的右子节点（RR双红情况）</span></span><br><span class="line">                    <span class="keyword">if</span> (node == parent.right)&#123;</span><br><span class="line">                        <span class="comment">// 【将父节点染成黑色，将爷爷节点染色为红色，以爷爷节点为当前节点，进行左旋，完成】</span></span><br><span class="line">                        setBlack(parent);</span><br><span class="line">                        setRed(gparent);</span><br><span class="line">                        leftRotate(gparent);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 情景4.3.2：插入节点为其父节点的左子节点（RL双红情况）</span></span><br><span class="line">                        <span class="comment">// 【以父节点进行右旋，得到4.3.1情景，按4.3.1情景处理】</span></span><br><span class="line">                        rightRotate(parent);</span><br><span class="line">                        insertFixUp(parent);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Java基础、红黑树</category>
      </categories>
      <tags>
        <tag>红黑树</tag>
      </tags>
  </entry>
  <entry>
    <title>CAS</title>
    <url>/2020/05/01/CAS/</url>
    <content><![CDATA[<!-- build time:Tue Jun 09 2020 08:31:59 GMT+0800 (GMT+08:00) --><h2 id="1、什么是CAS"><a href="#1、什么是CAS" class="headerlink" title="1、什么是CAS"></a>1、什么是CAS</h2><p>判断内存中某个位置的值是否为预期值，如果是则更改为新的值，这个过程是原子的，中间不予许中断，解决数据一致性问题。</p><p><img src="http://pics.oncevan.cn/img/1586255995702.png" alt=""></p><a id="more"></a><h2 id="2、等价代码"><a href="#2、等价代码" class="headerlink" title="2、等价代码"></a>2、等价代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimulateCAS</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">compareAndSwap</span><span class="params">(<span class="keyword">int</span> expectedValue,<span class="keyword">int</span> newValue)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> oldValue = value;</span><br><span class="line">        <span class="keyword">if</span>(oldValue == expectedValue)&#123;</span><br><span class="line">            value = newValue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、案例演示"><a href="#3、案例演示" class="headerlink" title="3、案例演示"></a>3、案例演示</h2><p>两个线程竞争</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  演示两个线程竞争修改value的值，最终查看结果</span></span><br><span class="line"><span class="comment">*  虽然有两个操作都会执行run方法，但是cas方法让最后value的值始终为1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoThreadCompetition</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">compareAndSwap</span><span class="params">(<span class="keyword">int</span> expectedValue,<span class="keyword">int</span> newValue)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> oldValue = value;</span><br><span class="line">        <span class="keyword">if</span>(oldValue == expectedValue)&#123;</span><br><span class="line">            value = newValue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">        TwoThreadsCompetition r = <span class="keyword">new</span> TwoThreadsCompetition();</span><br><span class="line">        r.value = <span class="number">0</span>;</span><br><span class="line">        Runnable target;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(r.value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        compareAndSwap(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、应用场景"><a href="#4、应用场景" class="headerlink" title="4、应用场景"></a>4、应用场景</h2><p>乐观锁</p><p>并发容器：ConcurrentHashMap</p><p>原子类</p><h3 id="Java中是如何利用CAS实现原子操作的？"><a href="#Java中是如何利用CAS实现原子操作的？" class="headerlink" title="Java中是如何利用CAS实现原子操作的？"></a>Java中是如何利用CAS实现原子操作的？</h3><ul><li>AtomicInteger加载Unsafe工具，用来直接操作内存数据</li><li>用Unsafe来实现底层操作</li><li>用volatile修饰value字段，保证可见性（如果不加多个线程之间看不到最新的数据）</li></ul><p><img src="http://pics.oncevan.cn/img/1586344347284.png" alt=""></p><h3 id="举例：getAndAddInt分析"><a href="#举例：getAndAddInt分析" class="headerlink" title="举例：getAndAddInt分析"></a>举例：getAndAddInt分析</h3><p><img src="http://pics.oncevan.cn/img/1586344830809.png" alt=""></p><p>CAS加上do…while自旋形成乐观锁</p><h3 id="Unsafe类"><a href="#Unsafe类" class="headerlink" title="Unsafe类"></a>Unsafe类</h3><ul><li>Unsafe是CAS的核心类。Java无法直接访问底层操作系统，而是通过本地（native）方法来访问。不过尽管如此，JVM还是开了一个后门，JDK中有一个类Unsafe，它提供了硬件级别的原子操作</li><li>valueOffset表示的是变量值在内存中的偏移地址，因为Unsafe就是根据内存偏移地址获取数据的原值的，这样我们就能通过unsafe来实现CAS了</li></ul><p><img src="http://pics.oncevan.cn/img/1586346222175.png" alt=""></p><p>Unsafe类中的compareAndSwapInt方法中先拿到变量value在内存中的地址，通过Atomic::cmpxchg实现了原子性的比较和替换，x是即将更新的值，e是原来的值</p><h2 id="5、CAS的缺点"><a href="#5、CAS的缺点" class="headerlink" title="5、CAS的缺点"></a>5、CAS的缺点</h2><ul><li><p><code>ABA</code>问题：一个线程one从内存位置V中取出A，这时候另一个线程two也从内存中取出A，并且线程two进行了一些操作将A变成了B，然后又将V位置的数据变成了A，而这时候线程one进行 CAS操作的时候发现内存中仍然是A，然后one线程提示操作成功。</p><p><strong>尽管one线程的CAS操作成功，但是不代表这个线程是没问题的</strong></p><ul><li>为了解决ABA问题，在<code>原子引用类</code>上加上<strong>版本号</strong>，这个有点类似于mysql的乐观锁一样，每个线程更改一次都需要更改版本号，那么多线程同时获取到同一个版本号的时候也只有一个线程可以更改成功。</li></ul></li><li><p>自旋时间过长</p></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>J.U.C</category>
      </categories>
      <tags>
        <tag>多线程与并发</tag>
        <tag>J.U.C</tag>
      </tags>
  </entry>
  <entry>
    <title>AQS</title>
    <url>/2020/05/17/AQS/</url>
    <content><![CDATA[<!-- build time:Tue Jun 09 2020 08:31:59 GMT+0800 (GMT+08:00) --><h2 id="AQS三要素"><a href="#AQS三要素" class="headerlink" title="AQS三要素"></a>AQS三要素</h2><h3 id="1、state状态"><a href="#1、state状态" class="headerlink" title="1、state状态"></a>1、state状态</h3><ul><li>这里<code>state</code>的具体含义，会根据具体实现类的不同而不同，比如在Semaphore里，它表示“剩余许可证的数量”，而在CountDownLatch里，它表示“还需要倒数的数量”</li><li>state是volatile修饰的，会被并发地修改，所以所有修改state地方法都需要保证线程安全，比如getState，setState以及compareAndSetState操作来读取和更新这个状态。这些方法都依赖于j.u.c.atomic包的支持</li><li>在ReentrantLock中，state用来表示“锁”的占有情况，包括可重入计数，当state的值为0的时候，标识改Lock不被任何线程所占有，其他线程就可以来占有</li></ul><a id="more"></a><h3 id="2、FIFO队列（控制线程抢锁和配合）"><a href="#2、FIFO队列（控制线程抢锁和配合）" class="headerlink" title="2、FIFO队列（控制线程抢锁和配合）"></a>2、FIFO队列（控制线程抢锁和配合）</h3><ul><li>这个队列用来<code>存放“等待的线程”</code>，AQS就是“排队管理器”，当多个线程争用同一把锁时，必须有排队机制将那些没能拿到锁的线程串在一起。当锁释放时，锁管理器就会挑选一个合适的线程来占有这个刚释放的锁</li><li>AQS会维护一个等待的线程队列，把<code>线程都放到这个队列里</code>，这个队列是个双向链表的形式</li></ul><p><img src="https://gitee.com/zhouxiaping/Pictures/raw/master/20200425212235.png" alt=""></p><h3 id="3、期望协作工具类去实现的获取-释放等重要方法"><a href="#3、期望协作工具类去实现的获取-释放等重要方法" class="headerlink" title="3、期望协作工具类去实现的获取/释放等重要方法"></a>3、期望协作工具类去实现的获取/释放等重要方法</h3><blockquote><p>这里的获取和释放方法，是利用AQS的协作工具类里最重要的方法，是由协作类自己去实现的，并且含义各不相同</p></blockquote><ul><li>获取方法<ul><li>获取操作会依赖state变量，经常会阻塞（比如获取不到锁的时候）</li><li>在<code>Semaphore</code>中，获取就是<code>acquire</code>方法，作用是<code>获取一个许可证</code></li><li>而在<code>CountDownLatch</code>里面，获取就是<code>await</code>方法，作用是“<code>等待，直到倒数结束</code>”</li></ul></li><li>释放方法<ul><li>释放操作不会阻塞</li><li>在Semaphore中，释放就是<code>release</code>方法，作用是<code>释放一个许可证</code></li><li>CountDownLatch里面，获取就是<code>countDown</code>方法，作用就是“<code>倒数1个数</code>”</li></ul></li></ul><h2 id="AQS源码分析"><a href="#AQS源码分析" class="headerlink" title="AQS源码分析"></a>AQS源码分析</h2><h4 id="1、AQS用法"><a href="#1、AQS用法" class="headerlink" title="1、AQS用法"></a>1、AQS用法</h4><ol><li>写一个类，想好<code>协作</code>的逻辑，实现<code>获取/释放</code>方法（比如Semaphore的逻辑就是许可证的分发）</li><li>内部写一个<code>Sync</code>继承<code>AbstractQueuedSynchronizer</code></li><li>根据是否独占来重写tryAcquire/tryRelease 或 tryAcquireShared(int acquires) /tryReleaseShared(int releases) 等方法，在之前写的获取/释放方法中调用AQS的acquire/release或者Shared方法</li></ol><h4 id="2、AQS在CountDownLatch的运用总结（源码分析已省略）"><a href="#2、AQS在CountDownLatch的运用总结（源码分析已省略）" class="headerlink" title="2、AQS在CountDownLatch的运用总结（源码分析已省略）"></a>2、AQS在CountDownLatch的运用总结（源码分析已省略）</h4><ul><li>调用CountDownLatch的await方法时，便会尝试获取“共享锁”，不过一开始是获取不到该锁的，于是线程被阻塞</li><li>而“共享锁”可获取到的条件，就是“锁计数器”的值为0</li><li>而“锁计数器”的初始值为count，每当一个线程调用该CountDownLatch的对象countDown()方法时，才将“锁计数器”-1</li></ul><h4 id="3、AQS在Semaphore中的运用"><a href="#3、AQS在Semaphore中的运用" class="headerlink" title="3、AQS在Semaphore中的运用"></a>3、AQS在Semaphore中的运用</h4><p><img src="https://gitee.com/zhouxiaping/Pictures/raw/master/20200427114513.png" alt=""></p><h3 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h3><p>【Java技术之AQS详解】<a href="https://www.jianshu.com/p/da9d051dcc3d" target="_blank" rel="noopener">https://www.jianshu.com/p/da9d051dcc3d</a></p><p>【Java开发之AQS详解】<a href="https://www.cnblogs.com/waterystone/p/4920797.html" target="_blank" rel="noopener">https://www.cnblogs.com/waterystone/p/4920797.html</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>J.U.C</category>
      </categories>
      <tags>
        <tag>多线程与并发</tag>
        <tag>J.U.C</tag>
      </tags>
  </entry>
  <entry>
    <title>Atomic包</title>
    <url>/2020/04/29/Atomic%E5%8C%85/</url>
    <content><![CDATA[<!-- build time:Tue Jun 09 2020 08:31:59 GMT+0800 (GMT+08:00) --><h2 id="1、原子类"><a href="#1、原子类" class="headerlink" title="1、原子类"></a>1、原子类</h2><p><strong>什么是原子类？</strong></p><ul><li>不可分割</li><li>一个操作是不可中断的，即便是多线程的情况下也可以保证</li></ul><p><strong>有什么作用</strong>？</p><p>原子类的作用和锁类似，是为了保证并发情况下线程安全。不过与锁相比，有一定的优势：</p><ul><li><strong>粒度更细</strong>：原子变量可以把竞争范围缩小到变量级别，这是我们可以获得的最细粒度的情况了，通常锁的粒度都要大于原子变量的粒度</li><li><strong>效率更高</strong>：通常，使用原子类的效率会比使用锁的效率更高，除了高度竞争的情况</li></ul><a id="more"></a><h2 id="2、原子类分类"><a href="#2、原子类分类" class="headerlink" title="2、原子类分类"></a>2、原子类分类</h2><p><img src="http://pics.oncevan.cn/img/1586139534245.png" alt=""></p><h2 id="3、AtomicIntegerFieldUpdate"><a href="#3、AtomicIntegerFieldUpdate" class="headerlink" title="3、AtomicIntegerFieldUpdate"></a>3、AtomicIntegerFieldUpdate</h2><p>AtomicIntegerFieldUpdate对普通变量升级为具有原子功能</p><p>使用场景：偶尔需要一个原子Get-Set操作</p><p>使用条件：变量必须是可见的，比如如果是private就不能使用，另外不支持对static变量进行使用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicIntegerFieldUpdaterDemo</span>  <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Candidate tom;</span><br><span class="line">    <span class="keyword">static</span> Candidate peter;</span><br><span class="line">    public static AtomicIntegerFieldUpdater&lt;Candidate&gt; scoreUpdater = AtomicIntegerFieldUpdater.newUpdater(Candidate.class,"score");、、</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            peter.score++;</span><br><span class="line">            scoreUpdater.getAndIncrement(tom);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Candidate</span> </span>&#123;</span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">int</span> score; <span class="comment">//保证升级的变量是可见的，不能是static的变量</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        tom = <span class="keyword">new</span> Candidate();</span><br><span class="line">        peter = <span class="keyword">new</span> Candidate();</span><br><span class="line">        Lock r = <span class="keyword">new</span> Lock();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(<span class="string">"普通变量："</span>+peter.score);</span><br><span class="line">        System.out.println(<span class="string">"升级后的变量："</span>+tom.score);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、Adder累加器"><a href="#4、Adder累加器" class="headerlink" title="4、Adder累加器"></a>4、Adder累加器</h2><ul><li>是Java8引入的，相对是比较新的一个类</li><li>高并发下LongAdder比AtomicLong效率高，不过本质是空间换时间</li><li>竞争激烈的时候。LongAdder把不同线程对应到不同的Cell上进行修改，降低了冲突的概率，是多段锁的理念，提高了并发性</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述：演示高并发情景下，LongAdder比AtomicLong性能好</span></span><br><span class="line"><span class="comment"> * 结果：100000000</span></span><br><span class="line"><span class="comment"> * AtomicLong耗费的时间：3701</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        AtomicLong counter = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            service.submit(<span class="keyword">new</span> Task(counter));</span><br><span class="line">        &#125;</span><br><span class="line">        service.shutdown();</span><br><span class="line">        <span class="keyword">while</span>(!service.isTerminated())&#123; &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis()-start;</span><br><span class="line">        </span><br><span class="line">        System.out.println(counter.get());</span><br><span class="line">        System.out.println(<span class="string">"AtomicLong耗费的时间："</span>+end);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span>  AtomicLong counter;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Task</span><span class="params">(AtomicLong counter)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.counter = counter;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10000</span> ; i++) &#123;</span><br><span class="line">                counter.incrementAndGet();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述：演示高并发情景下，LongAdder比AtomicLong性能好</span></span><br><span class="line"><span class="comment"> * 结果：100000000</span></span><br><span class="line"><span class="comment"> * LongAdder耗费的时间：559</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        LongAdder counter = <span class="keyword">new</span> LongAdder();</span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            service.submit(<span class="keyword">new</span> Task(counter));</span><br><span class="line">        &#125;</span><br><span class="line">        service.shutdown();</span><br><span class="line">        <span class="keyword">while</span>(!service.isTerminated())&#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis()-start;</span><br><span class="line"></span><br><span class="line">        System.out.println(counter.sum());</span><br><span class="line">        System.out.println(<span class="string">"LongAdder耗费的时间："</span>+end);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span>  LongAdder counter;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Task</span><span class="params">(LongAdder counter)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.counter = counter;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10000</span> ; i++) &#123;</span><br><span class="line">                counter.increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原因：由于竞争很激烈，每一次加法，AtomicLong都要flush和refresh，导致很耗费资源</p><p><img src="http://pics.oncevan.cn/img/1586144701212.png" alt=""></p><p>thread1和thread2之间不能通信，所以线程1改变的值需要写到local cache再写到shared cache中，thread2才可以知道ctr的值</p><p><img src="http://pics.oncevan.cn/img/1586162055639.png" alt=""></p><p>在内部，这个LongAdder的实现原理和刚才的AtomicLong是不同的，刚才的AtomicLong的实现原理是每一次加法都需要做同步，所以在高并发的时候会导致冲突比较多，也就降低了效率。</p><p>而LongAdder,每个线程会有自己的一个计数器，仅用来自己线程内计数，这样一来就不会和其他线程的计数器干扰</p><p>如图中所示，第一个线程的计数器数值，也就是ctr‘，为1的时候，可能线程2的计数器ctr’‘的数值已经是3了，他们之间并不存在竞争关系，所以在加和的过程中，根本不需要同步机制，也不需要AtomicLong的flush和refresh。这里也没有一个公共的counter来给所有的线程统一计数。</p><p>LongAdder引入了分段累加的概念，内部有一个base变量和一个Cell[]数组共同参与计数</p><p>base变量：竞争不激烈，直接累加到该变量上</p><p>Cell数组：竞争激烈，各个线程分散累加到自己的槽Cell[ i ]中</p><p><img src="http://pics.oncevan.cn/img/1586176358920.png" alt=""></p><h3 id="sum源码"><a href="#sum源码" class="headerlink" title="sum源码"></a>sum源码</h3><p><img src="http://pics.oncevan.cn/img/1586176033751.png" alt="">就是如果Cell为空sum函数直接就返回base的值，如果Cell不为空就遍历并累加Cell到sum当中，相当于sum为Cell的值和base的值的总和。由于sum函数中没有加锁，但是Cell中的元素的值随时可能变化，所以到最后可能前面的元素的值发生了变化导致返回的sum不是那么精确。</p><p>在低争用下，AtomicLong和LongAdder这两个类具有相似的特征。但是在竞争激烈的情况下，LongAdder的预期吞吐量要高得多，但是要消耗更多的空间。</p><p>LongAdder适合的场景是统计求和计数的场景，而且LongAdder基本只提供了add方法，AtomicLong还具有cas方法</p><p>LongAccumulator累加器：对计算的顺序没有要求，适用于并行计算</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>J.U.C</category>
      </categories>
      <tags>
        <tag>多线程与并发</tag>
        <tag>J.U.C</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC</title>
    <url>/2020/05/25/SpringMVC/</url>
    <content><![CDATA[<!-- build time:Tue Jun 09 2020 08:31:59 GMT+0800 (GMT+08:00) --><h2 id="1-MVC"><a href="#1-MVC" class="headerlink" title="1 MVC"></a>1 MVC</h2><p>说起SpringMVC就不得不先谈一下MVC框架模式：</p><p>在我们实际开发的最后到产品上线，供给客户使用，客户通过浏览器或者app等进行数据的操作，实现这个的有，处理发送请求，业务逻辑处理以及访问数据库，这三个功能我们是可以放到一块使用的，但是如果放在一起，代码便会很臃肿，不利于维护，于是便出现了代码分层思想，把代码按照功能分为三层，即模型层(Model)、显示层(View)、控制层(Controller)，这种代码的组织架构就叫MVC框架模式！</p><p><img src="https://img-blog.csdnimg.cn/20190527151230203.png" alt="MVC分层图"></p><p>相信做过开发的同学对上面这种处理流程并不陌生，我们通常都会编写Controller处理前端发来的请求，接着调用Service方法来实现业务方面的流程，接着调用Dao层处理数据…</p><h2 id="2-SpringMVC和MVC有什么关系？"><a href="#2-SpringMVC和MVC有什么关系？" class="headerlink" title="2 SpringMVC和MVC有什么关系？"></a>2 SpringMVC和MVC有什么关系？</h2><p>Spring MVC是一个基于Java的实现了MVC设计模式的请求驱动类型的轻量级Web框架，通过把Model，View，Controller分离，将web层进行职责解耦，把复杂的web应用分成逻辑清晰的几部分，简化开发，减少出错，方便组内开发人员之间的配合。</p><p>下面是SpringMVC的处理流程：</p><p><img src="https://img-blog.csdn.net/20180708224853769?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2E3NDUyMzM3MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p><p>（1）用户发送请求至前端控制器DispatcherServlet；<br>（2） DispatcherServlet收到请求后，调用HandlerMapping处理器映射器，请求获取Handle；<br>（3）处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet；<br>（4）DispatcherServlet 调用 HandlerAdapter处理器适配器；<br>（5）HandlerAdapter 经过适配调用 具体处理器(Handler，也叫后端控制器)；<br>（6）Handler执行完成返回ModelAndView；<br>（7）HandlerAdapter将Handler执行结果ModelAndView返回给DispatcherServlet；<br>（8）DispatcherServlet将ModelAndView传给ViewResolver视图解析器进行解析；<br>（9）ViewResolver解析后返回具体View；<br>（10）DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）<br>（11）DispatcherServlet响应用户。</p><h2 id="3-SpringMVC有什么优点呢？"><a href="#3-SpringMVC有什么优点呢？" class="headerlink" title="3 SpringMVC有什么优点呢？"></a>3 SpringMVC有什么优点呢？</h2><ol><li>可以支持各种视图技术,而不仅仅局限于JSP；</li><li>与Spring框架集成（如IoC容器、AOP等）；</li><li>清晰的角色分配：前端控制器(dispatcherServlet) , 请求到处理器映射（handlerMapping), 处理器适配器（HandlerAdapter), 视图解析器（ViewResolver）。</li><li>支持各种请求资源的映射策略。</li></ol><h2 id="4-与其他MVC实现的框架如Struts2的区别？"><a href="#4-与其他MVC实现的框架如Struts2的区别？" class="headerlink" title="4 与其他MVC实现的框架如Struts2的区别？"></a>4 与其他MVC实现的框架如Struts2的区别？</h2><ol><li><p>SpringMVC的入口是一个servlet即前端控制器（DispatchServlet），而struts2入口是一个filter过虑器（StrutsPrepareAndExecuteFilter）。</p></li><li><p>SpringMVC是基于方法开发(一个url对应一个方法)，请求参数传递到方法的形参，可以设计为单例或多例(建议单例)，struts2是基于类开发，传递参数是通过类的属性，只能设计为多例。</p></li><li><p>Struts采用值栈存储请求和响应的数据，通过OGNL存取数据，SpringMVC通过参数解析器是将request请求内容解析，并给方法形参赋值，将数据和视图封装成ModelAndView对象，最后又将ModelAndView中的模型数据通过reques域传输到页面。Jsp视图解析器默认使用jstl。</p></li></ol><p>参考链接：</p><p><a href="https://blog.csdn.net/a745233700/article/details/80963758" target="_blank" rel="noopener">https://blog.csdn.net/a745233700/article/details/80963758</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>线程容器</title>
    <url>/2020/04/27/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<!-- build time:Tue Jun 09 2020 08:31:59 GMT+0800 (GMT+08:00) --><h2 id="线程池的好处"><a href="#线程池的好处" class="headerlink" title="线程池的好处"></a>线程池的好处</h2><ul><li>加快响应速度</li><li>合理利用cpu和内存</li><li>统一管理 （创建线程开销太大，线程池避免了反复创建并销毁线程所带来的开销问题）</li></ul><a id="more"></a><h2 id="线程池适合的场景"><a href="#线程池适合的场景" class="headerlink" title="线程池适合的场景"></a>线程池适合的场景</h2><ul><li>当服务器接收到大量请求时，使用线程池是很合适的，它可以大大减少线程的创建和销毁次数，提高服务器的工作效率</li><li>实际上，在开发中，如果需要创建5个以上的线程，那么就可以使用线程池来管理</li></ul><h2 id="创建和停止线程池"><a href="#创建和停止线程池" class="headerlink" title="创建和停止线程池"></a>创建和停止线程池</h2><p><img src="http://pics.oncevan.cn/img/1585550647736.png" alt=""></p><ul><li><p>corePoolSize : 指的是核心线程数：线程池在完成初始化后，默认情况下，线程池中并没有任何数据，线程池会等待有任务到来时，再创建新线程去执行任务</p></li><li><p>maxPoolSize：线程池有可能会在核心线程基础上，额外增加一些线程，但是这些新增加的线程数有一个上限，这就是maxPoolSize。</p><p><img src="http://pics.oncevan.cn/img/1585551252103.png" alt=""></p></li></ul><h3 id="线程创建规则"><a href="#线程创建规则" class="headerlink" title="线程创建规则"></a>线程创建规则</h3><p>1、如果线程数小于corePoolSize，即使其他工作线程处于空闲状态，也会创建一个新线程来运行新任务。</p><p>2、如果线程数等于或大于corePoolSize但少于maxPoolSize，则将任务放入workQueue队列</p><p>3、如果workQueue队伍已满，并且线程数小于maxPoolSize，则创建一个新线程来运行任务</p><p>4、如果workQueue队列已满，并且线程数大于或等于maxPoolSize，则拒绝该任务。</p><p><img src="http://pics.oncevan.cn/img/20200607102402.png" alt=""></p><p><strong>举例：</strong>线程池：核心池大小为5，最大池大小为10，队列为100</p><p>因为线程中请求最多会创建5个，然后任务将被添加到队列中，直到达到100.当队列已满时，将创建最新的线程maxPoolSize，最多到10个线程，如果再来任务就拒绝。</p><h3 id="keepAliveTime"><a href="#keepAliveTime" class="headerlink" title="keepAliveTime"></a>keepAliveTime</h3><ul><li>如果当前的线程数多于corePoolSize，那么多余的线程空闲时间超过keepAliveTime，它们就会被终止</li></ul><h3 id="ThreadFactory-用来创建线程"><a href="#ThreadFactory-用来创建线程" class="headerlink" title="ThreadFactory (用来创建线程)"></a>ThreadFactory (用来创建线程)</h3><ul><li>新的线程室友ThreadFactory创建的，默认使用Executors.defaultThreadFactory()，创建出来的线程给都在同一个线程组，拥有同样的NORM_PRIORITY优先级并且都不是守护线程。如果自己指定ThreadFactory，那么就可以改变线程名、线程组、优先级、是否为守护线程等。</li><li>通常我们用默认的ThreadFactory就可以了。</li></ul><h3 id="workQueue"><a href="#workQueue" class="headerlink" title="workQueue"></a>workQueue</h3><ul><li>有三种最常见的队列类型<ul><li>直接交接：SynchronousQueue（只是简单的交接，里面不存任务）</li><li>无界队列：LinkedBlockingQueue（不会被塞满，maxPoolSIze用不上了）</li><li>有界队列：ArrayBlockingQueue</li></ul></li></ul><h2 id="线程池应该手动创建还是自动创建"><a href="#线程池应该手动创建还是自动创建" class="headerlink" title="线程池应该手动创建还是自动创建"></a>线程池应该手动创建还是自动创建</h2><ul><li><p>手动创建更好，因为这样可以让我们更加明确线程池的运行规则，避免资源耗尽的风险</p></li><li><p>自动创建线程池会有哪些问题：</p><ul><li><p><code>newFixedThreadPool</code>：固定的线程数（<strong>核心线程和最大线程数一样</strong>），使用的队列是无界队列，所以当请求数越来越多，并且无法即使处理完毕的时候，容易暂用大量的内容，可能会导致OOM。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>singleThreadExecutor</code>：只有一个线程（<strong>核心线程和最大线程数一样</strong>），这也会导致和上一个同样的问题。</p></li><li><p><code>CachedThreadPool</code>：可缓存线程池，这里的弊端在于第二个参数maximumPoolSize被设置为<strong>Integer.MAX_VALUE</strong>，这可能会创建数量非常多的线程，甚至超过了OOM</p><p><img src="http://pics.oncevan.cn/img/1585555276675.png" alt=""></p></li><li><p><code>ScheduledThreadPool</code>：支持定时和周期时间来执行任务</p><p><img src="http://pics.oncevan.cn/img/1585555440711.png" alt=""></p></li></ul></li></ul><pre><code>- `workStealingPool`：JDK1.8加入，这个线程适用于可以产生子任务，产生的子任务可以加入当前线程下的队列，每个线程都会有自己的队列，如果一个线程子任务过多，其他线程有可能会帮助该线程执行子任务，所以这就造成线程任务执行的没有顺序的特点。</code></pre><ul><li><p>正确创建线程池的方法：</p><ul><li>cpu密集型（加密，计算hash）：最佳线程数为cpu核心数的1-2倍</li><li>耗时IO型（读写数据库、文件、网络读写）：最佳线程数一般会大于cpu核心很多倍</li></ul></li></ul><h2 id="停止线程池的正确方法"><a href="#停止线程池的正确方法" class="headerlink" title="停止线程池的正确方法"></a>停止线程池的正确方法</h2><p>1、shutdown：会把线程正在执行的任务和在workQueue中的任务全部执行完之后再停止工作，期间也会拒绝新任务。（isShotdown是否进入停止状态，只要运行完shutdown后就会返回true；isTerminated线程是否结束，只要线程还在运行后就是false，awaitTermination在等待时间内线程结束、在等待时间内未结束、在等待时间内被中断）</p><p>2、shutdownNow：使用该命令后，正在运行的线程将会收到中断信号，正在等待队列的任务会返回一个runnableList再做进一步处理。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Runable&gt; runnableList = executorService.shutdownNow();</span><br></pre></td></tr></table></figure><h2 id="任务太多线程怎么拒绝（4种拒绝策略）"><a href="#任务太多线程怎么拒绝（4种拒绝策略）" class="headerlink" title="任务太多线程怎么拒绝（4种拒绝策略）"></a>任务太多线程怎么拒绝（4种拒绝策略）</h2><p>1、AbortPolicy：抛出异常，表明没有提交成功。</p><p>2、DiscardPolicy：默默丢弃任务，不会给出任何提示</p><p>3、DiscardOldestPolicy：会把队列中存在时间最久（最老）的任务丢弃，腾出空间用来保存新的任务</p><p>4、CallerRunPolicy：谁提交的任务谁负责执行，比如是主线程提交的任务也是主线程负责执行完成。好处有：形成一种负反馈，使主线程提交任务的速度变慢。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><h3 id="线程池组成部分"><a href="#线程池组成部分" class="headerlink" title="线程池组成部分"></a>线程池组成部分</h3><ul><li>线程池管理器</li><li>工作线程</li><li>任务队列</li><li>任务接口（Task）</li></ul><h3 id="Executor家族"><a href="#Executor家族" class="headerlink" title="Executor家族"></a>Executor家族</h3><ul><li>Executor</li><li>ExecutorService：有初步管理线程池的能力，比如说shotdown</li><li>Executors：工具类，可帮助快速创建出线程池</li></ul><p><img src="http://pics.oncevan.cn/img/1585572888510.png" alt="1585572888510">))</p><h3 id="线程池状态"><a href="#线程池状态" class="headerlink" title="线程池状态"></a>线程池状态</h3><p>1、RUNNING：接受新任务并处理排队任务</p><p>2、SHUTDOWN：不接受新任务，但处理排队任务【shutdown的效果】</p><p>3、STOP：不接受新任务，也不处理排队任务、并中断正在进行的任务【shutdownNow的效果】</p><p>4、TIDYING：所有任务都已终止，workerCount为零时，线程会转换到这个状态，并将运行terminate（）钩子方法</p><p>5、TERMINATED：terminate运行完成</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>J.U.C</category>
      </categories>
      <tags>
        <tag>J.U.C</tag>
        <tag>线程池</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis概览</title>
    <url>/2020/05/19/MyBatis/</url>
    <content><![CDATA[<!-- build time:Tue Jun 09 2020 08:31:59 GMT+0800 (GMT+08:00) --><h2 id="1-MyBatis与JDBC"><a href="#1-MyBatis与JDBC" class="headerlink" title="1 MyBatis与JDBC"></a>1 MyBatis与JDBC</h2><h3 id="1-1-jdbc编程步骤"><a href="#1-1-jdbc编程步骤" class="headerlink" title="1.1  jdbc编程步骤"></a>1.1 jdbc编程步骤</h3><p>1、 加载数据库驱动</p><p>2、 创建并获取数据库链接</p><p>3、 创建jdbcstatement对象</p><a id="more"></a><p>4、 设置sql语句</p><p>5、 设置sql语句中的参数(使用preparedStatement)</p><p>6、 通过statement执行sql并获取结果</p><p>7、 对sql执行结果进行解析处理</p><p>8、 释放资源(resultSet、preparedstatement、connection)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">d_ResultSet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Connection conn=<span class="keyword">null</span>;</span><br><span class="line">		PreparedStatement ps=<span class="keyword">null</span>;</span><br><span class="line">		ResultSet rs=<span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123; </span><br><span class="line">			Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            conn=DriverManager.</span><br><span class="line">                         getConnection(<span class="string">"jdbc:mysql://localhost:3307/TestJdbc"</span>,<span class="string">"root"</span>,<span class="string">"123456"</span>);</span><br><span class="line">			</span><br><span class="line">			String sql=<span class="string">"select id,username,pwd from t_user where id&gt;?"</span>;</span><br><span class="line">			ps=conn.prepareStatement(sql);</span><br><span class="line">			ps.setObject(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">//把id大于2的记录都取出来</span></span><br><span class="line">			rs=ps.executeQuery();<span class="comment">//ps.executeQuery() 执行并返回结果集</span></span><br><span class="line">			<span class="keyword">while</span>(rs.next()) &#123;<span class="comment">//rs.next()指向第一条</span></span><br><span class="line">				<span class="comment">//getInt() 传入的参数是列索引</span></span><br><span class="line">				System.out.println(rs.getInt(<span class="number">1</span>)+<span class="string">"---"</span>+rs.getString(<span class="number">2</span>)+<span class="string">"---"</span>+rs.getString(<span class="number">3</span>));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(rs!=<span class="keyword">null</span>)&#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					rs.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(ps!=<span class="keyword">null</span>)&#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					ps.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					conn.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-JDBC问题总结"><a href="#1-2-JDBC问题总结" class="headerlink" title="1.2 JDBC问题总结"></a>1.2 JDBC问题总结</h3><ol><li>数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库链接池可解决此问题。</li><li>Sql语句在代码中硬编码，造成代码不易维护，实际应用sql变化的可能较大，sql变动需要改变Java代码。</li><li>使用preparedStatement向占有位符号传参数存在硬编码，因为sql语句的where条件不一定，可能多也可能少，修改sql还要修改代码，系统不易维护。</li><li>对结果集解析存在硬编码（查询列名），sql变化导致解析代码变化，系统不易维护，如果能将数据库记录封装成pojo对象解析比较方便。</li></ol><h3 id="1-3-MyBatis介绍"><a href="#1-3-MyBatis介绍" class="headerlink" title="1.3 MyBatis介绍"></a>1.3 MyBatis介绍</h3><p>MyBatis 本是apache的一个开源项目<strong>iBatis</strong>， 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis，实质上MyBatis对ibatis进行一些改进。</p><p>MyBatis是一个优秀的持久层框架，它对JDBC的操作数据库的过程进行封装，使开发者只需要关注 SQL 本身，而不需要花费精力去处理例如注册驱动、创建connection、创建statement、手动设置参数、结果集检索等jdbc繁杂的过程代码。</p><p>MyBatis通过xml或注解的方式将要执行的各种statement（statement、preparedStatemnt、CallableStatement）配置起来，并通过java对象和statement中的sql进行映射生成最终执行的sql语句，最后由MyBatis框架执行sql并将结果映射成java对象并返回。</p><h3 id="1-4-MyBatis对JDBC的优化"><a href="#1-4-MyBatis对JDBC的优化" class="headerlink" title="1.4 MyBatis对JDBC的优化"></a>1.4 MyBatis对JDBC的优化</h3><p>JDBC是Java提供的一个操作数据库的API； MyBatis是一个持久层ORM（对象关系映射Object relational Mapping）框架，底层是对JDBC的封装。</p><p>MyBatis对JDBC操作数据库做了一系列的优化：</p><ol><li>MyBatis使用已有的连接池管理，避免浪费资源，提高程序可靠性。</li><li>MyBatis提供插件自动生成DAO层代码，提高编码效率和准确性。</li><li>MyBatis 提供了一级和二级缓存，提高了程序性能。</li><li>MyBatis使用动态SQL语句，提高了SQL维护。（此优势是基于XML配置）</li><li>MyBatis对数据库操作结果进行自动映射</li></ol><h3 id="1-5-动态代理在MyBatis中的应用"><a href="#1-5-动态代理在MyBatis中的应用" class="headerlink" title="1.5 动态代理在MyBatis中的应用"></a>1.5 动态代理在MyBatis中的应用</h3><p>mybatis最令人印象深刻的特性恐怕就是interface与mapper的映射了。开发者只需要声明接口，并编写对应在xml中的sql，一个可以提供服务的dao层功能就完成了，竟然不需要编写interface的实现类。这个感觉起来非常神奇也令人疑惑不解的特性正是利用jdk的动态代理技术实现的。事实上，mybatis内部使用了多种动态代理技术，包括jdk自带、javassist、cglib等，</p><p>参考链接：<a href="https://blog.csdn.net/joenqc/article/details/80233637" target="_blank" rel="noopener">https://blog.csdn.net/joenqc/article/details/80233637</a></p><h2 id="2-Mybatis工作原理"><a href="#2-Mybatis工作原理" class="headerlink" title="2 Mybatis工作原理"></a>2 Mybatis工作原理</h2><p><img src="https://img-blog.csdn.net/20180624002302854?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQ3NDUwNjk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p><p>流程解析：</p><ol><li><p>mybatis应用程序通过SqlSessionFactoryBuilder从mybatis-config.xml配置文件（也可以用Java文件配置的方式，需要添加@Configuration）来构建SqlSessionFactory（SqlSessionFactory是线程安全的）；</p></li><li><p>然后，SqlSessionFactory的实例直接开启一个SqlSession，再通过SqlSession实例获得Mapper对象并运行Mapper映射的SQL语句，完成对数据库的CRUD和事务提交，之后关闭SqlSession。</p></li></ol><blockquote><p>说明：SqlSession是单线程对象，因为它是非线程安全的，是持久化操作的独享对象，类似jdbc中的Connection，底层就封装了jdbc连接。</p></blockquote><p>详细流程如下：</p><ol><li>加载mybatis全局配置文件（数据源、mapper映射文件等），解析配置文件，MyBatis基于XML配置文件生成Configuration，和一个个MappedStatement（包括了参数映射配置、动态SQL语句、结果映射配置），其对应着&lt;select | update | delete | insert&gt;标签项。</li><li>SqlSessionFactoryBuilder通过Configuration对象生成SqlSessionFactory，用来开启SqlSession。</li><li>SqlSession对象完成和数据库的交互：<ul><li>用户程序调用mybatis接口层api（即Mapper接口中的方法）</li><li>SqlSession通过调用api的Statement ID找到对应的MappedStatement对象</li><li>通过Executor（负责动态SQL的生成和查询缓存的维护）将MappedStatement对象进行解析，sql参数转化、动态sql拼接，生成jdbc Statement对象 Executor接口有两个实现，一个是基本执行器、一个是缓存执行器。</li><li>JDBC执行sql。</li><li>借助MappedStatement中的结果映射关系，将返回结果转化成HashMap、JavaBean等存储结构并返回。</li></ul></li></ol><p>参考链接：<a href="https://blog.csdn.net/u014745069/article/details/80788127" target="_blank" rel="noopener">https://blog.csdn.net/u014745069/article/details/80788127</a></p><h2 id="3-Tips"><a href="#3-Tips" class="headerlink" title="3 Tips"></a>3 Tips</h2><h3 id="3-1-和-的区别是什么？"><a href="#3-1-和-的区别是什么？" class="headerlink" title="3.1 #{}和${}的区别是什么？"></a>3.1 #{}和${}的区别是什么？</h3><p>#{}是预编译处理，${}是字符串替换。</p><p>MyBatis在处理#{}时，会将sql中的#{}替换为?号，调用PreparedStatement的set方法来赋值；</p><p>MyBatis在处理${}时，就是把${}替换成变量的值，相当于直接显示数据。</p><p>使用#{}可以有效的防止SQL注入，提高系统安全性。</p><p>不是所有情况都是需要使用#，比如order by和%like%的时候需要使用${}。</p><p>参考：</p><p><a href="https://blog.csdn.net/m0_37627053/article/details/80584239" target="_blank" rel="noopener">https://blog.csdn.net/m0_37627053/article/details/80584239</a></p><p><a href="https://blog.csdn.net/weixin_40939471/article/details/97629024" target="_blank" rel="noopener">https://blog.csdn.net/weixin_40939471/article/details/97629024</a></p><h3 id="3-2-statement和-prestatement比较"><a href="#3-2-statement和-prestatement比较" class="headerlink" title="3.2 statement和 prestatement比较"></a>3.2 statement和 prestatement比较</h3><p>1.后者的安全性较高，可以防止sql注入。</p><p>2.后者先经过编译，效率较高</p><h3 id="3-3-parameterType和resultType"><a href="#3-3-parameterType和resultType" class="headerlink" title="3.3 parameterType和resultType"></a>3.3 parameterType和resultType</h3><p>parameterType：指定输入参数类型，mybatis通过ognl从输入对象中获取参数值拼接在sql中。</p><p>resultType：指定输出结果类型，mybatis将sql查询结果的一行记录数据映射为resultType指定类型的对象。</p><h3 id="3-4-selectOne和selectList"><a href="#3-4-selectOne和selectList" class="headerlink" title="3.4 selectOne和selectList"></a>3.4 selectOne和selectList</h3><p>动态代理对象调用sqlSession.selectOne() 和 sqlSession.selectList()是根据mapper接口方法的返回值决定，如果返回list则调用selectList方法，如果返回单个对象则调用selectOne方法。</p><h3 id="3-5-Mapper方法最终是如何执行的"><a href="#3-5-Mapper方法最终是如何执行的" class="headerlink" title="3.5 Mapper方法最终是如何执行的"></a>3.5 Mapper方法最终是如何执行的</h3><ol><li><p>Mapper 接口在初始SqlSessionFactory 注册的。</p></li><li><p>Mapper 接口注册在了名为 MapperRegistry 类的 HashMap中， key = Mapper class value = 创建当前Mapper的工厂。</p></li><li><p>Mapper 注册之后，可以从SqlSession中get</p></li><li><p>SqlSession.getMapper 运用了 JDK动态代理，产生了目标Mapper接口的代理对象。</p></li><li><p>动态代理的 代理类是 MapperProxy ，这里边最终完成了增删改查方法的调用。</p></li></ol><h3 id="3-6-MyBatis与Hibernate有哪些不同？"><a href="#3-6-MyBatis与Hibernate有哪些不同？" class="headerlink" title="3.6 MyBatis与Hibernate有哪些不同？"></a>3.6 MyBatis与Hibernate有哪些不同？</h3><ol><li>Mybatis和hibernate不同，它不完全是一个ORM框架，因为MyBatis需要程序员自己编写Sql语句。</li><li>Mybatis直接编写原生态sql，可以严格控制sql执行性能，灵活度高，非常适合对关系数据模型要求不高的软件开发，因为这类软件需求变化频繁，一但需求变化要求迅速输出成果。但是灵活的前提是mybatis无法做到数据库无关性，如果需要实现支持多种数据库的软件，则需要自定义多套sql映射文件，工作量大。</li><li>Hibernate对象/关系映射能力强，数据库无关性好，对于关系模型要求高的软件，如果用hibernate开发可以节省很多代码，提高效率。</li></ol><h3 id="3-7-为什么说Mybatis是半自动ORM映射工具？"><a href="#3-7-为什么说Mybatis是半自动ORM映射工具？" class="headerlink" title="3.7 为什么说Mybatis是半自动ORM映射工具？"></a>3.7 为什么说Mybatis是半自动ORM映射工具？</h3><p>Hibernate属于全自动ORM映射工具，使用Hibernate查询关联对象或者关联集合对象时，可以根据对象关系模型直接获取，所以它是全自动的。而Mybatis在查询关联对象或关联集合对象时，需要手动编写sql来完成，所以，称之为半自动ORM映射工具。</p><h3 id="3-8-如何获取自动生成的-主-键值"><a href="#3-8-如何获取自动生成的-主-键值" class="headerlink" title="3.8 如何获取自动生成的(主)键值?"></a>3.8 如何获取自动生成的(主)键值?</h3><p>insert 方法总是返回一个int值 ，这个值代表的是插入的行数。</p><p>如果采用自增长策略，自动生成的键值在 insert 方法执行完后可以被设置到传入的参数对象中。</p><p>usegeneratedkeys=”true” keyproperty=”id”</p><h3 id="3-9-使用MyBatis的mapper接口调用时有哪些要求？"><a href="#3-9-使用MyBatis的mapper接口调用时有哪些要求？" class="headerlink" title="3.9 使用MyBatis的mapper接口调用时有哪些要求？"></a>3.9 使用MyBatis的mapper接口调用时有哪些要求？</h3><ol><li>Mapper接口方法名和mapper.xml中定义的每个sql的id相同；</li><li>Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql 的parameterType的类型相同；</li><li>Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同；</li><li>Mapper.xml文件中的namespace即是mapper接口的类路径。</li></ol><h3 id="3-10-和spring使用一级缓存失效"><a href="#3-10-和spring使用一级缓存失效" class="headerlink" title="3.10 和spring使用一级缓存失效"></a>3.10 和spring使用一级缓存失效</h3><p>spring结合mybatis后，一级缓存作用：</p><ul><li>在未开启事物的情况之下，每次查询，spring都会关闭旧的sqlSession而创建新的sqlSession,因此此时的一级缓存是没有启作用的</li></ul><blockquote><ol><li>我们需要访问数据</li><li>spring检查到了这种需求，于是去申请一个mybatis的sqlsession（资源池），并将申请到的sqlsession与当前线程绑定，放入threadlocal里面</li><li>sqlSessionTemplate从threadlocal获取到sqlsession，去执行查询</li><li>查询结束，清空threadlocal中与当前线程绑定的sqlsession，释放资源</li><li>我们又需要访问数据</li><li>返回到步骤2</li></ol></blockquote><ul><li>在开启事物的情况之下，spring使用threadLocal获取当前资源绑定同一个sqlSession，因此此时一级缓存是有效的</li></ul><blockquote><p>getSqlSession方法里面维护了个SqlSessionHolder，关联了事务与session，如果存在则直接取出，否则则新建个session，所以在有事务的里，每个session都是同一个，故能用上缓存了</p></blockquote><h3 id="3-10-一对一、一对多关联查询"><a href="#3-10-一对一、一对多关联查询" class="headerlink" title="3.10 一对一、一对多关联查询"></a>3.10 一对一、一对多关联查询</h3><p>在resultMap标签中，使用association标签</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lcb.mapping.userMapper"</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!--association  一对一关联查询 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getClass"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultMap</span>=<span class="string">"ClassesResultMap"</span>&gt;</span>  </span><br><span class="line">        select * from class c,teacher t where c.teacher_id=t.t_id and c.c_id=#&#123;id&#125;  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span>  </span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.lcb.user.Classes"</span> <span class="attr">id</span>=<span class="string">"ClassesResultMap"</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 实体类的字段名和数据表的字段名映射 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"c_id"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"c_name"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">javaType</span>=<span class="string">"com.lcb.user.Teacher"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"t_id"</span>/&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"t_name"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span>  </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--collection  一对多关联查询 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getClass2"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultMap</span>=<span class="string">"ClassesResultMap2"</span>&gt;</span>  </span><br><span class="line">        select * from class c,teacher t,student s where c.teacher_id=t.t_id and c.c_id=s.class_id and c.c_id=#&#123;id&#125;  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span>  </span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.lcb.user.Classes"</span> <span class="attr">id</span>=<span class="string">"ClassesResultMap2"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"c_id"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"c_name"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">javaType</span>=<span class="string">"com.lcb.user.Teacher"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"t_id"</span>/&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"t_name"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span>  </span><br><span class="line"> </span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"student"</span> <span class="attr">ofType</span>=<span class="string">"com.lcb.user.Student"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"s_id"</span>/&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"s_name"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>参考链接：</p><p><a href="https://blog.csdn.net/u014745069/article/details/80788127" target="_blank" rel="noopener">https://blog.csdn.net/u014745069/article/details/80788127</a></p><p><a href="https://blog.csdn.net/qq_41877184/article/details/93394718" target="_blank" rel="noopener">https://blog.csdn.net/qq_41877184/article/details/93394718</a></p><p><a href="https://blog.csdn.net/qq_30225725/article/details/88074408" target="_blank" rel="noopener">https://blog.csdn.net/qq_30225725/article/details/88074408</a></p><p><a href="https://blog.csdn.net/a745233700/article/details/80977133" target="_blank" rel="noopener">https://blog.csdn.net/a745233700/article/details/80977133</a></p><p><a href="https://blog.csdn.net/Wang_huanA/article/details/88072367" target="_blank" rel="noopener">https://blog.csdn.net/Wang_huanA/article/details/88072367</a></p><p><a href="https://blog.csdn.net/a745233700/article/details/80977133" target="_blank" rel="noopener">https://blog.csdn.net/a745233700/article/details/80977133</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP与UDP</title>
    <url>/2020/06/01/TCP%E4%B8%8EUDP/</url>
    <content><![CDATA[<!-- build time:Tue Jun 09 2020 08:31:59 GMT+0800 (GMT+08:00) --><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>网络协议是每个前端工程师都必须要掌握的知识，TCP/IP 中有两个具有代表性的传输层协议，分别是 TCP 和 UDP，本文将介绍下这两者以及它们之间的区别。</p><h3 id="一、TCP-IP网络模型"><a href="#一、TCP-IP网络模型" class="headerlink" title="一、TCP/IP网络模型"></a>一、TCP/IP网络模型</h3><p>计算机与网络设备要相互通信，双方就必须基于相同的方法。比如，如何探测到通信目标、由哪一边先发起通信、使用哪种语言进行通信、怎样结束通信等规则都需要事先确定。不同的硬件、操作系统之间的通信，所有的这一切都需要一种规则。而我们就把这种规则称为协议（protocol）。</p><p>TCP/IP 是互联网相关的各类协议族的总称，比如：TCP，UDP，IP，FTP，HTTP，ICMP，SMTP 等都属于 TCP/IP 族内的协议。</p><p>TCP/IP模型是互联网的基础，它是一系列网络协议的总称。这些协议可以划分为四层，分别为链路层、网络层、传输层和应用层。</p><ul><li>链路层：负责封装和解封装IP报文，发送和接受ARP/RARP报文等。</li><li>网络层：负责路由以及把分组报文发送给目标网络或主机。</li><li>传输层：负责对报文进行分组和重组，并以TCP或UDP协议格式封装报文。</li><li>应用层：负责向用户提供应用程序，比如HTTP、FTP、Telnet、DNS、SMTP等。</li></ul><p><img src="https://image.fundebug.com/2019-03-21-01.png" alt="img"></p><p>在网络体系结构中网络通信的建立必须是在通信双方的对等层进行，不能交错。 在整个数据传输过程中，数据在发送端时经过各层时都要附加上相应层的协议头和协议尾（仅数据链路层需要封装协议尾）部分，也就是要对数据进行协议封装，以标识对应层所用的通信协议。接下去介绍TCP/IP 中有两个具有代表性的传输层协议—-TCP 和 UDP。</p><h3 id="二、UDP"><a href="#二、UDP" class="headerlink" title="二、UDP"></a>二、UDP</h3><p>UDP协议全称是用户数据报协议，在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。在OSI模型中，在第四层——传输层，处于IP协议的上一层。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。</p><p>它有以下几个特点：</p><h4 id="1-面向无连接"><a href="#1-面向无连接" class="headerlink" title="1. 面向无连接"></a>1. 面向无连接</h4><p>首先 UDP 是不需要和 TCP一样在发送数据前进行三次握手建立连接的，想发数据就可以开始发送了。并且也只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作。</p><p>具体来说就是：</p><ul><li>在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了</li><li>在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作</li></ul><h4 id="2-有单播，多播，广播的功能"><a href="#2-有单播，多播，广播的功能" class="headerlink" title="2. 有单播，多播，广播的功能"></a>2. 有单播，多播，广播的功能</h4><p>UDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。</p><h4 id="3-UDP是面向报文的"><a href="#3-UDP是面向报文的" class="headerlink" title="3. UDP是面向报文的"></a>3. UDP是面向报文的</h4><p>发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付IP层。UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。因此，应用程序必须选择合适大小的报文</p><h4 id="4-不可靠性"><a href="#4-不可靠性" class="headerlink" title="4. 不可靠性"></a>4. 不可靠性</h4><p>首先不可靠性体现在无连接上，通信都不需要建立连接，想发就发，这样的情况肯定不可靠。</p><p>并且收到什么数据就传递什么数据，并且也不会备份数据，发送数据也不会关心对方是否已经正确接收到数据了。</p><p>再者网络环境时好时坏，但是 UDP 因为没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。</p><p><img src="https://image.fundebug.com/2019-03-21-02.gif" alt="img"></p><p>从上面的动态图可以得知，UDP只会把想发的数据报文一股脑的丢给对方，并不在意数据有无安全完整到达。</p><h4 id="5-头部开销小，传输数据报文时是很高效的。"><a href="#5-头部开销小，传输数据报文时是很高效的。" class="headerlink" title="5. 头部开销小，传输数据报文时是很高效的。"></a>5. 头部开销小，传输数据报文时是很高效的。</h4><p><img src="https://image.fundebug.com/2019-03-21-03.png" alt="img"></p><p>UDP 头部包含了以下几个数据：</p><ul><li>两个十六位的端口号，分别为源端口（可选字段）和目标端口</li><li>整个数据报文的长度</li><li>整个数据报文的检验和（IPv4 可选 字段），该字段用于发现头部信息和数据中的错误</li></ul><p>因此 UDP 的头部开销小，只有八字节，相比 TCP 的至少二十字节要少得多，在传输数据报文时是很高效的</p><h3 id="三、TCP"><a href="#三、TCP" class="headerlink" title="三、TCP"></a>三、TCP</h3><p>当一台计算机想要与另一台计算机通讯时，两台计算机之间的通信需要畅通且可靠，这样才能保证正确收发数据。例如，当你想查看网页或查看电子邮件时，希望完整且按顺序查看网页，而不丢失任何内容。当你下载文件时，希望获得的是完整的文件，而不仅仅是文件的一部分，因为如果数据丢失或乱序，都不是你希望得到的结果，于是就用到了TCP。</p><p>TCP协议全称是传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议，由 IETF 的RFC 793定义。TCP 是面向连接的、可靠的流协议。流就是指不间断的数据结构，你可以把它想象成排水管中的水流。</p><h4 id="1-TCP连接过程"><a href="#1-TCP连接过程" class="headerlink" title="1. TCP连接过程"></a>1. TCP连接过程</h4><p>如下图所示，可以看到建立一个TCP连接的过程为（三次握手的过程）:</p><p><img src="https://image.fundebug.com/2019-03-21-04.png" alt="img"></p><p><strong>第一次握手</strong></p><p>客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入 SYN-SENT 状态。</p><p><strong>第二次握手</strong></p><p>服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。</p><p><strong>第三次握手</strong></p><p>当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入 ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。</p><p>这里可能大家会有个疑惑：为什么 TCP 建立连接需要三次握手，而不是两次？这是因为这是为了防止出现失效的连接请求报文段被服务端接收的情况，从而产生错误。</p><p><img src="https://image.fundebug.com/2019-03-21-05.gif" alt="img"></p><h4 id="2-TCP断开链接"><a href="#2-TCP断开链接" class="headerlink" title="2. TCP断开链接"></a>2. TCP断开链接</h4><p><img src="https://image.fundebug.com/2019-03-21-06.png" alt="img"></p><p>TCP 是全双工的，在断开连接时两端都需要发送 FIN 和 ACK。</p><p><strong>第一次握手</strong></p><p>若客户端 A 认为数据发送完成，则它需要向服务端 B 发送连接释放请求。</p><p><strong>第二次握手</strong></p><p>B 收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明 A 到 B 的连接已经释放，不再接收 A 发的数据了。但是因为 TCP 连接是双向的，所以 B 仍旧可以发送数据给 A。</p><p><strong>第三次握手</strong></p><p>B 如果此时还有没发完的数据会继续发送，完毕后会向 A 发送连接释放请求，然后 B 便进入 LAST-ACK 状态。</p><p><strong>第四次握手</strong></p><p>A 收到释放请求后，向 B 发送确认应答，此时 A 进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有 B 的重发请求的话，就进入 CLOSED 状态。当 B 收到确认应答后，也便进入 CLOSED 状态。</p><h4 id="3-TCP协议的特点"><a href="#3-TCP协议的特点" class="headerlink" title="3. TCP协议的特点"></a>3. TCP协议的特点</h4><ul><li><p>面向连接</p><p>面向连接，是指发送数据之前必须在两端建立连接。建立连接的方法是“三次握手”，这样能建立可靠的连接。建立连接，是为数据的可靠传输打下了基础。</p></li><li><p>仅支持单播传输</p></li></ul><p>每条TCP传输连接只能有两个端点，只能进行点对点的数据传输，不支持多播和广播传输方式。</p><ul><li>面向字节流</li></ul><p>TCP不像UDP一样那样一个个报文独立地传输，而是在不保留报文边界的情况下以字节流方式进行传输。</p><ul><li><p>可靠传输</p><p>对于可靠传输，判断丢包，误码靠的是TCP的段编号以及确认号。TCP为了保证报文传输的可靠，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的字节发回一个相应的确认(ACK)；如果发送端实体在合理的往返时延(RTT)内未收到确认，那么对应的数据（假设丢失了）将会被重传。</p></li><li><p>提供拥塞控制</p></li></ul><p>当网络出现拥塞的时候，TCP能够减小向网络注入数据的速率和数量，缓解拥塞</p><ul><li>TCP提供全双工通信</li></ul><p>TCP允许通信双方的应用程序在任何时候都能发送数据，因为TCP连接的两端都设有缓存，用来临时存放双向通信的数据。当然，TCP可以立即发送一个数据段，也可以缓存一段时间以便一次发送更多的数据段（最大的数据段大小取决于MSS）</p><h3 id="四、TCP和UDP的比较"><a href="#四、TCP和UDP的比较" class="headerlink" title="四、TCP和UDP的比较"></a>四、TCP和UDP的比较</h3><h4 id="1-对比"><a href="#1-对比" class="headerlink" title="1. 对比"></a>1. 对比</h4><table><thead><tr><th align="left"></th><th align="left">UDP</th><th align="left">TCP</th></tr></thead><tbody><tr><td align="left">是否连接</td><td align="left">无连接</td><td align="left">面向连接</td></tr><tr><td align="left">是否可靠</td><td align="left">不可靠传输，不使用流量控制和拥塞控制</td><td align="left">可靠传输，使用流量控制和拥塞控制</td></tr><tr><td align="left">连接对象个数</td><td align="left">支持一对一，一对多，多对一和多对多交互通信</td><td align="left">只能是一对一通信</td></tr><tr><td align="left">传输方式</td><td align="left">面向报文</td><td align="left">面向字节流</td></tr><tr><td align="left">首部开销</td><td align="left">首部开销小，仅8字节</td><td align="left">首部最小20字节，最大60字节</td></tr><tr><td align="left">适用场景</td><td align="left">适用于实时应用（IP电话、视频会议、直播等）</td><td align="left">适用于要求可靠传输的应用，例如文件传输</td></tr></tbody></table><h4 id="2-总结"><a href="#2-总结" class="headerlink" title="2. 总结"></a>2. 总结</h4><ul><li>TCP向上层提供面向连接的可靠服务 ，UDP向上层提供无连接不可靠服务。</li><li>虽然 UDP 并没有 TCP 传输来的准确，但是也能在很多实时性要求高的地方有所作为</li><li>对数据准确性要求高，速度可以相对较慢的，可以选用TCP</li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>不变性与final</title>
    <url>/2020/05/15/%E4%B8%8D%E5%8F%98%E6%80%A7%E4%B8%8Efinal/</url>
    <content><![CDATA[<!-- build time:Tue Jun 09 2020 08:31:59 GMT+0800 (GMT+08:00) --><h2 id="1、不变性"><a href="#1、不变性" class="headerlink" title="1、不变性"></a>1、不变性</h2><h3 id="1-1、什么是不变性（Immutable）"><a href="#1-1、什么是不变性（Immutable）" class="headerlink" title="1.1、什么是不变性（Immutable）"></a>1.1、什么是不变性（Immutable）</h3><p>如果对象在被创建后，状态就不能被修改，那么它就是不可变的。</p><p>具有不变性的对象一定是 线程安全的，我们不需要对其采取任何额外的安全措施，也能保证线程安全</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> age = <span class="number">18</span>;<span class="comment">//如果用private修饰，那么别的类不仅不可以修改，而且读取也可以</span></span><br><span class="line">    <span class="keyword">final</span> String name = <span class="string">"Alice"</span>;<span class="comment">//只用final，别的类仅可以读取，不可修改</span></span><br><span class="line">    <span class="keyword">int</span> score = <span class="number">0</span>;<span class="comment">//如果加了这行代码，那么Person就不具备不变性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2、final"><a href="#2、final" class="headerlink" title="2、final"></a>2、final</h2><h3 id="2-1、final的作用"><a href="#2-1、final的作用" class="headerlink" title="2.1、final的作用"></a>2.1、final的作用</h3><p>不同版本的JDK中final有所不同</p><ul><li>早期<ul><li>锁定</li><li>效率：早期的Java实现版本中，会将final方法转为内嵌调用</li></ul></li><li>现在<ul><li>类防止被继承</li><li>方法防止被重写</li><li>变量防止被修改（被final修饰的变量，不管变量是哪种变量，切记<strong>不可变的是变量的引用而非引用指向对象的内容</strong>）</li><li>天生是线程安全的，而不需要额外的同步开销</li></ul></li></ul><h3 id="2-2、final的三种用法"><a href="#2-2、final的三种用法" class="headerlink" title="2.2、final的三种用法"></a>2.2、final的三种用法</h3><h4 id="2-2-1、final修饰变量"><a href="#2-2-1、final修饰变量" class="headerlink" title="2.2.1、final修饰变量"></a>2.2.1、final修饰变量</h4><p>含义：被final修饰的变量，意味着值不能被修改。如果变量是对象，那么对象的应用不能变，但是对象自身的内容依然可以变化</p><h5 id="final修饰-3种变量"><a href="#final修饰-3种变量" class="headerlink" title="final修饰:3种变量"></a>final修饰:3种变量</h5><p>final instance variable（类中的final属性）</p><p>final static variable（类中的static final属性）</p><p>final local variable（方法中的final变量）</p><h5 id="final修饰变量：赋值时机"><a href="#final修饰变量：赋值时机" class="headerlink" title="final修饰变量：赋值时机"></a>final修饰变量：赋值时机</h5><p>属性被声明为final后，该变量则只能被赋值一次。且一旦被赋值，final的变量就不能再被改变，无论如何也不会变。</p><ul><li><p>final instance variable（类中的final属性）</p><ul><li><p>第一种是在声明变量的<strong>等号右边直接赋值</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">finalTest</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> a = <span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>第二种就是在<strong>构造函数</strong>中赋值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">finalTest</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">finalTest</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>第三就是在<strong>类的初始代码块</strong>中赋值（不常用）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">finalTest</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> a;</span><br><span class="line">    &#123;</span><br><span class="line">        a = <span class="number">7</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不采用第一种赋值方法，那么就必须在第2、3种挑一个来赋值，而不能不赋值，这是final语法规定的</p></li></ul><ul><li><p>final static variable（类中的static final属性）</p><ul><li><p>第一种是在声明变量的<strong>等号右边直接赋值</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">finalTest</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> a = <span class="number">7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>第二种是用<strong>static初始代码块</strong>赋值，但是不能用普通的初始代码块赋值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">finalTest</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        a = <span class="number">7</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>final local variable（方法中的final变量）</p><ul><li>和前面两种不同，这里的变量是在方法里的，所以没有构造函数，也不存在初始化代码块。所以它不规定赋值时机，只要求在<strong>使用前必须赋值</strong>，这个方法中的非final变量也是一样的。</li></ul></li></ul><h4 id="2-2-2、final修饰方法"><a href="#2-2-2、final修饰方法" class="headerlink" title="2.2.2、final修饰方法"></a>2.2.2、final修饰方法</h4><ul><li><strong>构造方法</strong>不允许final修饰</li><li><strong>不可被重写</strong>，也就是不能被Override,即便是子类有同样的名字的方法（同名方法会报错，参数不同除外），那也不是Override，这个和static方法是一个道理</li><li>引申：static方法不能被重写，但是子类与父类中可以存在同名的static方法，但是两者毫无关系</li></ul><h4 id="2-2-3、final修饰类"><a href="#2-2-3、final修饰类" class="headerlink" title="2.2.3、final修饰类"></a>2.2.3、final修饰类</h4><ul><li>不可被继承：比如说常用的String类就是final修饰的，我们没见过哪个类是继承String类的</li></ul><h4 id="2-2-4、final的注意点"><a href="#2-2-4、final的注意点" class="headerlink" title="2.2.4、final的注意点"></a>2.2.4、final的注意点</h4><ul><li>final修饰对象的时候，只是对象的引用不变，而对象本身的属性是可以变化的</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">final</span> String name = <span class="string">"Alice"</span>;</span><br><span class="line">    <span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Person person = <span class="keyword">new</span> Person();<span class="comment">//即使这个对象类型被final修饰了，但是由于Person类中的score没有被final修饰，所以不能保证Person对象不可变</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、不变性和final的关系"><a href="#3、不变性和final的关系" class="headerlink" title="3、不变性和final的关系"></a>3、不变性和final的关系</h2><ul><li>不变性并不意味着简单地用final修饰就是不可变<ul><li>对于基本数据类型，确实被final修饰后就具有不变性</li><li>但是对于对象类型，需要改对象保证自身被创建后，状态永远不会变才可以（参见上一条final注意点）</li></ul></li></ul><h3 id="如何利用final实现对象不可变"><a href="#如何利用final实现对象不可变" class="headerlink" title="如何利用final实现对象不可变"></a>如何利用final实现对象不可变</h3><ul><li>把所有对象都声明为final？</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123; <span class="comment">//Person类中所有变量都使用了final修饰</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">final</span> String name = <span class="string">"Alice"</span>;</span><br><span class="line">    <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    String test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.test = <span class="string">"111"</span>;</span><br><span class="line">        System.out.println(person.test);<span class="comment">//打印出111</span></span><br><span class="line">        person.test = <span class="string">"222"</span>;</span><br><span class="line">        System.out.println(person.test);<span class="comment">//打印出222，</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就说明即使Person中的所有变量都是使用了final修饰，但是由于Test中的test变量没有被final修饰，导致Person对象还是可变的，所以即使所有变量都使用final修饰也不能保证这个对象就是不可变的</p><ul><li>一个属性是对象类型的不可变对象的正确例子</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> ImmutableDemo&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; students = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImmutableDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        students.add(<span class="string">"111"</span>);</span><br><span class="line">        students.add(<span class="string">"222"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isStudent</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> students.conteins(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里虽然没有任何一个变量被final修饰了，但是它是不可变的。</p><h4 id="总结-满足以下条件时，对象才是不可变的"><a href="#总结-满足以下条件时，对象才是不可变的" class="headerlink" title="总结(满足以下条件时，对象才是不可变的)"></a>总结(满足以下条件时，对象才是不可变的)</h4><ul><li>对象创建后，其状态就不能修改</li><li>所有属性都是final修饰的</li><li>对象创建过程中没有发生逸出</li></ul><h2 id="4、栈封闭"><a href="#4、栈封闭" class="headerlink" title="4、栈封闭"></a>4、栈封闭</h2><ul><li>在方法里新建的局部变量，时机上是存储在每个线程私有的栈空间，而每个栈的栈空间是不能被其他线程所访问到的，所以不会有线程安全问题。这就是“栈封闭”技术，是“线程封闭”技术的一种情况。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  栈内的数据是线程安全的:10000</span></span><br><span class="line"><span class="comment">*  栈内的数据是线程安全的:10000</span></span><br><span class="line"><span class="comment">*  16114</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackConfinement</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inThread</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> neverGoOut = <span class="number">0</span>；</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;neverGoOut++&#125;</span><br><span class="line">        System.out.println(<span class="string">"栈内的数据是线程安全的："</span>+neverGoOut)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;index++&#125;</span><br><span class="line">     	inThread();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        StackConfinement r1  = <span class="keyword">new</span> StackConfinement();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(r1);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(r1);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread1.join();</span><br><span class="line">        thread2.join();</span><br><span class="line">        System.out.println(r1.index)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h3><p><img src="http://pics.oncevan.cn/img/1586357049531.png" alt=""></p><p>由于b被final修饰，后期不会再变化，就相当于常量了，，所以String c = b+2；就是wukong2，而a已经建立了一个“wukong2”，c没有必要再去新建一个对象，这时候会直接指向和a一样的地址，所以第一句为true</p><p>d指向常量池中的wukong，而且由于d没有被final修饰，所以编译器在使用d的时候不会提前知道d是什么值，所以e的值要在运行的时候确定，运行时确定的e会在堆上生成wukong2，所以第二句输出false</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>z</span>&#123;</span><br><span class="line">    String a = <span class="string">"wukong2"</span>;</span><br><span class="line">    <span class="keyword">final</span> String b = getDaShiXion();</span><br><span class="line">    String c  = b +<span class="number">2</span> ;</span><br><span class="line">    System.out.println(a==c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getDaShiXion</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"wukong"</span>;</span><br></pre></td></tr></table></figure><p>结果和上面第二种情况一样，也是false。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>J.U.C</category>
      </categories>
      <tags>
        <tag>J.U.C</tag>
        <tag>Java基础之语法</tag>
      </tags>
  </entry>
  <entry>
    <title>动态代理</title>
    <url>/2020/05/27/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<!-- build time:Tue Jun 09 2020 08:31:59 GMT+0800 (GMT+08:00) --><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>我们大家都知道微商代理，简单地说就是代替厂家卖商品，厂家“委托”代理为其销售商品。关于微商代理，首先我们从他们那里买东西时通常不知道背后的厂家究竟是谁，也就是说，“委托者”对我们来说是不可见的；其次，微商代理主要以朋友圈的人为目标客户，这就相当于为厂家做了一次对客户群体的“过滤”。我们把微商代理和厂家进一步抽象，前者可抽象为代理类，后者可抽象为委托类（被代理类）。通过使用代理，通常有两个优点，并且能够分别与我们提到的微商代理的两个特点对应起来：</p><ul><li>优点一：可以隐藏委托类的实现；</li><li>优点二：可以实现客户与委托类间的解耦，在不修改委托类代码的情况下能够做一些额外的处理。</li></ul><a id="more"></a><h2 id="1-静态代理"><a href="#1-静态代理" class="headerlink" title="1 静态代理"></a>1 静态代理</h2><blockquote><p>此为第一小节的提炼：</p><p>如果代理类在程序运行前就已经存在，那么这种代理方式被称为静态代理，这种情况下的代理类通常时我们在Java代码中定义的。</p><p>优点：如果需要对委托类的方法进行额外的过滤等需求，那么可以不用修改委托类，只需要修改代理类来达到效果；同时，这样可以实现代理类和委托类之间的解耦，在不修改委托类代码的情况下能够做一些额外的处理。</p><p>缺点：<strong>但是如果每个方法需要的处理都相同，那么就会造成代码冗余</strong> ；静态代理的局限在于运行前必须编写好代理类。</p></blockquote><p>若代理类在程序运行前就已经存在，那么这种代理方式被成为<strong>静态代理</strong>，这种情况下的代理类通常都是我们在Java代码中定义的。 通常情况下，<strong>静态代理中的代理类和委托类会实现同一接口或是派生自相同的父类。</strong></p><p>下面我们用Vendor类代表生产厂家，BusinessAgent类代表微商代理，来介绍下静态代理的简单实现，委托类和代理类都实现了Sell接口，Sell接口的定义如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sell</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ad</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ Vendor类的定义如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vendor</span> <span class="keyword">implements</span> <span class="title">Sell</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"In sell method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ad</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System,out.println(<span class="string">"ad method"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理类BusinessAgent的定义如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessAgent</span> <span class="keyword">implements</span> <span class="title">Sell</span> </span>&#123;</span><br><span class="line"> <span class="number">2</span>     <span class="keyword">private</span> Vendor mVendor;</span><br><span class="line"> <span class="number">3</span>   </span><br><span class="line"> <span class="number">4</span>     <span class="function"><span class="keyword">public</span> <span class="title">BusinessAgent</span><span class="params">(Vendor vendor)</span> </span>&#123;</span><br><span class="line"> <span class="number">5</span>         mVendor = vendor;</span><br><span class="line"> <span class="number">6</span>     &#125;</span><br><span class="line"> <span class="number">7</span>    </span><br><span class="line"> <span class="number">8</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123; mVendor.sell(); &#125;</span><br><span class="line"> <span class="number">9</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ad</span><span class="params">()</span> </span>&#123; mVendor.ad(); &#125;</span><br><span class="line"><span class="number">10</span> &#125;</span><br></pre></td></tr></table></figure><p>从BusinessAgent类的定义我们可以了解到，静态代理可以通过聚合来实现，让代理类持有一个委托类的引用即可。</p><p>下面我们考虑一下这个需求：给Vendor类增加一个过滤功能，只卖货给大学生。通过静态代理，我们无需修改Vendor类的代码就可以实现，只需在BusinessAgent类中的sell方法中添加一个判断即可如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessAgent</span> <span class="keyword">implements</span> <span class="title">Sell</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isCollegeStudent()) &#123;</span><br><span class="line">            vendor.sell();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这对应着我们上面提到的使用代理的第二个优点：可以实现客户与委托类间的解耦，在不修改委托类代码的情况下能够做一些额外的处理。静态代理的局限在于运行前必须编写好代理类，下面我们重点来介绍下运行时生成代理类的动态代理方式。</p><h2 id="2-动态代理"><a href="#2-动态代理" class="headerlink" title="2 动态代理"></a>2 动态代理</h2><p>代理类在程序运行时创建的代理方式被称为动态代理，也就是说，这种情况下，代理类并不是在Java代码中定义的，而是在程序运行时根据我们在Java代码中的“指示”动态生成的。<strong>相比于静态代理，动态代理的优势在于可以很方便的对代理类的函数进行统一的处理，而不用修改每个代理类的函数</strong>。</p><p>现在，假设我们要实现这样一个需求：在执行委托类中的方法之前输出“before”，在执行完毕后输出“after”。我们还是以上面例子中的Vendor类作为委托类，BusinessAgent类作为代理类来进行介绍。首先我们来使用静态代理来实现这一需求，相关代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessAgent</span> <span class="keyword">implements</span> <span class="title">Sell</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Vendor mVendor;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessAgent</span><span class="params">(Vendor vendor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mVendor = vendor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before"</span>);</span><br><span class="line">        mVendor.sell();</span><br><span class="line">        System.out.println(<span class="string">"after"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ad</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before"</span>);</span><br><span class="line">        mVendor.ad();</span><br><span class="line">        System.out.println(<span class="string">"after"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从以上代码中我们可以了解到，通过静态代理实现我们的需求需要我们在每个方法中都添加相应的逻辑，这里只存在两个方法所以工作量还不算大，假如Sell接口中包含上百个方法呢？这时候使用静态代理就会编写许多冗余代码。通过使用动态代理，我们可以做一个“统一指示”，从而对所有代理类的方法进行统一处理，而不用逐一修改每个方法。下面我们来具体介绍下如何使用动态代理方式实现我们的需求。</p><h3 id="2-1-使用动态代理"><a href="#2-1-使用动态代理" class="headerlink" title="2.1  使用动态代理"></a>2.1 使用动态代理</h3><h4 id="2-1-1-InvocationHandler接口"><a href="#2-1-1-InvocationHandler接口" class="headerlink" title="2.1.1 InvocationHandler接口"></a>2.1.1 InvocationHandler接口</h4><p>在使用动态代理时，我们需要定义一个位于代理类与委托类之间的中介类，这个中介类被要求实现InvocationHandler接口，这个接口的定义如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="function">Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从InvocationHandler这个名称我们就可以知道，实现了这个接口的中介类用做“调用处理器”。当我们调用代理类对象的方法时，这个“调用”会转送到invoke方法中，代理类对象作为proxy参数传入，参数method标识了我们具体调用的是代理类的哪个方法，args为这个方法的参数。这样一来，我们对代理类中的所有方法的调用都会变为对invoke的调用，这样我们可以在invoke方法中添加统一的处理逻辑（也可以根据method参数对不同的代理类方法做不同的处理）。因此我们只需在中介类的invoke方法实现中输出“before”，然后调用委托类的invoke方法，再输出“after”。下面我们来一步一步具体实现它。</p><h4 id="2-1-2-委托类的定义"><a href="#2-1-2-委托类的定义" class="headerlink" title="2.1.2 委托类的定义"></a>2.1.2 委托类的定义</h4><p>动态代理方式下，要求委托类必须实现某个接口，这里我们实现的是Sell接口。委托类Vendor类的定义如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vendor</span> <span class="keyword">implements</span> <span class="title">Sell</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"In sell method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ad</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System,out.println(<span class="string">"ad method"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-3-中介类"><a href="#2-1-3-中介类" class="headerlink" title="2.1.3 中介类"></a>2.1.3 中介类</h4><p>上面我们提到过，中介类必须实现InvocationHandler接口，作为调用处理器”拦截“对代理类方法的调用。中介类的定义如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"> <span class="number">2</span>     <span class="keyword">private</span> Object obj; <span class="comment">//obj为委托类对象；</span></span><br><span class="line"> <span class="number">3</span>     </span><br><span class="line"> <span class="number">4</span>     <span class="function"><span class="keyword">public</span> <span class="title">DynamicProxy</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"> <span class="number">5</span>         <span class="keyword">this</span>.obj = obj;</span><br><span class="line"> <span class="number">6</span>     &#125;</span><br><span class="line"> <span class="number">7</span> </span><br><span class="line"> <span class="number">8</span>     <span class="meta">@Override</span></span><br><span class="line"> <span class="number">9</span>     <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="number">10</span>         System.out.println(<span class="string">"before"</span>);</span><br><span class="line"><span class="number">11</span>         Object result = method.invoke(obj, args);</span><br><span class="line"><span class="number">12</span>         System.out.println(<span class="string">"after"</span>);</span><br><span class="line"><span class="number">13</span>         <span class="keyword">return</span> result;</span><br><span class="line"><span class="number">14</span>     &#125;</span><br><span class="line"><span class="number">15</span> &#125;</span><br></pre></td></tr></table></figure><p>从以上代码中我们可以看到，中介类持有一个委托类对象引用，在invoke方法中调用了委托类对象的相应方法（第11行），看到这里是不是觉得似曾相识？通过聚合方式持有委托类对象引用，把外部对invoke的调用最终都转为对委托类对象的调用。这不就是我们上面介绍的静态代理的一种实现方式吗？实际上，中介类与委托类构成了静态代理关系，在这个关系中，中介类是代理类，委托类就是委托类；</p><p>代理类与中介类也构成一个静态代理关系，在这个关系中，中介类是委托类，代理类是代理类。也就是说，动态代理关系由两组静态代理关系组成，这就是动态代理的原理。下面我们来介绍一下如何”指示“以动态生成代理类。</p><h4 id="2-1-4-动态生成代理类"><a href="#2-1-4-动态生成代理类" class="headerlink" title="2.1.4 动态生成代理类"></a>2.1.4 动态生成代理类</h4><p>动态生成代理类的相关代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建中介类实例</span></span><br><span class="line">        DynamicProxy  inter = <span class="keyword">new</span> DynamicProxy(<span class="keyword">new</span> Vendor());</span><br><span class="line">        <span class="comment">//加上这句将会产生一个$Proxy0.class文件，这个文件即为动态生成的代理类文件</span></span><br><span class="line">        System.getProperties().put(<span class="string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span>,<span class="string">"true"</span>); </span><br><span class="line">        <span class="comment">//获取代理类实例sell</span></span><br><span class="line">        Sell sell = (Sell)(Proxy.newProxyInstance(Sell<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>(),</span></span><br><span class="line">        new Class[] &#123;Sell.class&#125;, inter));</span><br><span class="line">        <span class="comment">//通过代理类对象调用代理类方法，实际上会转到invoke方法调用</span></span><br><span class="line">        sell.sell();</span><br><span class="line">        sell.ad();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在以上代码中，我们调用Proxy类的newProxyInstance方法来获取一个代理类实例。这个代理类实现了我们指定的接口并且会把方法调用分发到指定的调用处理器。这个方法的声明如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span> <span class="keyword">throws</span> IllegalArgumentException</span></span><br></pre></td></tr></table></figure><p>方法的三个参数含义分别如下：</p><ul><li><p>loader：定义了代理类的ClassLoder；</p></li><li><p>interfaces：代理类实现的接口列表</p></li><li><p>h：调用处理器，也就是我们上面定义的实现了InvocationHandler接口的类实例</p><p>我们运行一下，看看我们的动态代理是否能正常工作。我这里运行后的输出为：</p><p><img src="https://images2015.cnblogs.com/blog/871366/201604/871366-20160415114348770-658220206.png" alt="img"></p></li></ul><p>说明我们的动态代理确实奏效了。</p><p>上面我们已经简单提到过动态代理的原理，这里再简单的总结下：首先通过newProxyInstance方法获取代理类实例，而后我们便可以通过这个代理类实例调用代理类的方法，对代理类的方法的调用实际上都会调用中介类（调用处理器）的invoke方法，在invoke方法中我们调用委托类的相应方法，并且可以添加自己的处理逻辑。下面我们来看一下生成的代理类的代码究竟是怎样的。</p><h2 id="3-动态代理类的源码分析"><a href="#3-动态代理类的源码分析" class="headerlink" title="3  动态代理类的源码分析"></a>3 动态代理类的源码分析</h2><p>通过运行Main，我们会得到一个名为“$Proxy”的class文件，这个文件即为动态生成的代理类，我们通过反编译来查看下这个代理类的源代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sun.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy0</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Sell</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这5个Method对象分别代表equals()、toString()、ad()、sell()、hashCode()方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m4;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造方法接收一个InvocationHandler对象为参数，这个对象就是代理类的“直接委托类”（真正的委托类可以看做代理类的“间接委托类”）</span></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler var1) <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">super</span>（var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对equals方法的调用实际上转为对super.h.invoke方法的调用，父类中的h即为我们在构造方法中传入的InvocationHandler对象，以下的toString()、sell()、ad()、hashCode()等方法同理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object var1)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ((Boolean)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m1, <span class="keyword">new</span> Object[]&#123;var1&#125;)).booleanValue();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var3;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m2, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">ad</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m4, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m3, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ((Integer)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m0, (Object[])<span class="keyword">null</span>)).intValue();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这里完成Method对象的初始化（通过反射在运行时获得Method对象）</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"equals"</span>, <span class="keyword">new</span> Class[]&#123;Class.forName(<span class="string">"java.lang.Object"</span>)&#125;);</span><br><span class="line">            m2 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"toString"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">            m4 = Class.forName(<span class="string">"Sell"</span>).getMethod(<span class="string">"ad"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">            m3 = Class.forName(<span class="string">"Sell"</span>).getMethod(<span class="string">"sell"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">            m0 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"hashCode"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，以上代码的逻辑十分简单，我们在注释中也做出了相关的说明。（以上代码中涉及到反射的使用，对于反射还不是很熟悉的小伙伴可以参考这里：<a href="http://www.cnblogs.com/absfree/p/5277665.html" target="_blank" rel="noopener">Java核心技术点之反射</a>）</p><p>转载自：<a href="https://www.cnblogs.com/absfree/p/5392639.html" target="_blank" rel="noopener">https://www.cnblogs.com/absfree/p/5392639.html</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>ThreadLocal</title>
    <url>/2020/04/29/ThreadLocal/</url>
    <content><![CDATA[<!-- build time:Tue Jun 09 2020 08:31:59 GMT+0800 (GMT+08:00) --><h2 id="1、两大使用场景"><a href="#1、两大使用场景" class="headerlink" title="1、两大使用场景"></a>1、两大使用场景</h2><ul><li><code>典型场景1</code>：每个线程需要一个<strong>独享的对象</strong>（通常是工具类，典型需要使用的类有<code>SimpleDate Format</code>和<code>Random</code>）</li><li><code>典型场景2</code>：<strong>每个线程内</strong>需要保存全局变量（例如在拦截器中获取用户信息），可以让不同方法直接使用，<strong>避免参数传递的麻烦</strong></li></ul><a id="more"></a><h3 id="1-1、典型场景1"><a href="#1-1、典型场景1" class="headerlink" title="1.1、典型场景1"></a>1.1、典型场景1</h3><ul><li>每个Thread内有自己的实例副本，不共享</li><li>比喻：老师只能发一本教材，但是有多个学生，一起做笔记有线程安全问题，复印后每人一册后没有问题。</li></ul><h4 id="1-1-1、SimpleDateFormat的进化之路"><a href="#1-1-1、SimpleDateFormat的进化之路" class="headerlink" title="1.1.1、SimpleDateFormat的进化之路"></a>1.1.1、SimpleDateFormat的进化之路</h4><p>2个线程分别用自己的<code>SimpleDateFormat</code>，这没问题；</p><p>后来延申出10个，那么就有10个 线程和10个SimpleDateFormat，这虽然写法不优雅（应该复用对象），但勉强可以接受；</p><p>但是假设有1000个打印日期的任务，需要1000个线程使用SimpleDateFormat，那么创建销毁线程的开销很大。</p><ul><li><p>第一种方法是使用上一章讲到的newFixedThreadPool(10)来将1000个任务交给这10个线程去执行，这种方法的缺陷是SimpleDateFormat需要被创建1000次；</p></li><li><p>第二种是将SimpleDateFormat定义为静态变量，那么就不用创建1000次，但是缺陷是这么多线程共用一个SimpleDateFormat会发生线程不安全问题；</p></li><li><p>第三种是给生成date的函数中的关键代码上锁，这样就避免了线程不安全的问题。但是又引发了效率问题，1000个任务一个一个排队解决效率很低，更好的解决办法是使用ThreadLocal</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalNormalUsage</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">static</span> SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> finalI = i;</span><br><span class="line">            threadPool.submit(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">				<span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">                    Stirng Date = <span class="keyword">new</span> ThreadLocalNormalUsage04.date(finalI);</span><br><span class="line">                    System.out.println(date);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">date</span><span class="params">(<span class="keyword">int</span> seconds)</span></span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date(<span class="number">1000</span> * seconds);</span><br><span class="line">        String s = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">synchronized</span> (ThreadLocalNormalUsage04<span class="class">.<span class="keyword">class</span>)</span>&#123; <span class="comment">//类锁</span></span><br><span class="line">            s = dateFormat.format(date);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第四种是使用ThreadLocal，10个线程只需要创建出10个SimpleDateFormat对象，每个线程中有一个SimpleDateFormat对象，这样解决了线程安全问题同时也解决了效率问题</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalNormalUsage05</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> finalI = i;</span><br><span class="line">            threadPool.submit(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">				<span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">                    Stirng Date = <span class="keyword">new</span> ThreadLocalNormalUsage05.date(finalI);</span><br><span class="line">                    System.out.println(date);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">date</span><span class="params">(<span class="keyword">int</span> seconds)</span></span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date(<span class="number">1000</span> * seconds);</span><br><span class="line">   <span class="comment">//     SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");</span></span><br><span class="line">       SimpleDateFormat dateFormat ThreadSafeFormatter.dateFormatThreadLocal.get();<span class="comment">//获得类中返回的SimpleDateFormat</span></span><br><span class="line">        <span class="keyword">return</span> dateFormat.format(date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadSafeFormatter</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;SimpleDateFormat&gt; dateFormatThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;SimpleDateFormat&gt;()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> SimpleDateFormat <span class="title">initialValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2、典型场景2"><a href="#1-2、典型场景2" class="headerlink" title="1.2、典型场景2"></a>1.2、典型场景2</h3><p><img src="http://pics.oncevan.cn/img/1585714363192.png" alt=""></p><p>需求：每个线程内需要保存全局变量，可以让不同方法直接使用，避免参数传递的麻烦</p><ul><li>在此基础上可以演进，使用UserMap，第一个service将用户信息put进UserMap，之后的service久可以直接使用了，但是这又引发了线程不安全的问题。</li><li>当多线程同时工作时，我们需要保证线程安全，可以用synchronized，也可以用ConcurrentHashMap，但无论用什么，都会对性能有所影响。</li></ul><p>解决方法</p><ul><li>用ThreadLocal保存一些业务内容（用户权限信息、从用户系统获取到的用户名、userID等等）</li><li>这些信息在同一个线程内相同，但是不同的线程使用的业务你内容是不相同的</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalNormalUsage06</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Service1.process();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"张三"</span>);</span><br><span class="line">        UserContextHolder.holder.set(user);</span><br><span class="line">        <span class="keyword">new</span> Service2.process();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = UserContextHolder.holder.get();</span><br><span class="line">        System.out.println(user.name);</span><br><span class="line">        <span class="keyword">new</span> Service3.process();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service3</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = UserContextHolder.holder.get();</span><br><span class="line">        System.out.println(user.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserContextHolder</span></span>&#123;</span><br><span class="line">    <span class="comment">//一个Thread拥有一个ThreadLocalMap对象，一个ThreadLocalMap对象拥有多个ThreadLocal对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;User&gt; holder = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-、总结"><a href="#1-3-、总结" class="headerlink" title="1.3 、总结"></a>1.3 、总结</h3><ul><li><code>ThreadLocal</code>的两个作用<ul><li>让某个需要用到的对象在线程间隔离（每个线程都有自己独立的对象）</li><li>在任何方法中给都能轻松获取到该对象</li></ul></li><li>根据共享对象的生成时机不同，选择initialValue或set来保存对象<ul><li>场景一：<code>initialValue</code>，在ThreadLocal第一个get的时候把对象给初始化出来，对象初始化的实际可以由我们控制</li><li>场景二：<code>set</code>，如果需要保存到ThreadLocal里的对象的生成时机不由我们随意控制，例如拦截器生成的用户信息，用ThreadLocal.set直接放到ThreadLocal中，以便后续使用</li></ul></li><li>使用<code>ThreadLocal</code>带来的好处<ul><li><strong>达到线程安全</strong></li><li><strong>不需要加锁，提高执行效率</strong></li><li><strong>更高效地利用内存、节省开销</strong>：相比于每个任务都新建一个SimpleDateFormat，显然用ThreadLocal可以节省内存和开销</li><li><strong>免去传参地繁琐</strong>：无论时场景一地工具类，还是场景二地用户名，都可以在任何地方直接通过ThreadLocal拿到，再也不需要每次都传递同样地参数。ThreadLocal使得代码耦合度更低，更优雅。</li></ul></li></ul><h2 id="2、ThreadLocal原理"><a href="#2、ThreadLocal原理" class="headerlink" title="2、ThreadLocal原理"></a>2、ThreadLocal原理</h2><p>Thread、ThreadLocal、ThreadLocalMap三者之间的关系</p><p><img src="http://pics.oncevan.cn/img/1585718904796.png" alt=""></p><ul><li><p><code>initialValue()</code>：初始化</p><ul><li>该方法会返回当前线程对应的“初始值”，这是一个延迟加载的方法，只有在调用<code>get</code>方法的时候才会触发【get方法会检查ThreadLocalMap是否为空，为空的话就调用setInitialValue()来执行initialValue()默认返回null，如果没有重写initialValue()的话就会返回null】</li><li>当线程第一次使用<code>get</code>方法访问呢变量时，将调用此方法，除非线程当前调用了<code>set</code>方法，在这种情况下，不会为线程调用本<code>initialValue</code>方法【get方法会检查ThreadLocalMap是否为空，不为空的话就返回set进去的result】</li></ul><p><img src="http://pics.oncevan.cn/img/20200607141630.png" alt=""></p><ul><li><p>通常每个线程最多调用一次此方法，但如果已经调用了<code>remove()</code>后，再调用<code>get()</code>则可以再次调用此方法</p></li><li><p>如果不重写本方法，这个方法会返回null。一般使用匿名内部类的方法来重写<code>initialValue()</code>方法，以便再后续使用中可以初始化副本对象</p><p><img src="http://pics.oncevan.cn/img/1585796469997.png" alt=""></p></li></ul></li><li><p><code>set()</code>：为这个线程设置一个新值</p><p>set方法先拿到线程的应用，再把线程的引用通过getMap方法获取ThreadLocalMap，如果map为空创建map，不为空则覆盖map中的值。</p><p>ps：这个map以及map中的key和value都是保存在Thread类中的，而不是保存在ThreadLocal中</p><p><img src="http://pics.oncevan.cn/img/1585796073225.png" alt=""></p></li><li><p><code>get()</code>：得到这个线程对应的value。如果是首次调用get，则会调用initialValue来得到这个值。</p><p>get方法使先取出当前线程的ThreadLocalMap，然后调用map.getEntry（）方法，把本ThreadLocal的应用作为参数传入，取出map中属于本ThreadLocal的value。</p><p><img src="http://pics.oncevan.cn/img/1585796229568.png" alt=""></p></li><li><p><code>remove()</code>：删除对应这个线程的值（使用该值的话会报空指针异常），m.remove()中传入的key值为this，说明只会删除对应的ThreadLocal，其他的不受影响</p></li></ul><p><img src="http://pics.oncevan.cn/img/1585796520641.png" alt=""></p><p>通过源码分析可以看出，setInitoalValue和直接set最后都是利用map.set()方法来设置值，也就是说，最后都会对应到ThreadLocalMap的一个Entry，只不过起点（一个通过get()一个直接set()）和入口不一样</p><h2 id="3、ThreadLocal的注意点"><a href="#3、ThreadLocal的注意点" class="headerlink" title="3、ThreadLocal的注意点"></a>3、ThreadLocal的注意点</h2><h3 id="3-1、内存泄漏定义"><a href="#3-1、内存泄漏定义" class="headerlink" title="3.1、内存泄漏定义"></a>3.1、内存泄漏定义</h3><p>定于：内存泄漏是指某个对象不再有用，但是占用的内存却不能被回收</p><h3 id="3-2、内存泄漏的原因"><a href="#3-2、内存泄漏的原因" class="headerlink" title="3.2、内存泄漏的原因"></a>3.2、内存泄漏的原因</h3><p>原因：Entry就是一个键值对，它的构造函数中Key、Value，如果是普通赋值直接就是value=v，但是它还有一行super(k)，说明Entry继承了WeakReference（弱引用），Key使用了弱引用中的构造函数进行赋值，说明Key就是一个弱引用，而普通赋值value=v是一个强引用，这就导致了内存泄漏的可能性。</p><ul><li>弱引用的特点是，如果这个对象只被弱引用关联（没有任何强引用关联），那么这个对象就可以被回收，所以弱引用不会阻止GC</li></ul><p><img src="http://pics.oncevan.cn/img/1585797494790.png" alt=""></p><p><img src="http://pics.oncevan.cn/img/1585797467696.png" alt=""></p><p><img src="http://pics.oncevan.cn/img/1585797722389.png" alt=""></p><p>正常情况下，当线程终止，保存在ThreadLocal里的value会被垃圾回收器回收，因为没有任何强引用了。但是，如果线程不终止（比如线程需要保持很久），那么key对应的value就不能被回收，因为有以下的调用链，key为弱引用可以被回收，但是value不能被回收，所以在这种情况下发生了内存泄漏</p><p><img src="http://pics.oncevan.cn/img/1585798369835.png" alt=""></p><p>JDK已经考虑到这个问题，所以在set、remove、rehash方法中会扫描key为null的Entry，并把对应的value设置为null，这样value对象就可以被回收</p><p><img src="http://pics.oncevan.cn/img/1585798653172.png" alt=""></p><p>但是如果一个ThreadLocal不被使用，那么实际上set、remove、rehash方法也不会被调用，如果同时线程又不停止，那么调用链就一直存在，那么就导致了内存泄漏。</p><h3 id="3-3、如何避免内存泄漏（阿里规约）"><a href="#3-3、如何避免内存泄漏（阿里规约）" class="headerlink" title="3.3、如何避免内存泄漏（阿里规约）"></a>3.3、如何避免内存泄漏（阿里规约）</h3><p>调用remove方法，就会删除对应的Entry对象，可以避免内存泄漏，所以使用完ThreadLocal之后，应该调用remove方法。service1、service2，到service3最后一个使用ThreadLocal后就调用remove方法。</p><h3 id="3-4、空指针异常"><a href="#3-4、空指针异常" class="headerlink" title="3.4、空指针异常"></a>3.4、空指针异常</h3><ul><li>java拆箱装箱导致的</li></ul><h3 id="3-5、共享对象"><a href="#3-5、共享对象" class="headerlink" title="3.5、共享对象"></a>3.5、共享对象</h3><ul><li>如果每个线程中ThreadLocal.set()放进去的对象本来就是多线程共享的同一个对象，比如static对象，那么多个线程的ThreadLocal.get()取得的还是这个共享对象本身，还是有并发访问问题。</li></ul><h2 id="4、实际运用场景（Spring）"><a href="#4、实际运用场景（Spring）" class="headerlink" title="4、实际运用场景（Spring）"></a>4、实际运用场景（Spring）</h2><p>DateTimeContextHolder类使用了ThreadLocal</p><p>RequestContextHolder也使用了ThreadLocal</p><p>优先使用框架的支持，而不是自己创造。例如在Spring中，如果可以使用RequestContextHolder，那么就不需要自己维护ThreadLocal，因为自己可能会忘记调用remove()方法等，造成内存泄漏。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>J.U.C</category>
      </categories>
      <tags>
        <tag>多线程与并发</tag>
        <tag>J.U.C</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络之五层模型</title>
    <url>/2020/05/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<!-- build time:Tue Jun 09 2020 08:31:59 GMT+0800 (GMT+08:00) --><h2><a href="#" class="headerlink"></a></h2><p><img src="http://qa824ut89.bkt.clouddn.com/img/20200603155025.png" alt=""></p><p>1、两台计算机需要通信的话，需要解决使用什么信号来传输比特的问题，这就划分了<strong>物理层</strong></p><a id="more"></a><p>2、总线中有5台计算机，A想要发送数据给C，但是C怎么知道是要发送给自己的数据还是不是呢？【如何标识网络中的各个主机(例如Mac)】</p><p>C要如何从一连串的比特流中区分出地址和数据？</p><p>如何解决两台主机发送数据在总线中可能发生碰撞？【如何协调个主机争用总线】</p><p>这就划分出了<strong>数据链路层</strong>。</p><p>3、以上这种总线型网络早已淘汰，通过多个路由器连接而成的网络，如何标识个网络以及网络中的主机呢？【网络和主机共同编址的问题，例如IP地址】</p><p>因为路由器有多个，那么一个主机给另一个主机进行通信时，可能有多条路径，那么如何进行选择呢？【路由器如何转发分组，如何进行路由选择】</p><p>所以划分出了<strong>网络层</strong></p><p>4、假设某台主机运行着多个与网络通信相关的应用进程，某个时刻主机收到了来自服务器的分组，那么这些分组应该交给哪个进程处理呢？【如何解决进程之间基于网络的通信问题】</p><p>如果传输过程中出现错误，如何处理，这也是需要解决的问题。</p><p>所以划分出了<strong>运输层</strong>。</p><p>5、通过应用间的交互来完成特定的网络应用，HTTP，SMTP，FTP协议等，这就划分出了<strong>应用层</strong></p><p>一台电脑向服务器请求的网址后的过程</p><p><img src="http://qa824ut89.bkt.clouddn.com/img/20200603161357.png" alt=""></p><p>1、首先，应用层按照HTTP协议的规定，构建一个HTTP请求报文，交给运输层处理。【HTTP】</p><p>2、运输层给HTTP请求添加一个TCP首部，使之成为TCP报文段，交给网络层处理。该TCP首部的作用主要是为了区分应用进程，以及实现可靠传输。【HTTP TCP】</p><p>3、网络层给TCP报文段添加一个IP首部，使之成为IP数据报，交给数据链路层处理。该首部的作用是让IP数据报可以在互联网上进行传输，也就是被路由器转发。【HTTP TCP IP】</p><p>4、数据链路层给IP数据报添加一个首部和一个尾部，使之成为帧，交给物理层处理。该首部的作用主要是为了让帧能够在一段链路上或一个网络上传输，能够被相应的目的主机接收。尾部的作用是为了让目的主机检查，所接收到的帧是否有误码。【ETH HTTP TCP IP ETH】</p><p>5、物理层将帧看做是比特流，由于网络N1是以太网，物理层还会给该比特流前面添加前导码。其作用是为了让目的主机做好接收帧的准备【比特流00001011001 …..前导码】</p><p>物理层将比特流变换成想要的信号发送到传输媒体，信号通过传输媒体（比如光纤什么的）到达路由器</p><p>1、物理层将信号变换为比特流，去掉前导码后，【比特流010010101】将其交付给数据链路层，时机交付的是帧。【ETH HTTP TCP IP ETH】</p><p>2、数据链路层将帧的首部和尾部去掉后，将其交付给网络层，这实际交付的是IP数据报。【HTTP TCP IP】</p><p>3、网络层解析IP数据报首部，从中提取出目的网络地址，然后查找自身的路由表，确定转发端口。网络层将IP数据报交给数据链路层。【HTTP TCP IP】</p><p>4、数据链路层给IP数据报添加一个首部和一个尾部，使之成为帧，数据链路层将帧交付给物理层。【ETH HTTP TCP IP ETH】</p><p>5、物理层将帧看做是比特流，由于N2是以太网，会给比特流加上前导码。【比特流 前导码】</p><p>物理层将比特流变换成想要的信号发送到传输媒体，信号通过传输媒体（比如光纤什么的）到达WEB服务器。</p><p>1、物理层将信号变换为比特流，去掉前导码后，交给给数据链路层，这时候交付的其实是帧。【ETH HTTP TCP IP ETH】</p><p>2、数据链路层接收到帧后，去掉首部和尾部，将其交付给网络层，这时候交付的其实是IP数据报。【HTTP TCP IP】</p><p>3、网络层去掉IP数据报首部去掉后，交付给运输层，这时候交付的其实是TCP报文段【HTTP TCP】</p><p>4、运输层去掉TCP报文段后，将HTTP请求报文交付给应用层。【HTTP】</p><p>5、应用层对HTTP请求报文进行解析，然后给主机发回HTTP响应报文。</p><h3 id="拓展：当输入URL，敲下回车键后发生了什么？"><a href="#拓展：当输入URL，敲下回车键后发生了什么？" class="headerlink" title="拓展：当输入URL，敲下回车键后发生了什么？"></a>拓展：当输入URL，敲下回车键后发生了什么？</h3><p><img src="https://upload-images.jianshu.io/upload_images/2075673-3afda32a13a68c6b.png" alt=""></p><h4 id="1-DNS域名解析"><a href="#1-DNS域名解析" class="headerlink" title="1. DNS域名解析"></a>1. DNS域名解析</h4><ul><li>在浏览器DNS缓存中搜索</li><li>在操作系统DNS缓存中搜索</li><li>读取系统hosts文件，查找其中是否有对应的ip</li><li>向本地配置的首选DNS服务器发起域名解析请求</li></ul><h4 id="2-建立TCP连接"><a href="#2-建立TCP连接" class="headerlink" title="2. 建立TCP连接"></a>2. 建立TCP连接</h4><p>为了准确地传输数据，TCP协议采用了三次握手策略。发送端首先发送一个带SYN（synchronize）标志的数据包给接收方，接收方收到后，回传一个带有SYN/ACK(acknowledegment)标志的数据包以示传达确认信息。最后发送方再回传一个带ACK标志的数据包，代表握手结束。在这过程中若出现问题中断，TCP会再次发送相同的数据包。<br>TCP是一个端到端的可靠的面向连接的协议，所以HTTP基于传输层TCP协议不用担心数据的传输的各种问题。</p><hr><h3 id="TCP建立连接为什么需要三次握手、四次挥手"><a href="#TCP建立连接为什么需要三次握手、四次挥手" class="headerlink" title="TCP建立连接为什么需要三次握手、四次挥手"></a>TCP建立连接为什么需要三次握手、四次挥手</h3><p>Q：<strong>为什么是三次握手而不是两次握手或四次握手或更多呢？</strong><br>A：<strong>三次握手更为稳妥</strong>。</p><blockquote><p>“长江长江，我是黄河，听到请回答。”<br>“黄河黄河，我是长江，我听到了你，请回答。”<br>“长江长江，我是黄河，我听到了你，现在请你收报。”</p></blockquote><p>建立TCP连接时会发生:三次握手(three-way handshake)</p><p>firefox &gt; nginx [SYN] 在么</p><p>nginx &gt; firefox [SYN, ACK] 在</p><p>firefox &gt; nginx [ACK] 知道了</p><p><img src="http://pics.oncevan.cn/img/20200603185329.png" alt=""></p><p>第一次：C发送一个请求连接的位码SYN和一个随机产生的序列号给Seq，然后S收到了这些数据。</p><p>​ 第二次:S收到了这个请求连接的位码，啊呀，有人向我发出请求了么，那我要不要接受他的请求，得实现确认一下，于是，发送了一个确认码 ACN（seq+1），和SYN，Seq给C，然后C收到了，这个是第二次连接。</p><p>​ 第三次：C收到了确认的码和之前发送的SYN一比较，偶哟，对上了么，于是他又发送了一个ACN（SEQ+1）给S，S收到以后就确定建立连接，至此，TCP连接建立完成。</p><p>​ 简单就是：请求，确认，连接。</p><p>关闭TCP连接时会发生:四次挥手(four-way handshake)</p><p>firefox &gt; nginx [FIN] 我要关闭连接了</p><p>nginx &gt; firefox [ACK] 知道了,等我发完包先</p><p>nginx &gt; firefox [FIN] 我也关闭连接了</p><p>fi refox &gt; nginx [ACK] 好的,知道了</p><p>几个报文的标识的解释:</p><p>SYN: synchronization(同步)</p><p>ACK: acknowledgement(确认:告知已收到)</p><p>FIN: finish(结束)</p><hr><h3 id="HTTP与HTTPS"><a href="#HTTP与HTTPS" class="headerlink" title="HTTP与HTTPS"></a>HTTP与HTTPS</h3><p>HTTP报文是包裹在TCP报文中发送的，服务器端收到TCP报文时会解包提取出HTTP报文。但是这个过程中存在一定的风险，HTTP报文是明文，如果中间被截取的话会存在一些信息泄露的风险。那么在进入TCP报文之前对HTTP做一次加密就可以解决这个问题了。HTTPS协议的本质就是HTTP + SSL(or TLS)。在HTTP报文进入TCP报文之前，先使用SSL对HTTP报文进行加密。从网络的层级结构看它位于HTTP协议与TCP协议之间。</p><p><img src="https://segmentfault.com/img/bVp65j/view" alt=""></p><h4 id="HTTPS过程"><a href="#HTTPS过程" class="headerlink" title="HTTPS过程"></a>HTTPS过程</h4><p>HTTPS在传输数据之前需要客户端与服务器进行一个握手(TLS/SSL握手)，在握手过程中将确立双方加密传输数据的密码信息。TLS/SSL使用了非对称加密，对称加密以及hash等。具体过程请参考经典的阮一峰先生的博客<a href="http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html" target="_blank" rel="noopener">TLS/SSL握手过程</a>。<br>HTTPS相比于HTTP，虽然提供了安全保证，但是势必会带来一些时间上的损耗，如握手和加密等过程，是否使用HTTPS需要根据具体情况在安全和性能方面做出权衡。</p><h3 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h3><p>其实这部分又可以称为前端工程师眼中的HTTP，它主要发生在客户端。发送HTTP请求的过程就是构建HTTP请求报文并通过TCP协议中发送到服务器指定端口(HTTP协议80/8080, HTTPS协议443)。HTTP请求报文是由三部分组成: <strong>请求行</strong>, <strong>请求报头</strong>和<strong>请求正文</strong>。</p><hr><h3 id="URL与URI"><a href="#URL与URI" class="headerlink" title="URL与URI"></a>URL与URI</h3><p>URI = Universal Resource Identifier 统一资源标志符，用来标识抽象或物理资源的一个紧凑字符串。<br>URL = Universal Resource Locator 统一资源定位符，一种定位资源的主要访问机制的字符串，一个标准的URL必须包括：protocol、host、port、path、parameter、anchor。</p><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>锁</title>
    <url>/2020/04/28/%E9%94%81/</url>
    <content><![CDATA[<!-- build time:Tue Jun 09 2020 08:31:59 GMT+0800 (GMT+08:00) --><h2 id="1、Lock接口"><a href="#1、Lock接口" class="headerlink" title="1、Lock接口"></a>1、Lock接口</h2><h3 id="1-1、Lock简介、地位、作用"><a href="#1-1、Lock简介、地位、作用" class="headerlink" title="1.1、Lock简介、地位、作用"></a>1.1、Lock简介、地位、作用</h3><ul><li>锁是一种工具，用于控制对共享资源的访问</li><li><code>Lock</code>和<code>synchronized</code>，这两个是最常见的锁，它们都可以达到线程安全的目的，但是在使用和功能上又有较大的不同</li><li><code>Lock</code>并不是用来替代<code>synchronized</code>的，而是当使用<code>synchronized</code>不合适或不足以满足要求的时候，来提供高级功能的。</li><li><code>Lock</code>接口最常见的实现类是<code>ReentrantLock</code></li><li>通常情况下，<code>Lock</code>只允许一个线程来访问这个共享资源。不过有的时候，一些特殊的实现也允许并发访问，比如<code>ReadWriteLock</code>里面的<code>ReadLock</code>。</li></ul><a id="more"></a><h4 id="1-2、为什么synchronized不够用？（为什么需要Lock？）"><a href="#1-2、为什么synchronized不够用？（为什么需要Lock？）" class="headerlink" title="1.2、为什么synchronized不够用？（为什么需要Lock？）"></a>1.2、为什么synchronized不够用？（为什么需要Lock？）</h4><p>1、<strong>效率低</strong>：锁的释放情况少，试图获得锁时不能设定超时、不 能中断一个正在试图获得锁的线程</p><p>2、<strong>不够灵活（读写锁更灵活）</strong>：加锁和释放的时机单一，每个锁仅有单一的条件（某个对象），可能时不够的</p><p>3、无法知道<strong>是否成功获取到锁</strong></p><h4 id="1-3、Lock方法"><a href="#1-3、Lock方法" class="headerlink" title="1.3、Lock方法"></a>1.3、Lock方法</h4><ul><li><code>Lock（）</code>就是最普通的获取锁。如果锁已被其他线程获取，则进行等待</li><li><code>Lock</code>不会像<code>synchronized</code>一样在<strong>异常的时候自动释放锁</strong>，因此最佳实践是，<strong>在finally中释放锁</strong>，以保证发生异常时锁一定被释放</li><li><code>Lock</code>()方法不能被中断，这会带来很大的隐患：一旦陷入死锁，<code>Lock</code>()就会陷入永远等待</li></ul><h4 id="tryLock-、tryLock-long-time-TimeUnit-unit-、lockInterruptibly"><a href="#tryLock-、tryLock-long-time-TimeUnit-unit-、lockInterruptibly" class="headerlink" title="tryLock()、tryLock(long time,TimeUnit unit)、lockInterruptibly()"></a>tryLock()、tryLock(long time,TimeUnit unit)、lockInterruptibly()</h4><ul><li><code>tryLock()</code>用来尝试获取锁，如果当前锁没有被其他线程占用，则获取成功返回true，否则返回false代表获取锁失败。相比于<code>Lock</code>，这样的方法显然功能更强大了，我们可以根据是否能获取到锁来决定后续程序的行为。该方法会立即返回，即便在拿不到锁时也不会一直等着。</li><li><code>tryLock(long time,TimeUnit unit)</code>：超时就放弃</li><li><code>lockInterruptibly():</code>相当于tryLock(long time,TimeUnit unit)把超时时间设置为无限。在等待锁的过程中，线程可以被中断</li></ul><h4 id="1-4、Lock的可见性保证"><a href="#1-4、Lock的可见性保证" class="headerlink" title="1.4、Lock的可见性保证"></a>1.4、Lock的可见性保证</h4><p><img src="http://pics.oncevan.cn/img/1585827815437.png" alt=""></p><h3 id="拓展：happens-before"><a href="#拓展：happens-before" class="headerlink" title="拓展：happens-before"></a>拓展：happens-before</h3><p><strong>它真正的意思是前面的操作对后续的操作都是可见的</strong>，比如 A happen before B 的意思并不是说 A 操作发生在 B 操作之前，而是说 A 操作对于 B 操作一定是可见的。</p><p><img src="https://img2018.cnblogs.com/blog/1621069/201909/1621069-20190908153101303-1789310261.png" alt=""></p><h2 id="2、锁的分类"><a href="#2、锁的分类" class="headerlink" title="2、锁的分类"></a>2、锁的分类</h2><p><img src="http://pics.oncevan.cn/img/1585827954346.png" alt=""></p><h3 id="2-1、乐观锁和悲观锁"><a href="#2-1、乐观锁和悲观锁" class="headerlink" title="2.1、乐观锁和悲观锁"></a>2.1、乐观锁和悲观锁</h3><p><strong>悲观锁</strong>：悲观锁又称<strong>互斥同步锁</strong>，悲观锁为了确保结果的正确性，会每次获取并修改数据时，把数据锁住，让其他线程无法访问数据，这样就可以确保数据内容万无一失。比如<code>synchronized</code>和<code>Lock</code>接口。改进的<code>synchronized</code>前面会有乐观的一部分！</p><p><strong>乐观锁</strong>：乐观锁又称<strong>非互斥同步锁</strong>，乐观锁在操作同步资源的时候不会锁住被操作的对象，在更新的时候，去对比在我修改的期间数据有没有被其他人改变过，如果没有被改变过，就说明真的是只有自己在操作，那就正常去修改数据，如果数据和一开始拿到的不一样了，说明其他线程在这段时间内改过数据，那就不能继续刚才的更新数据过程了，我会选择放弃、报错、重试等策略。乐观锁的实现一般都 是利用<code>CAS算法</code>来实现的。<strong>乐观锁的典型例子就是原子类、并发容器等</strong>。</p><p>悲观锁的劣势</p><ul><li>阻塞和唤醒带来的性能劣势</li><li>永久阻塞：如果持有锁的线程被永久阻塞，比如遇到无限循环、死锁等活跃性问题，那么等待该线程释放锁的那几个悲催的线程将永远得不到执行</li><li>优先级反转：假如给线程设置了优先级，一旦优先级低的线程拿到同步资源后不运行或运行很慢，那么即便其他线程优先级很高也是不能执行的，这就是优先级反转</li></ul><h4 id="开销对比"><a href="#开销对比" class="headerlink" title="开销对比"></a>开销对比</h4><ul><li>悲观锁的原始开销要高于乐观锁，但是特点是一劳永逸，临界区持锁时间就算越来越长，也不会对互斥锁的开销造成影响</li><li>相反，虽然乐观锁一开始的开销比悲观锁小，但是如果自旋时间很长或者不停重试，那么消耗的资源也会越来越多</li></ul><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>悲观锁：适合并发写入多的情况，适用于临界区持锁时间比较长的情况，悲观锁可以避免大量的无用自旋的消耗，典型情况：<ul><li>临界区有<strong>IO操作</strong></li><li>临界区<strong>代码复杂</strong>或者循环量大</li><li>临界区<strong>竞争非常激烈</strong></li></ul></li><li>乐观锁：适合并发写入少，大部分是读取的场景，不加锁的能让读取性能大幅提高</li></ul><h3 id="2-2、可重入锁和非可重入锁"><a href="#2-2、可重入锁和非可重入锁" class="headerlink" title="2.2、可重入锁和非可重入锁"></a>2.2、可重入锁和非可重入锁</h3><p><code>可重入锁ReentrantLock</code>：已获取锁后，再次获取该锁无需释放第一次获得的锁，这就是可重入锁 。（避免死锁，提升封装性）</p><p><code>不可重入</code>：已获取锁后，想要获得同一把锁必须先释放该锁，这就是非可重入锁</p><p><img src="http://pics.oncevan.cn/img/1586052986905.png" alt=""></p><h3 id="2-3、公平锁与非公平锁"><a href="#2-3、公平锁与非公平锁" class="headerlink" title="2.3、公平锁与非公平锁"></a>2.3、公平锁与非公平锁</h3><p><code>公平</code>指的是按照线程请求的顺序来分配锁；<code>非公平</code>指的是不完全按照请求的顺序，在一定情况下可以插队。</p><p>注意：非公平也同样不提倡“插队”行为，这里的非公平指的是在<strong>“合适的时机”</strong>插队，而不是盲目插队。<strong>可以避免线程唤醒带来的空档期，提高效率</strong>（下一个线程由挂起到运行）</p><p>举例：在线程1至此那个unlock释放锁之后，由于此时等待队列【线程2 线程3 线程4】线程2等待时间最久，所以线程2先得到执行，如果这个时候线程5恰好去执行lock()，由于<code>ReentrantLock</code>发现此时并没有线程持有Lock这把锁（线程2还没有来得及获取到，需要时间），线程5可以插队，直接拿到这把锁，这就是<code>ReentrantLock</code>默认的公平策略，也就是不公平。</p><p><code>ReentrantLock</code>默认是非公平锁，但是可以在参数填写true设置成公平锁</p><p><img src="http://pics.oncevan.cn/img/1586055172117.png" alt=""></p><p><img src="http://pics.oncevan.cn/img/1586055192675.png" alt=""></p><h3 id="2-4、共享锁和排他锁"><a href="#2-4、共享锁和排他锁" class="headerlink" title="2.4、共享锁和排他锁"></a>2.4、共享锁和排他锁</h3><p>排他锁：又称独占锁、独享锁，如syncronized</p><p>共享锁：又称读锁，获得共享锁之后，可以查看但无法修改和删除数据，其他线程此时也可以获取到共享锁，也可以查看但<strong>无法修改和删除数据</strong></p><p>共享锁和排他锁的典型是读写锁<code>ReentrantReadWriteLock</code>，其中<strong>读锁是共享锁</strong>，<strong>写锁是独享锁</strong></p><h4 id="读写锁的作用"><a href="#读写锁的作用" class="headerlink" title="读写锁的作用"></a>读写锁的作用</h4><ul><li>在没有读写锁之前，我们假设使用<code>ReentrantLock</code>，那么虽然我们保证了线程安全，但也浪费了一定的资源：多个读操作同时进行，并没有线程安全问题</li><li>在读的地方使用读锁，在写的地方使用写锁，灵活控制，如果没有写锁的情况下，读是无阻塞的，提高了程序执行效率</li></ul><h4 id="读写锁的规则"><a href="#读写锁的规则" class="headerlink" title="读写锁的规则"></a>读写锁的规则</h4><ul><li>多个线程只申请读锁，都可以申请得到</li><li>如果有一个线程已经占用了读锁，则此时其他线程如果要申请写锁，则申请写锁的线程会一直等待释放读锁</li><li>如果有一个线程已经占用了写锁，则此时其他线程如果申请写锁或读锁，则申请得线程会一直等待释放写锁</li><li>一句话总结：要么是一个或多个线程同时有读锁，要么是一个线程又写锁，但是两者不会同时出现（<strong>要么多读，要么一写</strong>）</li></ul><h4 id="读锁插队策略"><a href="#读锁插队策略" class="headerlink" title="读锁插队策略"></a>读锁插队策略</h4><p>情景：假设线程2和线程4正在同时读取，线程3想要写入，拿不到锁，于是进入等待队列，线程5不在队列里，现在过来想要读取</p><p>此时有两种策略：</p><ul><li>策略1：获得读锁，和线程2和线程4同时读取<ul><li>读可以插队，效率高</li><li>但是容易造成饥饿，假如线程5-1000都想要读，线程3就一直不能执行，造成饥饿</li></ul></li><li>策略2：把线程5加入等待队列就可以<strong>避免饥饿</strong>【ReentrantReadWriteLock的实现选择了策略2】</li></ul><p>非公平的情况，写锁可以随时插队；读锁只有在等待队列的头结点是读锁的情况下，这个时候进来的读取线程才可以插队，其他情况下都是不能插队的。</p><p>公平的情况，不允许插队，完全按照等待队列中的顺序来执行</p><h4 id="锁的升降级"><a href="#锁的升降级" class="headerlink" title="锁的升降级"></a>锁的升降级</h4><p><strong>为什么需要升降级</strong></p><ul><li>因为如果一个写入线程后面只有读操作，但是它如果一直占用写锁就会降低效率，如果这个时候把它降级为读锁，那么其他读取线程可以同时使用读锁，这样就提高了效率</li></ul><blockquote><p><strong>写锁支持降级为读锁，读锁不支持升级为写锁</strong></p></blockquote><p><strong>为什么不支持锁的升级</strong></p><p>因为有可能会造成<code>死锁</code>，假如有多个线程同时在使用读锁，这个时候如果有个读锁升级为写锁，读锁和写锁不能同时存在，又或者这个时候多个读取线程都想升级写锁，那么就会很容易造成死锁。</p><p><strong>适用场景</strong></p><p>相比于<code>ReentrantLock</code>适用于一般场合，<code>ReentrantReadWriteLock</code>适用于读多写少的情况，合理使用可以进一步提高并发效率</p><h3 id="2-5、自旋锁和阻塞锁"><a href="#2-5、自旋锁和阻塞锁" class="headerlink" title="2.5、自旋锁和阻塞锁"></a>2.5、自旋锁和阻塞锁</h3><p>阻塞或唤醒一个java线程需要操作系统切换CPU状态来完成，这种状态转换需要耗费处理器时间。</p><p>如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长。在许多场景中，同步资源的锁定时间很短，为了这一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失。</p><p>如果物理机器有多个处理器，能够让两个或两个以上的线程同时并行执行，我们就可以让后面那个请求锁的线程不放弃CPU的执行时间，看看持有锁的线程是否很快就会释放锁</p><p><strong>自旋锁：</strong>而为了让当前线程“稍等一下”，我们需要让当前线程进行自旋，如果自旋完成后前面锁定同步资源的线程已经释放了锁，那么当前线程就可以不必阻塞而是直接获取同步资源，从而避免切换线程的开销</p><p><strong>阻塞锁：</strong>和自旋锁相反，阻塞锁如果遇到没拿到锁的情况，会直接把线程阻塞，直到被唤醒</p><h4 id="自旋锁的缺点"><a href="#自旋锁的缺点" class="headerlink" title="自旋锁的缺点"></a>自旋锁的缺点</h4><ul><li>如果锁被占用的时间很长，那么自旋的线程只会浪费处理器资源</li><li>在自旋的过程中，一直消耗着CPU，所以虽然自旋锁的起始开销低于悲观锁，但是随着自旋时间的增长，开销也是线性增长的</li></ul><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><ul><li>自旋锁一般用于多核的服务器，在并发度不是特别高的情况下，比阻塞锁的效率高</li><li>另外，自旋锁适用于临界区比较短小的情况，否则如果把临界区很大（线程一旦拿到锁，很久以后才会释放），那也是不合适的</li></ul><h3 id="2-6、可中断锁"><a href="#2-6、可中断锁" class="headerlink" title="2.6、可中断锁"></a>2.6、可中断锁</h3><p>在Java中，<code>synchronized</code>就不是可中断锁，而<code>Lock</code>是可中断锁，因为tryLock()和lockInterruptibly都能响应中断</p><p>如果某一线程A正在执行锁中的代码，另一线程B正在等待获取该锁，可能由于等待时间过长，线程B不想等待了，想先处理其他事情，我们可以中断它，这种就是可中断锁。</p><h2 id="3、Java虚拟机对锁的优化"><a href="#3、Java虚拟机对锁的优化" class="headerlink" title="3、Java虚拟机对锁的优化"></a>3、Java虚拟机对锁的优化</h2><p><strong>自旋锁和自适应</strong>：在自旋一定次数后可能就会把自旋锁转为阻塞锁，可能这次自旋一百次后成功获取到同步资源，下次就不再自旋了等等</p><p><strong>锁消除</strong>：可能有些情况下不必要加锁，那么JVM可能就自动帮我们消除了锁</p><p><strong>锁粗化</strong>：有可能多次多同一个对象进行加锁解锁，可能就只用一个加锁解锁就可以了，JVM就会进行锁粗化优化。</p><h4 id="我们在写代码时如何优化锁和提高并发性能"><a href="#我们在写代码时如何优化锁和提高并发性能" class="headerlink" title="我们在写代码时如何优化锁和提高并发性能"></a>我们在写代码时如何优化锁和提高并发性能</h4><ol><li>缩小同步代码块</li><li>尽量不要锁住方法</li><li>减少请求锁的次数</li><li>避免人为制造“热点”</li><li>锁中尽量不要再包含锁</li><li>选择合适的锁类型或合适的工具类</li></ol><!-- rebuild by neat -->]]></content>
      <categories>
        <category>J.U.C</category>
      </categories>
      <tags>
        <tag>J.U.C</tag>
        <tag>锁</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis一级缓存</title>
    <url>/2020/05/23/MyBatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<!-- build time:Tue Jun 09 2020 08:31:59 GMT+0800 (GMT+08:00) --><h2 id="0-写在前面"><a href="#0-写在前面" class="headerlink" title="0 写在前面"></a>0 写在前面</h2><p><strong>MyBatis</strong>是一个简单，小巧但功能非常强大的ORM开源框架，它的功能强大也体现在它的缓存机制上。<strong>MyBatis</strong>提供了一级缓存、二级缓存 这两个缓存机制，能够很好地处理和维护缓存，以提高系统的性能。本文的目的则是向读者详细介绍<strong>MyBatis</strong>的一级缓存，深入源码，解析<strong>MyBatis</strong>一级缓存的实现原理，并且针对一级缓存的特点提出了在实际使用过程中应该注意的事项。</p><p>本文主要讨论5个问题：<br>1、什么是一级缓存？为什么使用一级缓存？</p><p>2、<strong>MyBatis</strong>的一级缓存是怎样组织的？（即<code>SqlSession</code>对象中的缓存是怎样组织的？）</p><p>3、一级缓存的生命周期有多长？</p><p>4、Cache接口的设计以及CacheKey的定义</p><p>5、一级缓存的性能分析以及应该注意的事项</p><a id="more"></a><h2 id="1-什么是一级缓存？-为什么使用一级缓存？"><a href="#1-什么是一级缓存？-为什么使用一级缓存？" class="headerlink" title="1 什么是一级缓存？ 为什么使用一级缓存？"></a>1 什么是一级缓存？ 为什么使用一级缓存？</h2><blockquote><p>对于会话（Session）级别的数据缓存，我们称之为一级数据缓存，简称一级缓存。</p></blockquote><p>每当我们使用<strong>MyBatis</strong>开启一次和数据库的会话，<strong>MyBatis</strong>会创建出一个<code>SqlSession</code>对象表示一次数据库会话。</p><p>在对数据库的一次会话中，我们有可能会反复地执行完全相同的查询语句，如果不采取一些措施的话，每一次查询都会查询一次数据库,而我们在极短的时间内做了完全相同的查询，那么它们的结果极有可能完全相同，由于查询一次数据库的代价很大，这有可能造成很大的资源浪费。</p><p>为了解决这一问题，减少资源的浪费，<strong>MyBatis</strong>会在表示会话的<code>SqlSession</code>对象中建立一个简单的缓存，将每次查询到的结果结果缓存起来，当下次查询的时候，如果判断先前有个完全一样的查询，会直接从缓存中直接将结果取出，返回给用户，不需要再进行一次数据库查询了。</p><p>如下图所示，<strong>MyBatis</strong>会在一次会话的表示—-一个<code>SqlSession</code>对象中创建一个本地缓存(<strong>local cache</strong>)，对于每一次查询，都会尝试根据查询的条件去本地缓存中查找是否在缓存中，如果在缓存中，就直接从缓存中取出，然后返回给用户；否则，从数据库读取数据，将查询结果存入缓存并返回给用户。</p><p><img src="https://img-blog.csdn.net/20141121213425390" alt=""></p><h2 id="2-MyBatis中的一级缓存是怎样组织的？（即SqlSession中的缓存是怎样组织的？）"><a href="#2-MyBatis中的一级缓存是怎样组织的？（即SqlSession中的缓存是怎样组织的？）" class="headerlink" title="2 MyBatis中的一级缓存是怎样组织的？（即SqlSession中的缓存是怎样组织的？）"></a>2 <strong>MyBatis</strong>中的一级缓存是怎样组织的？（即SqlSession中的缓存是怎样组织的？）</h2><p>由于<strong>MyBatis</strong>使用<code>SqlSession</code>对象表示一次数据库的会话，那么，对于会话级别的一级缓存也应该是在<code>SqlSession</code>中控制的。</p><p>实际上, <strong>MyBatis</strong>只是一个<strong>MyBatis</strong>对外的接口，<code>SqlSession</code>将它的工作交给了<code>Executor</code>执行器这个角色来完成，负责完成对数据库的各种操作。当创建了一个<code>SqlSession</code>对象时，<strong>MyBatis</strong>会为这个<code>SqlSession</code>对象创建一个新的<code>Executor</code>执行器，而缓存信息就被维护在这个<code>Executor</code>执行器中，<strong>MyBatis</strong>将缓存和对缓存相关的操作封装成了<code>Cache</code>接口中。<code>SqlSession</code>、<code>Executor</code>、<code>Cache</code>之间的关系如下列类图所示：</p><p><img src="https://img-blog.csdn.net/20141120100824184" alt=""></p><p>如上述的类图所示，<code>Executor</code>接口的实现类<code>BaseExecutor</code>中拥有一个<code>Cache</code>接口的实现类<code>key</code>，则对于<code>BaseExecutor</code>对象而言，它将使用<code>key</code>对象维护缓存。</p><p>综上，<code>SqlSession</code>对象、<code>Executor</code>对象、<code>Cache</code>对象之间的关系如下图所示：</p><p><img src="https://img-blog.csdn.net/20141119164906640" alt=""></p><p>由于<strong>Session</strong>级别的一级缓存实际上就是使用<code>key</code>维护的，那么<code>key</code>是怎样实现的呢？</p><figure class="highlight plain"><figcaption><span>来实现的，没有其他的任何限制。如下是```key```的实现代码：</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">package org.apache.ibatis.cache.impl;</span><br><span class="line"> </span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.concurrent.locks.ReadWriteLock;</span><br><span class="line"> </span><br><span class="line">import org.apache.ibatis.cache.Cache;</span><br><span class="line">import org.apache.ibatis.cache.CacheException;</span><br><span class="line"> </span><br><span class="line">&#x2F;**</span><br><span class="line"> * 使用简单的HashMap来维护缓存</span><br><span class="line"> * @author Clinton Begin</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class &#96;&#96;key&#96;&#96; implements Cache &#123;</span><br><span class="line"> </span><br><span class="line">  private String id;</span><br><span class="line"> </span><br><span class="line">  private Map&lt;Object, Object&gt; cache &#x3D; new HashMap&lt;Object, Object&gt;();</span><br><span class="line"> </span><br><span class="line">  public &#96;&#96;key&#96;&#96;(String id) &#123;</span><br><span class="line">    this.id &#x3D; id;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  public String getId() &#123;</span><br><span class="line">    return id;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  public int getSize() &#123;</span><br><span class="line">    return cache.size();</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  public void putObject(Object key, Object value) &#123;</span><br><span class="line">    cache.put(key, value);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  public Object getObject(Object key) &#123;</span><br><span class="line">    return cache.get(key);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  public Object removeObject(Object key) &#123;</span><br><span class="line">    return cache.remove(key);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  public void clear() &#123;</span><br><span class="line">    cache.clear();</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  public ReadWriteLock getReadWriteLock() &#123;</span><br><span class="line">    return null;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  public boolean equals(Object o) &#123;</span><br><span class="line">    if (getId() &#x3D;&#x3D; null) throw new CacheException(&quot;Cache instances require an ID.&quot;);</span><br><span class="line">    if (this &#x3D;&#x3D; o) return true;</span><br><span class="line">    if (!(o instanceof Cache)) return false;</span><br><span class="line"> </span><br><span class="line">    Cache otherCache &#x3D; (Cache) o;</span><br><span class="line">    return getId().equals(otherCache.getId());</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  public int hashCode() &#123;</span><br><span class="line">    if (getId() &#x3D;&#x3D; null) throw new CacheException(&quot;Cache instances require an ID.&quot;);</span><br><span class="line">    return getId().hashCode();</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-一级缓存的生命周期有多长？"><a href="#3-一级缓存的生命周期有多长？" class="headerlink" title="3 一级缓存的生命周期有多长？"></a>3 一级缓存的生命周期有多长？</h2><ul><li><p><strong>MyBatis</strong>在开启一个数据库会话时，会 创建一个新的<code>SqlSession</code>对象，<code>SqlSession</code>对象中会有一个新的<code>Executor</code>对象，<code>Executor</code>对象中持有一个新的<code>key</code>对象；当会话结束时，<code>SqlSession</code>对象及其内部的<code>Executor</code>对象还有<code>key</code>对象也一并释放掉。</p></li><li><p>如果<code>SqlSession</code>调用了<strong>close()</strong>方法，会释放掉一级缓存<code>key</code>对象，一级缓存将不可用；</p></li><li><p>如果<code>SqlSession</code>调用了<strong>clearCache()</strong>，会清空<code>key</code>对象中的数据，但是该对象仍可使用；</p></li><li><p><code>SqlSession</code>中执行了任何一个<strong>update</strong>操作(<strong>update()、delete()、insert())</strong> ，都会清空<code>key</code>对象的数据，但是该对象可以继续使用；</p></li></ul><h2 id="4-SqlSession-一级缓存的工作流程"><a href="#4-SqlSession-一级缓存的工作流程" class="headerlink" title="4  SqlSession 一级缓存的工作流程"></a>4 SqlSession 一级缓存的工作流程</h2><ol><li><p>对于某个查询，根据<code>statementId,params,rowBounds</code>来构建一个<code>key</code>值，根据这个<code>key</code>值去缓存<code>Cache</code>中取出对应的<code>key</code>值存储的缓存结果；</p></li><li><p>判断从<code>Cache</code>中根据特定的<code>key</code>值取的数据数据是否为空，即是否命中；</p></li><li><p>如果命中，则直接将缓存结果返回；</p></li><li><p>如果没命中：</p><p>4.1 去数据库中查询数据，得到查询结果；</p><p>4.2 将<code>key</code>和查询到的结果分别作为<code>key</code>,<code>value</code>对存储到<code>Cache</code>中；</p><p>4.3. 将查询结果返回；</p></li><li><p>结束。</p></li></ol><p><img src="https://img-blog.csdn.net/20141120133247125" alt=""></p><h2 id="5-Cache接口的设计以及CacheKey的定义（非常重要）"><a href="#5-Cache接口的设计以及CacheKey的定义（非常重要）" class="headerlink" title="5 Cache接口的设计以及CacheKey的定义（非常重要）"></a>5 Cache接口的设计以及CacheKey的定义（非常重要）</h2><p>如下图所示，<strong>MyBatis</strong>定义了一个org.apache.ibatis.cache.Cache接口作为其<code>Cache</code>提供者的SPI(Service Provider Interface) ，所有的<strong>MyBatis</strong>内部的Cache缓存，都应该实现这一接口。<strong>MyBatis</strong>定义了一个<code>key</code>实现类实现了<code>Cache</code>接口，实际上，在<code>SqlSession</code>对象里的<code>Executor</code> 对象内维护的<code>Cache</code>类型实例对象，就是<code>key</code>子类创建的。</p><p>（<strong>MyBatis</strong>内部还有很多<code>Cache</code>接口的实现，一级缓存只会涉及到这一个<code>key</code>子类，<strong><code>Cache</code></strong>的其他实现将会放到二级缓存中介绍）。</p><p><img src="https://img-blog.csdn.net/20141120134402285" alt=""></p><p>我们知道，<code>Cache</code>最核心的实现其实就是一个<strong>Map</strong>，将本次查询使用的特征值作为<code>key</code>，将查询结果作为<code>value</code>存储到<strong>Map</strong>中。</p><p>现在最核心的问题出现了：<strong>怎样来确定一次查询的特征值</strong>？</p><p>换句话说就是：<strong>怎样判断某两次查询是完全相同的查询？</strong></p><p>也可以这样说：<strong>如何确定Cache中的key值？</strong></p><p><strong>MyBatis</strong>认为，对于两次查询，如果以下条件都完全一样，那么就认为它们是完全相同的两次查询：</p><blockquote><ol><li>传入的 <code>statementId</code></li><li>查询时要求的结果集中的结果范围 （结果的范围通过<code>rowBounds.offset</code>和<code>rowBounds.limit</code>表示）；</li><li>这次查询所产生的最终要传递给<code>JDBC java.sql.Preparedstatement</code>的Sql语句字符串（<code>boundSql.getSql()</code> ）</li><li>传递给<code>java.sql.Statement</code>要设置的参数值</li></ol></blockquote><p>现在分别解释上述四个条件：</p><ol><li><p>传入的<code>statementId</code>，对于<strong>MyBatis</strong>而言，你要使用它，必须需要一个<code>statementId</code>，它代表着你将执行什么样的Sql；</p></li><li><p><strong>MyBatis</strong>自身提供的分页功能是通过<code>RowBounds</code>来实现的，它通过rowBounds.offset和rowBounds.limit来过滤查询出来的结果集，这种分页功能是基于查询结果的再过滤，而不是进行数据库的物理分页；</p><p>由于<strong>MyBatis</strong>底层还是依赖于JDBC实现的，那么，对于两次完全一模一样的查询，<strong>MyBatis</strong>要保证对于底层JDBC而言，也是完全一致的查询才行。而对于JDBC而言，两次查询，只要传入给JDBC的SQL语句完全一致，传入的参数也完全一致，就认为是两次查询是完全一致的。</p><p>上述的第3个条件正是要求保证传递给JDBC的SQL语句完全一致；第4条则是保证传递给JDBC的参数也完全一致；</p><p>3、4讲的有可能比较含糊，举一个例子：</p></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByCritiera"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.Map"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">      select employee_id,first_name,last_name,email,salary</span><br><span class="line">      from louis.employees</span><br><span class="line">      where  employee_id = #&#123;employeeId&#125;</span><br><span class="line">      and first_name= #&#123;firstName&#125;</span><br><span class="line">      and last_name = #&#123;lastName&#125;</span><br><span class="line">      and email = #&#123;email&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果使用上述的”selectByCritiera”进行查询，那么，<strong>MyBatis</strong>会将上述的SQL中的#{} 都替换成 ? 如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> employee_id,first_name,last_name,email,salary</span><br><span class="line">      <span class="keyword">from</span> louis.employees</span><br><span class="line">      <span class="keyword">where</span>  employee_id = ?</span><br><span class="line">      <span class="keyword">and</span> first_name= ?</span><br><span class="line">      <span class="keyword">and</span> last_name = ?</span><br><span class="line">      <span class="keyword">and</span> email = ?</span><br></pre></td></tr></table></figure><p><strong>MyBatis</strong>最终会使用上述的SQL字符串创建JDBC的java.sql.PreparedStatement对象，对于这个PreparedStatement对象，还需要对它设置参数，调用setXXX()来完成设值，第4条的条件，就是要求对设置JDBC的PreparedStatement的参数值也要完全一致。<br>即3、4两条<strong>MyBatis</strong>最本质的要求就是：</p><blockquote><p><code>调用JDBC的时候，传入的SQL语句要完全相同，传递给JDBC的参数值也要完全相同。</code></p></blockquote><p>​</p><p>综上所述,CacheKey由以下条件决定：</p><blockquote><p><code>statementId + rowBounds + 传递给JDBC的SQL + 传递给JDBC的参数值</code></p></blockquote><h3 id="CacheKey的创建"><a href="#CacheKey的创建" class="headerlink" title="CacheKey的创建"></a>CacheKey的创建</h3><p>对于每次的查询请求，<code>Executor</code>都会根据传递的参数信息以及动态生成的SQL语句，将上面的条件根据一定的计算规则，创建一个对应的CacheKey对象。</p><p>我们知道创建<code>CacheKey</code>的目的，就两个：</p><ol><li><p>根据CacheKey作为key,去Cache缓存中查找缓存结果；</p></li><li><p><strong>如果查找缓存命中失败，则通过此CacheKey作为key，将从数据库查询到的结果作为value，组成key,value对存储到Cache缓存中。</strong></p></li></ol><p>CacheKey的构建被放置到了Executor接口的实现类BaseExecutor中，定义如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所属类:  org.apache.ibatis.executor.BaseExecutor</span></span><br><span class="line"><span class="comment"> * 功能   :   根据传入信息构建CacheKey</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CacheKey <span class="title">createCacheKey</span><span class="params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (closed) <span class="keyword">throw</span> <span class="keyword">new</span> ExecutorException(<span class="string">"Executor was closed."</span>);</span><br><span class="line">  CacheKey cacheKey = <span class="keyword">new</span> CacheKey();</span><br><span class="line">  <span class="comment">//1.statementId</span></span><br><span class="line">  cacheKey.update(ms.getId());</span><br><span class="line">  <span class="comment">//2. rowBounds.offset</span></span><br><span class="line">  cacheKey.update(rowBounds.getOffset());</span><br><span class="line">  <span class="comment">//3. rowBounds.limit</span></span><br><span class="line">  cacheKey.update(rowBounds.getLimit());</span><br><span class="line">  <span class="comment">//4. SQL语句</span></span><br><span class="line">  cacheKey.update(boundSql.getSql());</span><br><span class="line">  <span class="comment">//5. 将每一个要传递给JDBC的参数值也更新到CacheKey中</span></span><br><span class="line">  List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();</span><br><span class="line">  TypeHandlerRegistry typeHandlerRegistry = ms.getConfiguration().getTypeHandlerRegistry();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameterMappings.size(); i++) &#123; <span class="comment">// mimic DefaultParameterHandler logic</span></span><br><span class="line">    ParameterMapping parameterMapping = parameterMappings.get(i);</span><br><span class="line">    <span class="keyword">if</span> (parameterMapping.getMode() != ParameterMode.OUT) &#123;</span><br><span class="line">      Object value;</span><br><span class="line">      String propertyName = parameterMapping.getProperty();</span><br><span class="line">      <span class="keyword">if</span> (boundSql.hasAdditionalParameter(propertyName)) &#123;</span><br><span class="line">        value = boundSql.getAdditionalParameter(propertyName);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parameterObject == <span class="keyword">null</span>) &#123;</span><br><span class="line">        value = <span class="keyword">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) &#123;</span><br><span class="line">        value = parameterObject;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        MetaObject metaObject = configuration.newMetaObject(parameterObject);</span><br><span class="line">        value = metaObject.getValue(propertyName);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//将每一个要传递给JDBC的参数值也更新到CacheKey中</span></span><br><span class="line">      cacheKey.update(value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cacheKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CacheKey的hashcode生成算法"><a href="#CacheKey的hashcode生成算法" class="headerlink" title="CacheKey的hashcode生成算法"></a>CacheKey的hashcode生成算法</h3><p>刚才已经提到，Cache接口的实现，本质上是使用的HashMap&lt;k,v&gt;,而构建CacheKey的目的就是为了作为HashMap&lt;k,v&gt;中的key值。而HashMap是通过key值的hashcode 来组织和存储的，那么，构建CacheKey的过程实际上就是构造其hashCode的过程。下面的代码就是CacheKey的核心hashcode生成算法，感兴趣的话可以看一下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (object != <span class="keyword">null</span> &amp;&amp; object.getClass().isArray()) &#123;</span><br><span class="line">     <span class="keyword">int</span> length = Array.getLength(object);</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">       Object element = Array.get(object, i);</span><br><span class="line">       doUpdate(element);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     doUpdate(object);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doUpdate</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 得到对象的hashcode;  </span></span><br><span class="line">   <span class="keyword">int</span> baseHashCode = object == <span class="keyword">null</span> ? <span class="number">1</span> : object.hashCode();</span><br><span class="line">   <span class="comment">//对象计数递增</span></span><br><span class="line">   count++;</span><br><span class="line">   checksum += baseHashCode;</span><br><span class="line">   <span class="comment">//2. 对象的hashcode 扩大count倍</span></span><br><span class="line">   baseHashCode *= count;</span><br><span class="line">   <span class="comment">//3. hashCode * 拓展因子（默认37）+拓展扩大后的对象hashCode值</span></span><br><span class="line">   hashcode = multiplier * hashcode + baseHashCode;</span><br><span class="line">   updateList.add(object);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="一级缓存的性能分析"><a href="#一级缓存的性能分析" class="headerlink" title="一级缓存的性能分析"></a>一级缓存的性能分析</h3><p>我将从两个 一级缓存的特性来讨论<code>SqlSession</code>的一级缓存性能问题：</p><p>1.<strong>MyBatis</strong>对会话（Session）级别的一级缓存设计的比较简单，就简单地使用了HashMap来维护，并没有对HashMap的容量和大小进行限制。</p><p>读者有可能就觉得不妥了：如果我一直使用某一个<code>SqlSession</code>对象查询数据，这样会不会导致HashMap太大，而导致 java.lang.OutOfMemoryError错误啊？ 读者这么考虑也不无道理，不过<strong>MyBatis</strong>的确是这样设计的。</p><p><strong>MyBatis</strong>这样设计也有它自己的理由：</p><p>a. 一般而言<code>SqlSession</code>的生存时间很短。一般情况下使用一个<code>SqlSession</code>对象执行的操作不会太多，执行完就会消亡；</p><p>b. 对于某一个<code>SqlSession</code>对象而言，只要执行update操作（update、insert、delete），都会将这个<code>SqlSession</code>对象中对应的一级缓存清空掉，所以一般情况下不会出现缓存过大，影响JVM内存空间的问题；</p><p>c. 可以手动地释放掉<code>SqlSession</code>对象中的缓存。</p><p>2.一级缓存是一个粗粒度的缓存，<strong>没有更新缓存和缓存过期的概念</strong></p><p><strong>MyBatis</strong>的一级缓存就是使用了简单的HashMap，<strong>MyBatis</strong>只负责将查询数据库的结果存储到缓存中去， 不会去判断缓存存放的时间是否过长、是否过期，因此也就没有对缓存的结果进行更新这一说了。</p><p>根据一级缓存的特性，在使用的过程中，我认为应该注意：<br>1、对于数据变化频率很大，并且需要高时效准确性的数据要求，我们使用<code>SqlSession</code>查询的时候，要控制好<code>SqlSession</code>的生存时间，<code>SqlSession</code>的生存时间越长，它其中缓存的数据有可能就越旧，从而造成和真实数据库的误差；同时对于这种情况，用户也可以手动地适时清空<code>SqlSession</code>中的缓存；</p><p>2、对于只执行、并且频繁执行大范围的select操作的<code>SqlSession</code>对象，<code>SqlSession</code>对象的生存时间不应过长。</p><p>举例：</p><p>例1、看下面这个例子，下面的例子使用了同一个<code>SqlSession</code>指令了两次完全一样的查询，将两次查询所耗的时间打印出来，结果如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.louis.**MyBatis**.model.Employee;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SqlSession 简单查询演示类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> louluan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectDemo1</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger loger = Logger.getLogger(SelectDemo1<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		InputStream inputStream = Resources.getResourceAsStream(<span class="string">"mybatisConfig.xml"</span>);</span><br><span class="line">		SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">		SqlSessionFactory factory = builder.build(inputStream);</span><br><span class="line">		</span><br><span class="line">		SqlSession sqlSession = factory.openSession();</span><br><span class="line">		<span class="comment">//3.使用SqlSession查询</span></span><br><span class="line">		Map&lt;String,Object&gt; params = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">		params.put(<span class="string">"min_salary"</span>,<span class="number">10000</span>);</span><br><span class="line">		<span class="comment">//a.查询工资低于10000的员工</span></span><br><span class="line">		Date first = <span class="keyword">new</span> Date();</span><br><span class="line">		<span class="comment">//第一次查询</span></span><br><span class="line">		List&lt;Employee&gt; result = sqlSession.selectList(<span class="string">"com.louis.**MyBatis**.dao.EmployeesMapper.selectByMinSalary"</span>,params);</span><br><span class="line">		loger.info(<span class="string">"first quest costs:"</span>+ (<span class="keyword">new</span> Date().getTime()-first.getTime()) +<span class="string">" ms"</span>);</span><br><span class="line">		Date second = <span class="keyword">new</span> Date();</span><br><span class="line">		result = sqlSession.selectList(<span class="string">"com.louis.**MyBatis**.dao.EmployeesMapper.selectByMinSalary"</span>,params);</span><br><span class="line">		loger.info(<span class="string">"second quest costs:"</span>+ (<span class="keyword">new</span> Date().getTime()-second.getTime()) +<span class="string">" ms"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://img-blog.csdn.net/20141119161312532" alt=""></p><p>由上面的结果你可以看到，第一次查询耗时464ms，而第二次查询耗时不足1ms,这是因为第一次查询后，<strong>MyBatis</strong>会将查询结果存储到<code>SqlSession</code>对象的缓存中，当后来有完全相同的查询时，直接从缓存中将结果取出。</p><p>例2、对上面的例子做一下修改：在第二次调用查询前，对参数 HashMap类型的params多增加一些无关的值进去，然后再执行，看查询结果：</p><p><img src="https://img-blog.csdn.net/20141120171810031" alt=""></p><p>从结果上看，虽然第二次查询时传递的params参数不一致，但还是从一级缓存中取出了第一次查询的缓存。</p><p>读到这里，请大家晓得这一个问题：</p><blockquote><p><strong>MyBatis</strong>认为的完全相同的查询，不是指使用<code>SqlSession</code>查询时传递给算起来Session的所有参数值完完全全相同，你只要保证statementId，rowBounds,最后生成的SQL语句，以及这个SQL语句所需要的参数完全一致就可以了。</p></blockquote><p>觉得本文不错，顺手点个赞哦～～您的鼓励，是我继续分享知识的强大动力！</p><p>转载自：<a href="http://blog.csdn.net/luanlouis/" target="_blank" rel="noopener">http://blog.csdn.net/luanlouis/</a><br>原文链接：<a href="https://blog.csdn.net/luanlouis/article/details/41280959" target="_blank" rel="noopener">https://blog.csdn.net/luanlouis/article/details/41280959</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
</search>
