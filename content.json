{"meta":{"title":"oncevan�ĸ��˲���","subtitle":"","description":"oncevan�ĸ��˲���Сվ","author":"Evan Chou","url":"https://oncevan/oncevan.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2020-05-15T11:52:16.680Z","updated":"2019-08-01T11:17:12.000Z","comments":false,"path":"/404.html","permalink":"https://oncevan/oncevan.github.io/404.html","excerpt":"","text":""},{"title":"书单","date":"2020-05-15T11:52:16.726Z","updated":"2019-08-01T11:17:12.000Z","comments":false,"path":"books/index.html","permalink":"https://oncevan/oncevan.github.io/books/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-05-15T11:52:16.716Z","updated":"2019-08-01T11:17:12.000Z","comments":false,"path":"about/index.html","permalink":"https://oncevan/oncevan.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"分类","date":"2020-05-15T11:52:16.736Z","updated":"2019-08-01T11:17:12.000Z","comments":false,"path":"categories/index.html","permalink":"https://oncevan/oncevan.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-05-15T11:52:16.745Z","updated":"2019-08-01T11:17:12.000Z","comments":true,"path":"links/index.html","permalink":"https://oncevan/oncevan.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-05-15T13:17:21.756Z","updated":"2019-08-01T11:17:12.000Z","comments":false,"path":"repository/index.html","permalink":"https://oncevan/oncevan.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-05-15T11:52:16.769Z","updated":"2019-08-01T11:17:12.000Z","comments":false,"path":"tags/index.html","permalink":"https://oncevan/oncevan.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"并发容器","slug":"并发容器","date":"2020-05-15T13:49:14.000Z","updated":"2020-05-15T13:51:02.444Z","comments":true,"path":"2020/05/15/并发容器/","link":"","permalink":"https://oncevan/oncevan.github.io/2020/05/15/%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8/","excerpt":"","text":"1、并发容器概览ConcurrentHashMap：线程安全的HashMapCopyOnWriteArrayList：线程安全的ListBlockingQueue：这是一个接口，表示阻塞队列，非常适用于作为数据共享的通道ConcurrentLinkedQueue：高效的非阻塞并发队列，使用链表实现。可以看做一个线程安全的LinkedListConcurrentSkipListMap：是一个Map，使用跳表的数据结构进行快速查找2、同步容器Vector和Hashtable：这两个容器的方法都是使用了synchronized修饰，虽然是线程安全的，但是在多线程的情况下的效率是比较低的ArrayList和HashMap：虽然这两个类不是线程安全的，但是可以用Collections.synchronizedList(new ArrayList&lt;E&gt;())和Collections.synchronizedMap(new HashMap&lt;K,V&gt;())使之变成安全的，但是效率也是不高ConcurrentHashMap和CopyOnWriteArrayList：取代同步的HashMap和同步的ArrayList绝大多数并发情况下，ConcurrentHashMap和CopyOnWriteArrayList的性能都更好如果一个list经常改动：同步的Arraylist的性能优于CopyOnWriteArrayList，因为CopyOnWriteArrayList适用于读多写少的情况ConcurrentHashMap在任何情况下的性能都要比HashMap或Vector要好3、ConcurrentHashMap3.1、Map简介HashMap：HashMap由数组+链表组成，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的。如果通过hash定位到数组位置没有链表，则查找、添加速度很快。否则，就要解决hash冲突，操作链表。遍历链表时，通过key对象的equals方法逐一比对。构造hashmap的时候有两个参数，initialCapacity初始容量（默认16）、loadFactor装载因子（默认0.75）。向容器中添加元素的时候，如果元素个数达到阈值（元素个数=数组长度*loadFactor），就要自动扩容。使用一个新的数组代替已有的数组，每次扩容为先前的两倍。经过 rehash 之后，元素的位置要么在原位置，要么在原位置再移动2次幂的位置。Hashtable：Hashtable对外提供的public函数几乎都是同步的（synchronized关键字修饰），线程安全。key和value都不能为null。HashTable的数据结构和HashMap一样，采用Entry数组 + 链表的方法实现。HashTabale初始的容量为11，负载因子为0.75，这点和HashMap不同，HashMap初始化时容量大小总是2的幂次方，即使给定一个不是2的幂次方容量的值，也会自动初始化为最接近其2的幂次方的容量。LinkedHashMap：LinkedHashMap保证数据可以保持插入顺序LinkedHashMap在HashMap的基础上多了一个双向链表来维持顺序。TreeMap：TreeMap的数据结构是红黑树。HashMap和Hashtable不保证数据有序，LinkedHashMap保证数据可以保持插入顺序，而TreeMap可以按key的大小顺序排序。3.2、为什么需要ConcurrentHashMap为什么HashMap是线程不安全的？同时put碰撞导致数据丢失假设两个线程计算出来的hash值一样，那么两个key会放到同一个位置，导致最终一个数据会丢失同时put扩容导致数据丢失两个线程同时扩容，那么最后也只会保存一个线程中的扩容HashMap死循环造成的CPU100%主要存在于JDK1.7当中，多个线程同时扩容的时候会造成死循环，也就是你指向我我指向你，因为HashMap并不是为了并发情况下设计的JDK1.7的ConcurrentHashMap实现和分析Java 7中的ConcurrentHashMap最外层是多个segment，每个segment的底层数据结构与HashMap类似，仍然是数组和链表组成的拉链法每个segment独立上ReentrantLock锁（重入锁），每个segment之间互不影响，提高了并发效率ConcurrentHashMap默认有16个segemnt，所以最多可以支持16个线程并发写（操作分布在不同的segment上）。这个默认值可以在初始化的时候设置为其他值，但是一旦初始化以后，是不可以扩容的JDK1.8的ConcurrentHashMap实现和分析彩蛋【HashMap和ConcurrentHashMap的扩容机制】https://www.cnblogs.com/lfs2640666960/p/9621461.html【为什么hashMap的容量扩容时一定是2的幂次】https://blog.csdn.net/gududedabai/article/details/85784161","categories":[],"tags":[{"name":"多线程与并发","slug":"多线程与并发","permalink":"https://oncevan/oncevan.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91/"}]}],"categories":[],"tags":[{"name":"多线程与并发","slug":"多线程与并发","permalink":"https://oncevan/oncevan.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91/"}]}