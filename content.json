{"meta":{"title":"oncevan的个人小站","subtitle":"","description":"oncevan的个人博客","author":"Evan Chou","url":"https://oncevan/oncevan.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2020-05-15T11:52:16.680Z","updated":"2019-08-01T11:17:12.000Z","comments":false,"path":"/404.html","permalink":"https://oncevan/oncevan.github.io/404.html","excerpt":"","text":""},{"title":"关于","date":"2020-05-21T09:54:29.050Z","updated":"2019-08-01T11:17:12.000Z","comments":false,"path":"about/index.html","permalink":"https://oncevan/oncevan.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"archives","date":"2020-05-21T14:41:20.000Z","updated":"2020-05-21T14:41:20.249Z","comments":true,"path":"archives/index.html","permalink":"https://oncevan/oncevan.github.io/archives/index.html","excerpt":"","text":""},{"title":"书单","date":"2020-05-15T11:52:16.726Z","updated":"2019-08-01T11:17:12.000Z","comments":false,"path":"books/index.html","permalink":"https://oncevan/oncevan.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-05-21T08:40:19.000Z","updated":"2020-05-21T15:13:53.400Z","comments":true,"path":"categories/index.html","permalink":"https://oncevan/oncevan.github.io/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-05-15T13:17:21.756Z","updated":"2019-08-01T11:17:12.000Z","comments":false,"path":"repository/index.html","permalink":"https://oncevan/oncevan.github.io/repository/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-05-15T11:52:16.745Z","updated":"2019-08-01T11:17:12.000Z","comments":true,"path":"links/index.html","permalink":"https://oncevan/oncevan.github.io/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-05-21T15:12:47.469Z","updated":"2020-05-21T15:12:47.469Z","comments":true,"path":"tags/index.html","permalink":"https://oncevan/oncevan.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"TCP与UDP","slug":"TCP与UDP","date":"2020-06-01T10:23:44.000Z","updated":"2020-06-09T00:26:46.534Z","comments":true,"path":"2020/06/01/TCP与UDP/","link":"","permalink":"https://oncevan/oncevan.github.io/2020/06/01/TCP%E4%B8%8EUDP/","excerpt":"","text":"引言网络协议是每个前端工程师都必须要掌握的知识，TCP/IP 中有两个具有代表性的传输层协议，分别是 TCP 和 UDP，本文将介绍下这两者以及它们之间的区别。一、TCP/IP网络模型计算机与网络设备要相互通信，双方就必须基于相同的方法。比如，如何探测到通信目标、由哪一边先发起通信、使用哪种语言进行通信、怎样结束通信等规则都需要事先确定。不同的硬件、操作系统之间的通信，所有的这一切都需要一种规则。而我们就把这种规则称为协议（protocol）。TCP/IP 是互联网相关的各类协议族的总称，比如：TCP，UDP，IP，FTP，HTTP，ICMP，SMTP 等都属于 TCP/IP 族内的协议。TCP/IP模型是互联网的基础，它是一系列网络协议的总称。这些协议可以划分为四层，分别为链路层、网络层、传输层和应用层。链路层：负责封装和解封装IP报文，发送和接受ARP/RARP报文等。网络层：负责路由以及把分组报文发送给目标网络或主机。传输层：负责对报文进行分组和重组，并以TCP或UDP协议格式封装报文。应用层：负责向用户提供应用程序，比如HTTP、FTP、Telnet、DNS、SMTP等。在网络体系结构中网络通信的建立必须是在通信双方的对等层进行，不能交错。 在整个数据传输过程中，数据在发送端时经过各层时都要附加上相应层的协议头和协议尾（仅数据链路层需要封装协议尾）部分，也就是要对数据进行协议封装，以标识对应层所用的通信协议。接下去介绍TCP/IP 中有两个具有代表性的传输层协议—-TCP 和 UDP。二、UDPUDP协议全称是用户数据报协议，在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。在OSI模型中，在第四层——传输层，处于IP协议的上一层。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。它有以下几个特点：1. 面向无连接首先 UDP 是不需要和 TCP一样在发送数据前进行三次握手建立连接的，想发数据就可以开始发送了。并且也只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作。具体来说就是：在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作2. 有单播，多播，广播的功能UDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。3. UDP是面向报文的发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付IP层。UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。因此，应用程序必须选择合适大小的报文4. 不可靠性首先不可靠性体现在无连接上，通信都不需要建立连接，想发就发，这样的情况肯定不可靠。并且收到什么数据就传递什么数据，并且也不会备份数据，发送数据也不会关心对方是否已经正确接收到数据了。再者网络环境时好时坏，但是 UDP 因为没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。从上面的动态图可以得知，UDP只会把想发的数据报文一股脑的丢给对方，并不在意数据有无安全完整到达。5. 头部开销小，传输数据报文时是很高效的。UDP 头部包含了以下几个数据：两个十六位的端口号，分别为源端口（可选字段）和目标端口整个数据报文的长度整个数据报文的检验和（IPv4 可选 字段），该字段用于发现头部信息和数据中的错误因此 UDP 的头部开销小，只有八字节，相比 TCP 的至少二十字节要少得多，在传输数据报文时是很高效的三、TCP当一台计算机想要与另一台计算机通讯时，两台计算机之间的通信需要畅通且可靠，这样才能保证正确收发数据。例如，当你想查看网页或查看电子邮件时，希望完整且按顺序查看网页，而不丢失任何内容。当你下载文件时，希望获得的是完整的文件，而不仅仅是文件的一部分，因为如果数据丢失或乱序，都不是你希望得到的结果，于是就用到了TCP。TCP协议全称是传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议，由 IETF 的RFC 793定义。TCP 是面向连接的、可靠的流协议。流就是指不间断的数据结构，你可以把它想象成排水管中的水流。1. TCP连接过程如下图所示，可以看到建立一个TCP连接的过程为（三次握手的过程）:第一次握手客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入 SYN-SENT 状态。第二次握手服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。第三次握手当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入 ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。这里可能大家会有个疑惑：为什么 TCP 建立连接需要三次握手，而不是两次？这是因为这是为了防止出现失效的连接请求报文段被服务端接收的情况，从而产生错误。2. TCP断开链接TCP 是全双工的，在断开连接时两端都需要发送 FIN 和 ACK。第一次握手若客户端 A 认为数据发送完成，则它需要向服务端 B 发送连接释放请求。第二次握手B 收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明 A 到 B 的连接已经释放，不再接收 A 发的数据了。但是因为 TCP 连接是双向的，所以 B 仍旧可以发送数据给 A。第三次握手B 如果此时还有没发完的数据会继续发送，完毕后会向 A 发送连接释放请求，然后 B 便进入 LAST-ACK 状态。第四次握手A 收到释放请求后，向 B 发送确认应答，此时 A 进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有 B 的重发请求的话，就进入 CLOSED 状态。当 B 收到确认应答后，也便进入 CLOSED 状态。3. TCP协议的特点面向连接面向连接，是指发送数据之前必须在两端建立连接。建立连接的方法是“三次握手”，这样能建立可靠的连接。建立连接，是为数据的可靠传输打下了基础。仅支持单播传输每条TCP传输连接只能有两个端点，只能进行点对点的数据传输，不支持多播和广播传输方式。面向字节流TCP不像UDP一样那样一个个报文独立地传输，而是在不保留报文边界的情况下以字节流方式进行传输。可靠传输对于可靠传输，判断丢包，误码靠的是TCP的段编号以及确认号。TCP为了保证报文传输的可靠，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的字节发回一个相应的确认(ACK)；如果发送端实体在合理的往返时延(RTT)内未收到确认，那么对应的数据（假设丢失了）将会被重传。提供拥塞控制当网络出现拥塞的时候，TCP能够减小向网络注入数据的速率和数量，缓解拥塞TCP提供全双工通信TCP允许通信双方的应用程序在任何时候都能发送数据，因为TCP连接的两端都设有缓存，用来临时存放双向通信的数据。当然，TCP可以立即发送一个数据段，也可以缓存一段时间以便一次发送更多的数据段（最大的数据段大小取决于MSS）四、TCP和UDP的比较1. 对比UDPTCP是否连接无连接面向连接是否可靠不可靠传输，不使用流量控制和拥塞控制可靠传输，使用流量控制和拥塞控制连接对象个数支持一对一，一对多，多对一和多对多交互通信只能是一对一通信传输方式面向报文面向字节流首部开销首部开销小，仅8字节首部最小20字节，最大60字节适用场景适用于实时应用（IP电话、视频会议、直播等）适用于要求可靠传输的应用，例如文件传输2. 总结TCP向上层提供面向连接的可靠服务 ，UDP向上层提供无连接不可靠服务。虽然 UDP 并没有 TCP 传输来的准确，但是也能在很多实时性要求高的地方有所作为对数据准确性要求高，速度可以相对较慢的，可以选用TCP","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://oncevan/oncevan.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://oncevan/oncevan.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}]},{"title":"计算机网络之五层模型","slug":"计算机网络","date":"2020-05-30T11:24:15.000Z","updated":"2020-06-09T00:24:39.240Z","comments":true,"path":"2020/05/30/计算机网络/","link":"","permalink":"https://oncevan/oncevan.github.io/2020/05/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/","excerpt":"1、两台计算机需要通信的话，需要解决使用什么信号来传输比特的问题，这就划分了物理层","text":"1、两台计算机需要通信的话，需要解决使用什么信号来传输比特的问题，这就划分了物理层2、总线中有5台计算机，A想要发送数据给C，但是C怎么知道是要发送给自己的数据还是不是呢？【如何标识网络中的各个主机(例如Mac)】C要如何从一连串的比特流中区分出地址和数据？如何解决两台主机发送数据在总线中可能发生碰撞？【如何协调个主机争用总线】这就划分出了数据链路层。3、以上这种总线型网络早已淘汰，通过多个路由器连接而成的网络，如何标识个网络以及网络中的主机呢？【网络和主机共同编址的问题，例如IP地址】因为路由器有多个，那么一个主机给另一个主机进行通信时，可能有多条路径，那么如何进行选择呢？【路由器如何转发分组，如何进行路由选择】所以划分出了网络层4、假设某台主机运行着多个与网络通信相关的应用进程，某个时刻主机收到了来自服务器的分组，那么这些分组应该交给哪个进程处理呢？【如何解决进程之间基于网络的通信问题】如果传输过程中出现错误，如何处理，这也是需要解决的问题。所以划分出了运输层。5、通过应用间的交互来完成特定的网络应用，HTTP，SMTP，FTP协议等，这就划分出了应用层一台电脑向服务器请求的网址后的过程1、首先，应用层按照HTTP协议的规定，构建一个HTTP请求报文，交给运输层处理。【HTTP】2、运输层给HTTP请求添加一个TCP首部，使之成为TCP报文段，交给网络层处理。该TCP首部的作用主要是为了区分应用进程，以及实现可靠传输。【HTTP TCP】3、网络层给TCP报文段添加一个IP首部，使之成为IP数据报，交给数据链路层处理。该首部的作用是让IP数据报可以在互联网上进行传输，也就是被路由器转发。【HTTP TCP IP】4、数据链路层给IP数据报添加一个首部和一个尾部，使之成为帧，交给物理层处理。该首部的作用主要是为了让帧能够在一段链路上或一个网络上传输，能够被相应的目的主机接收。尾部的作用是为了让目的主机检查，所接收到的帧是否有误码。【ETH HTTP TCP IP ETH】5、物理层将帧看做是比特流，由于网络N1是以太网，物理层还会给该比特流前面添加前导码。其作用是为了让目的主机做好接收帧的准备【比特流00001011001 …..前导码】物理层将比特流变换成想要的信号发送到传输媒体，信号通过传输媒体（比如光纤什么的）到达路由器1、物理层将信号变换为比特流，去掉前导码后，【比特流010010101】将其交付给数据链路层，时机交付的是帧。【ETH HTTP TCP IP ETH】2、数据链路层将帧的首部和尾部去掉后，将其交付给网络层，这实际交付的是IP数据报。【HTTP TCP IP】3、网络层解析IP数据报首部，从中提取出目的网络地址，然后查找自身的路由表，确定转发端口。网络层将IP数据报交给数据链路层。【HTTP TCP IP】4、数据链路层给IP数据报添加一个首部和一个尾部，使之成为帧，数据链路层将帧交付给物理层。【ETH HTTP TCP IP ETH】5、物理层将帧看做是比特流，由于N2是以太网，会给比特流加上前导码。【比特流 前导码】物理层将比特流变换成想要的信号发送到传输媒体，信号通过传输媒体（比如光纤什么的）到达WEB服务器。1、物理层将信号变换为比特流，去掉前导码后，交给给数据链路层，这时候交付的其实是帧。【ETH HTTP TCP IP ETH】2、数据链路层接收到帧后，去掉首部和尾部，将其交付给网络层，这时候交付的其实是IP数据报。【HTTP TCP IP】3、网络层去掉IP数据报首部去掉后，交付给运输层，这时候交付的其实是TCP报文段【HTTP TCP】4、运输层去掉TCP报文段后，将HTTP请求报文交付给应用层。【HTTP】5、应用层对HTTP请求报文进行解析，然后给主机发回HTTP响应报文。拓展：当输入URL，敲下回车键后发生了什么？1. DNS域名解析在浏览器DNS缓存中搜索在操作系统DNS缓存中搜索读取系统hosts文件，查找其中是否有对应的ip向本地配置的首选DNS服务器发起域名解析请求2. 建立TCP连接为了准确地传输数据，TCP协议采用了三次握手策略。发送端首先发送一个带SYN（synchronize）标志的数据包给接收方，接收方收到后，回传一个带有SYN/ACK(acknowledegment)标志的数据包以示传达确认信息。最后发送方再回传一个带ACK标志的数据包，代表握手结束。在这过程中若出现问题中断，TCP会再次发送相同的数据包。TCP是一个端到端的可靠的面向连接的协议，所以HTTP基于传输层TCP协议不用担心数据的传输的各种问题。TCP建立连接为什么需要三次握手、四次挥手Q：为什么是三次握手而不是两次握手或四次握手或更多呢？A：三次握手更为稳妥。“长江长江，我是黄河，听到请回答。”“黄河黄河，我是长江，我听到了你，请回答。”“长江长江，我是黄河，我听到了你，现在请你收报。”建立TCP连接时会发生:三次握手(three-way handshake)firefox &gt; nginx [SYN] 在么nginx &gt; firefox [SYN, ACK] 在firefox &gt; nginx [ACK] 知道了第一次：C发送一个请求连接的位码SYN和一个随机产生的序列号给Seq，然后S收到了这些数据。​ 第二次:S收到了这个请求连接的位码，啊呀，有人向我发出请求了么，那我要不要接受他的请求，得实现确认一下，于是，发送了一个确认码 ACN（seq+1），和SYN，Seq给C，然后C收到了，这个是第二次连接。​ 第三次：C收到了确认的码和之前发送的SYN一比较，偶哟，对上了么，于是他又发送了一个ACN（SEQ+1）给S，S收到以后就确定建立连接，至此，TCP连接建立完成。​ 简单就是：请求，确认，连接。关闭TCP连接时会发生:四次挥手(four-way handshake)firefox &gt; nginx [FIN] 我要关闭连接了nginx &gt; firefox [ACK] 知道了,等我发完包先nginx &gt; firefox [FIN] 我也关闭连接了fi refox &gt; nginx [ACK] 好的,知道了几个报文的标识的解释:SYN: synchronization(同步)ACK: acknowledgement(确认:告知已收到)FIN: finish(结束)HTTP与HTTPSHTTP报文是包裹在TCP报文中发送的，服务器端收到TCP报文时会解包提取出HTTP报文。但是这个过程中存在一定的风险，HTTP报文是明文，如果中间被截取的话会存在一些信息泄露的风险。那么在进入TCP报文之前对HTTP做一次加密就可以解决这个问题了。HTTPS协议的本质就是HTTP + SSL(or TLS)。在HTTP报文进入TCP报文之前，先使用SSL对HTTP报文进行加密。从网络的层级结构看它位于HTTP协议与TCP协议之间。HTTPS过程HTTPS在传输数据之前需要客户端与服务器进行一个握手(TLS/SSL握手)，在握手过程中将确立双方加密传输数据的密码信息。TLS/SSL使用了非对称加密，对称加密以及hash等。具体过程请参考经典的阮一峰先生的博客TLS/SSL握手过程。HTTPS相比于HTTP，虽然提供了安全保证，但是势必会带来一些时间上的损耗，如握手和加密等过程，是否使用HTTPS需要根据具体情况在安全和性能方面做出权衡。HTTP请求其实这部分又可以称为前端工程师眼中的HTTP，它主要发生在客户端。发送HTTP请求的过程就是构建HTTP请求报文并通过TCP协议中发送到服务器指定端口(HTTP协议80/8080, HTTPS协议443)。HTTP请求报文是由三部分组成: 请求行, 请求报头和请求正文。URL与URIURI = Universal Resource Identifier 统一资源标志符，用来标识抽象或物理资源的一个紧凑字符串。URL = Universal Resource Locator 统一资源定位符，一种定位资源的主要访问机制的字符串，一个标准的URL必须包括：protocol、host、port、path、parameter、anchor。","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://oncevan/oncevan.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://oncevan/oncevan.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}]},{"title":"手写红黑树","slug":"手写红黑树","date":"2020-05-28T11:57:28.000Z","updated":"2020-05-28T12:02:56.673Z","comments":true,"path":"2020/05/28/手写红黑树/","link":"","permalink":"https://oncevan/oncevan.github.io/2020/05/28/%E6%89%8B%E5%86%99%E7%BA%A2%E9%BB%91%E6%A0%91/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359import lombok.*；/** * 1、创建RBTree，定义颜色 * 2、创建RBNode * 3、辅助方法定义：parentOf(node),isRed(node),isBlack(node),setBlack(node),setRed(node),inOrderPrint() * 4、左旋方法定义：leftRotate(node) * 5、右旋方法定义：rightRotate(node) * 6、公开插入接口方法定义：insert(K key,V value) * 7、内部插入接口方法的定义：insert(RBNode node) * 8、修正插入导致红黑树失衡的方法定义：insertFixUp(RBNode node) * 9、测试红黑树正确性 * @param &lt;K&gt; K继承了Comparable是为了之后key之间的比较 * @param &lt;V&gt; */public class RBTree&lt;K extends Comparable&lt;K&gt;,V&gt;&#123; private static final boolean RED = true; private static final boolean BLACK = false; //红黑树的树根 private RBNode root; //这里使用Lombok是为了减少代码量 @Data @NoArgsConstructor @AllArgsConstructor static class RBNode&lt;K extends Comparable&lt;K&gt;,V&gt;&#123; private RBNode parent; private RBNode left; private RBNode right; private boolean color; private K key; private V value； &#125; /** * 获取当前节点的父节点 * @param node * @return */ private RBNode parentOf(RBNode node)&#123; if (node!= null)&#123; return node.parent; &#125; return null; &#125; /** * 检测当前节点是否为红色 * @param node * @return */ private boolean isRed(RBNode node)&#123; if (node != null)&#123; return node.color==RED; &#125; return false; &#125; /** * 检测当前节点是否为黑色 * @param node * @return */ private boolean isBlack(RBNode node)&#123; if (node != null)&#123; return node.color==BLACK; &#125; return false; &#125; /** * 将当前节点设置为黑色 * @param node * @return */ private void setBlack(RBNode node)&#123; node.setColor(BLACK); &#125; /** * 将当前节点设置为红色 * @param node * @return */ private void setRed(RBNode node)&#123; node.setColor(RED); &#125; /** * 供外部调用的打印方法 */ public void inOrderPrint()&#123; inOrderPrint(this.root); &#125; /** * 递归打印出树的key和value * 中序遍历 * @param node */ private void inOrderPrint(RBNode node)&#123; if (node != null) &#123; inOrderPrint(node.left); System.out.println(\"key:\" + node.key + \",value:\" + node.value); inOrderPrint(node.right); &#125; &#125; /** * P P * | | * x ---&gt; y * / \\ / \\ * lx y x ry * / \\ / \\ * ly ry lx ly * 左旋的步骤： * 1、将y的左子节点的父节点更新为x，将x的右节点更新为y的左子节点 * 2、x的父节点（不为空），将y的父节点更新为x的父节点，将x的父节点的子节点更新为y * 3、将x的父节点更新为y，将y的左子节点更新为x * 注：要左旋的节点用x表示同下面node，y代表x的右子节点 * @param node 要左旋的节点 */ public void leftRotate(RBNode node)&#123; //y表示要左旋节点的右子节点 RBNode y = node.right; //将y的左子节点的父节点更新node y.right.parent = node; //将node的右节点更新y的左子节点 node.right = y.left; if (node.parent != null)&#123; //当node不为根节点时： //将y的父节点更新node的父节点 y.parent = node.parent; if (node == node.parent.left)&#123; //当node是左节点时，就把node的父节点的左子节点更新y node.parent.left = y; &#125;else &#123; //当node是右节点时，就把node的父节点的右子节点更新y node.parent.right = y; &#125; &#125;else &#123; //这是表示node本身就是根节点，那么需要把根节点替换成y this.root = y; y.parent =null; &#125; //将node的父节点更新y node.parent = y; //将y的左子节点更新node y.left = node; &#125; /** * P * 右旋的步骤： * 1、将y的右子节点的父节点更新x，将x的左子节点更新y的右子节点 * 2、如果x的父节点不为空，将y的父节点更新为x的父节点，将x的父节点的子节点更新为y * 3、将x的父节点更新为y，将y的右子节点更新为x * 注：x代表要右旋的节点同下面的node，y代表x的左子节点 * @param node */ public void rightRotate(RBNode node)&#123; RBNode y = node.left; node.left = y.right; if (y.right != null) &#123; y.right.parent = node; &#125; if (node.parent!=null)&#123; y.parent = node.parent; if (node.parent.left == node)&#123; node.parent.left = y; &#125;else &#123; node.parent.right = y; &#125; &#125;else &#123; this.root = y; this.root.parent =null; &#125; node.parent = y; y.left = node; &#125; /** * 对外提供的插入新节点的方法 * @param key * @param value */ public void insert(K key,V value)&#123; RBNode node = new RBNode(); node.setKey(key); node.setValue(value); //插入的节点必须是红色的 node.setColor(RED); insert(node); &#125; /** * 插入节点的方法实现 * 1、查找当前node的父节点 * @param node */ private void insert(RBNode node)&#123; RBNode parent = null; RBNode x = this.root; while (x != null)&#123; parent = x; //cmp &gt; 0,说明node的key大于x.key,需要到x的右子树查找 //cmp = 0,说明node的key等于x.key,需要进行替换操作 //cmp &lt; 0,说明node的key小于x.key,需要到x的左子树查找 int cmp = node.key.compareTo(x.key); if (cmp &lt; 0)&#123; x = x.left; &#125;else if (cmp &gt; 0)&#123; x = x.right; &#125;else &#123; x.setValue(node.value); //直接替换的话就直接返回 return; &#125; &#125; //这是没有key相同的情况，找到了parent node.parent = parent; if (parent != null) &#123; //判断node与parent的key谁大 int cmp = node.key.compareTo(parent.key); if (cmp &gt; 0)&#123; //cmp大于0的话说明node比parent大，为parent的右节点 parent.right = node; &#125;else &#123; //cmp小于0的话说明node的key比parent的key小，为parent的左节点 parent.left = node; &#125; &#125;else &#123; //没有parent节点，就自己成为root this.root = node; &#125; //插入节点后，可能会破环红黑树的平衡,需要修复 insertFixUp(node); &#125; /** * 插入后修复红黑树的方法 * |---情景1：红黑树为空树 【将根节点染色为黑】 * |---情景2：插入节点的key已经存在 【不用处理】 * |---情景3：插入节点的父节点为黑色 【不违背黑高性质，无需处理】 * 以下是需要处理的情况 * |---情景4：插入节点的父节点为红色 * |---情景4.1：叔叔节点存在，并且为红色（父-叔 双红） * 【将父节点和叔叔节点染色为黑，爷爷节点染色为红，再以爷爷节点为当前节点进行下一轮处理】 * |---情景4.2：叔叔节点不存在，或者为黑色，父节点为爷爷节点的左子树 * |---情景4.2.1：插入节点为其父节点的左子节点（LL双红情况） * 【将父节点染色为黑色，将爷爷节点染色为红色，再以爷爷节点右旋，就完成了】 * |---情景4.2.2：插入节点为其父节点的右子节点（LR双红情况） * 【以父节点进行一次左旋，然后就变成了4.2.1这种情景，以父节点为当前节点进行下一轮处理】 * |---情景4.3：叔叔节点不存在，或者为黑色，父节点为爷爷节点的右子树 * |---情景4.3.1：插入节点为其父节点的右子节点（RR双红情况） * 【将父节点染成黑色，将爷爷节点染色为红色，以爷爷节点为当前节点，进行左旋，完成】 * |---情景4.3.2：插入节点为其父节点的左子节点（RL双红情况） * 【以父节点进行右旋，得到4.3.1情景，以父节点为当前节点进行下一轮处理】 */ private void insertFixUp(RBNode node) &#123; this.root.setColor(BLACK); RBNode parent = parentOf(node); RBNode gparent = parentOf(parent); RBNode uncle = null; //情景4：插入节点的父节点为红色 if (parent!=null &amp;&amp; isRed(parent))&#123; //如果父节点为红色，那么一定存在爷爷节点 if (parent == gparent.left)&#123; //如果父节点为左节点，那么叔叔节点为右节点 uncle = gparent.right; //情景4.1：叔叔节点存在，并且为红色（父-叔 双红） if (uncle!=null &amp;&amp; isRed(uncle))&#123; //【将父节点和叔叔节点染色为黑，爷爷节点染色为红，再以爷爷节点为当前节点进行下一轮处理】 parent.setColor(BLACK); uncle.setColor(BLACK); gparent.setColor(RED); insertFixUp(gparent); return; &#125; //情景4.2：叔叔节点不存在，或者为黑色，父节点为爷爷节点的左子树 if (uncle==null || isBlack(uncle))&#123; //情景4.2.1：插入节点为其父节点的左子节点（LL双红情况） if (node == parent.left)&#123; //【将父节点染色为黑色，将爷爷节点染色为红色，再以爷爷节点右旋，就完成了】 parent.setColor(BLACK); gparent.setColor(RED); rightRotate(gparent); return; &#125; //情景4.2.2：插入节点为其父节点的右子节点（LR双红情况） if (node == parent.right)&#123; //【以父节点进行一次左旋，然后就变成了4.2.1这种情景，再按4.2.1的方案处理】 leftRotate(parent); insertFixUp(parent); return; &#125; &#125; &#125;else &#123; //uncle除了在右边或空外，还有可能在左边或者为空 uncle=gparent.left; //情景4.1：叔叔节点存在，并且为红色（父-叔 双红） if (uncle!=null &amp;&amp; isRed(uncle))&#123; //【将父节点和叔叔节点染色为黑，爷爷节点染色为红，再以爷爷节点为当前节点进行下一轮处理】 parent.setColor(BLACK); uncle.setColor(BLACK); gparent.setColor(RED); insertFixUp(gparent); return; &#125; //情景4.3：叔叔节点不存在，或者为黑色，父节点为爷爷节点的右子树 if (uncle==null || isBlack(uncle))&#123; // 情景4.3.1：插入节点为其父节点的右子节点（RR双红情况） if (node == parent.right)&#123; // 【将父节点染成黑色，将爷爷节点染色为红色，以爷爷节点为当前节点，进行左旋，完成】 setBlack(parent); setRed(gparent); leftRotate(gparent); return; &#125;else &#123; // 情景4.3.2：插入节点为其父节点的左子节点（RL双红情况） // 【以父节点进行右旋，得到4.3.1情景，按4.3.1情景处理】 rightRotate(parent); insertFixUp(parent); return; &#125; &#125; &#125; &#125; &#125;&#125;","categories":[{"name":"Java基础、红黑树","slug":"Java基础、红黑树","permalink":"https://oncevan/oncevan.github.io/categories/Java%E5%9F%BA%E7%A1%80%E3%80%81%E7%BA%A2%E9%BB%91%E6%A0%91/"}],"tags":[{"name":"红黑树","slug":"红黑树","permalink":"https://oncevan/oncevan.github.io/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"}]},{"title":"动态代理","slug":"动态代理","date":"2020-05-27T12:40:21.000Z","updated":"2020-06-09T00:20:25.616Z","comments":true,"path":"2020/05/27/动态代理/","link":"","permalink":"https://oncevan/oncevan.github.io/2020/05/27/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/","excerpt":"概述我们大家都知道微商代理，简单地说就是代替厂家卖商品，厂家“委托”代理为其销售商品。关于微商代理，首先我们从他们那里买东西时通常不知道背后的厂家究竟是谁，也就是说，“委托者”对我们来说是不可见的；其次，微商代理主要以朋友圈的人为目标客户，这就相当于为厂家做了一次对客户群体的“过滤”。我们把微商代理和厂家进一步抽象，前者可抽象为代理类，后者可抽象为委托类（被代理类）。通过使用代理，通常有两个优点，并且能够分别与我们提到的微商代理的两个特点对应起来：优点一：可以隐藏委托类的实现；优点二：可以实现客户与委托类间的解耦，在不修改委托类代码的情况下能够做一些额外的处理。","text":"概述我们大家都知道微商代理，简单地说就是代替厂家卖商品，厂家“委托”代理为其销售商品。关于微商代理，首先我们从他们那里买东西时通常不知道背后的厂家究竟是谁，也就是说，“委托者”对我们来说是不可见的；其次，微商代理主要以朋友圈的人为目标客户，这就相当于为厂家做了一次对客户群体的“过滤”。我们把微商代理和厂家进一步抽象，前者可抽象为代理类，后者可抽象为委托类（被代理类）。通过使用代理，通常有两个优点，并且能够分别与我们提到的微商代理的两个特点对应起来：优点一：可以隐藏委托类的实现；优点二：可以实现客户与委托类间的解耦，在不修改委托类代码的情况下能够做一些额外的处理。1 静态代理此为第一小节的提炼：如果代理类在程序运行前就已经存在，那么这种代理方式被称为静态代理，这种情况下的代理类通常时我们在Java代码中定义的。优点：如果需要对委托类的方法进行额外的过滤等需求，那么可以不用修改委托类，只需要修改代理类来达到效果；同时，这样可以实现代理类和委托类之间的解耦，在不修改委托类代码的情况下能够做一些额外的处理。缺点：但是如果每个方法需要的处理都相同，那么就会造成代码冗余 ；静态代理的局限在于运行前必须编写好代理类。若代理类在程序运行前就已经存在，那么这种代理方式被成为静态代理，这种情况下的代理类通常都是我们在Java代码中定义的。 通常情况下，静态代理中的代理类和委托类会实现同一接口或是派生自相同的父类。下面我们用Vendor类代表生产厂家，BusinessAgent类代表微商代理，来介绍下静态代理的简单实现，委托类和代理类都实现了Sell接口，Sell接口的定义如下：1234public interface Sell &#123; void sell(); void ad();&#125;​ Vendor类的定义如下：12345678public class Vendor implements Sell &#123; public void sell() &#123; System.out.println(\"In sell method\"); &#125; public void ad() &#123; System,out.println(\"ad method\") &#125;&#125;代理类BusinessAgent的定义如下：12345678910 1 public class BusinessAgent implements Sell &#123; 2 private Vendor mVendor; 3 4 public BusinessAgent(Vendor vendor) &#123; 5 mVendor = vendor; 6 &#125; 7 8 public void sell() &#123; mVendor.sell(); &#125; 9 public void ad() &#123; mVendor.ad(); &#125;10 &#125;从BusinessAgent类的定义我们可以了解到，静态代理可以通过聚合来实现，让代理类持有一个委托类的引用即可。下面我们考虑一下这个需求：给Vendor类增加一个过滤功能，只卖货给大学生。通过静态代理，我们无需修改Vendor类的代码就可以实现，只需在BusinessAgent类中的sell方法中添加一个判断即可如下所示：123456789public class BusinessAgent implements Sell &#123; ... public void sell() &#123; if (isCollegeStudent()) &#123; vendor.sell(); &#125; &#125; ...&#125;这对应着我们上面提到的使用代理的第二个优点：可以实现客户与委托类间的解耦，在不修改委托类代码的情况下能够做一些额外的处理。静态代理的局限在于运行前必须编写好代理类，下面我们重点来介绍下运行时生成代理类的动态代理方式。2 动态代理代理类在程序运行时创建的代理方式被称为动态代理，也就是说，这种情况下，代理类并不是在Java代码中定义的，而是在程序运行时根据我们在Java代码中的“指示”动态生成的。相比于静态代理，动态代理的优势在于可以很方便的对代理类的函数进行统一的处理，而不用修改每个代理类的函数。现在，假设我们要实现这样一个需求：在执行委托类中的方法之前输出“before”，在执行完毕后输出“after”。我们还是以上面例子中的Vendor类作为委托类，BusinessAgent类作为代理类来进行介绍。首先我们来使用静态代理来实现这一需求，相关代码如下：12345678910111213141516171819public class BusinessAgent implements Sell &#123; private Vendor mVendor; public BusinessAgent(Vendor vendor) &#123; this.mVendor = vendor; &#125; public void sell() &#123; System.out.println(\"before\"); mVendor.sell(); System.out.println(\"after\"); &#125; public void ad() &#123; System.out.println(\"before\"); mVendor.ad(); System.out.println(\"after\"); &#125;&#125;从以上代码中我们可以了解到，通过静态代理实现我们的需求需要我们在每个方法中都添加相应的逻辑，这里只存在两个方法所以工作量还不算大，假如Sell接口中包含上百个方法呢？这时候使用静态代理就会编写许多冗余代码。通过使用动态代理，我们可以做一个“统一指示”，从而对所有代理类的方法进行统一处理，而不用逐一修改每个方法。下面我们来具体介绍下如何使用动态代理方式实现我们的需求。2.1 使用动态代理2.1.1 InvocationHandler接口在使用动态代理时，我们需要定义一个位于代理类与委托类之间的中介类，这个中介类被要求实现InvocationHandler接口，这个接口的定义如下：123public interface InvocationHandler &#123; Object invoke(Object proxy, Method method, Object[] args);&#125;从InvocationHandler这个名称我们就可以知道，实现了这个接口的中介类用做“调用处理器”。当我们调用代理类对象的方法时，这个“调用”会转送到invoke方法中，代理类对象作为proxy参数传入，参数method标识了我们具体调用的是代理类的哪个方法，args为这个方法的参数。这样一来，我们对代理类中的所有方法的调用都会变为对invoke的调用，这样我们可以在invoke方法中添加统一的处理逻辑（也可以根据method参数对不同的代理类方法做不同的处理）。因此我们只需在中介类的invoke方法实现中输出“before”，然后调用委托类的invoke方法，再输出“after”。下面我们来一步一步具体实现它。2.1.2 委托类的定义动态代理方式下，要求委托类必须实现某个接口，这里我们实现的是Sell接口。委托类Vendor类的定义如下：12345678public class Vendor implements Sell &#123; public void sell() &#123; System.out.println(\"In sell method\"); &#125; public void ad() &#123; System,out.println(\"ad method\") &#125;&#125;2.1.3 中介类上面我们提到过，中介类必须实现InvocationHandler接口，作为调用处理器”拦截“对代理类方法的调用。中介类的定义如下：123456789101112131415 1 public class DynamicProxy implements InvocationHandler &#123; 2 private Object obj; //obj为委托类对象； 3 4 public DynamicProxy(Object obj) &#123; 5 this.obj = obj; 6 &#125; 7 8 @Override 9 public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;10 System.out.println(\"before\");11 Object result = method.invoke(obj, args);12 System.out.println(\"after\");13 return result;14 &#125;15 &#125;从以上代码中我们可以看到，中介类持有一个委托类对象引用，在invoke方法中调用了委托类对象的相应方法（第11行），看到这里是不是觉得似曾相识？通过聚合方式持有委托类对象引用，把外部对invoke的调用最终都转为对委托类对象的调用。这不就是我们上面介绍的静态代理的一种实现方式吗？实际上，中介类与委托类构成了静态代理关系，在这个关系中，中介类是代理类，委托类就是委托类；代理类与中介类也构成一个静态代理关系，在这个关系中，中介类是委托类，代理类是代理类。也就是说，动态代理关系由两组静态代理关系组成，这就是动态代理的原理。下面我们来介绍一下如何”指示“以动态生成代理类。2.1.4 动态生成代理类动态生成代理类的相关代码如下：1234567891011121314public class Main &#123; public static void main(String[] args) &#123; //创建中介类实例 DynamicProxy inter = new DynamicProxy(new Vendor()); //加上这句将会产生一个$Proxy0.class文件，这个文件即为动态生成的代理类文件 System.getProperties().put(\"sun.misc.ProxyGenerator.saveGeneratedFiles\",\"true\"); //获取代理类实例sell Sell sell = (Sell)(Proxy.newProxyInstance(Sell.class.getClassLoader(), new Class[] &#123;Sell.class&#125;, inter)); //通过代理类对象调用代理类方法，实际上会转到invoke方法调用 sell.sell(); sell.ad(); &#125;&#125;在以上代码中，我们调用Proxy类的newProxyInstance方法来获取一个代理类实例。这个代理类实现了我们指定的接口并且会把方法调用分发到指定的调用处理器。这个方法的声明如下：1public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h) throws IllegalArgumentException方法的三个参数含义分别如下：loader：定义了代理类的ClassLoder；interfaces：代理类实现的接口列表h：调用处理器，也就是我们上面定义的实现了InvocationHandler接口的类实例我们运行一下，看看我们的动态代理是否能正常工作。我这里运行后的输出为：说明我们的动态代理确实奏效了。上面我们已经简单提到过动态代理的原理，这里再简单的总结下：首先通过newProxyInstance方法获取代理类实例，而后我们便可以通过这个代理类实例调用代理类的方法，对代理类的方法的调用实际上都会调用中介类（调用处理器）的invoke方法，在invoke方法中我们调用委托类的相应方法，并且可以添加自己的处理逻辑。下面我们来看一下生成的代理类的代码究竟是怎样的。3 动态代理类的源码分析通过运行Main，我们会得到一个名为“$Proxy”的class文件，这个文件即为动态生成的代理类，我们通过反编译来查看下这个代理类的源代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586package com.sun.proxy;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.lang.reflect.Proxy;import java.lang.reflect.UndeclaredThrowableException;public final class $Proxy0 extends Proxy implements Sell &#123; //这5个Method对象分别代表equals()、toString()、ad()、sell()、hashCode()方法 private static Method m1; private static Method m2; private static Method m4; private static Method m3; private static Method m0; //构造方法接收一个InvocationHandler对象为参数，这个对象就是代理类的“直接委托类”（真正的委托类可以看做代理类的“间接委托类”） public $Proxy0(InvocationHandler var1) throws &#123; super（var1); &#125; //对equals方法的调用实际上转为对super.h.invoke方法的调用，父类中的h即为我们在构造方法中传入的InvocationHandler对象，以下的toString()、sell()、ad()、hashCode()等方法同理 public final boolean equals(Object var1) throws &#123; try &#123; return ((Boolean)super.h.invoke(this, m1, new Object[]&#123;var1&#125;)).booleanValue(); &#125; catch (RuntimeException | Error var3) &#123; throw var3; &#125; catch (Throwable var4) &#123; throw new UndeclaredThrowableException(var4); &#125; &#125; public final String toString() throws &#123; try &#123; return (String)super.h.invoke(this, m2, (Object[])null); &#125; catch (RuntimeException | Error var2) &#123; throw var2; &#125; catch (Throwable var3) &#123; throw new UndeclaredThrowableException(var3); &#125; &#125; public final void ad() throws &#123; try &#123; super.h.invoke(this, m4, (Object[])null); &#125; catch (RuntimeException | Error var2) &#123; throw var2; &#125; catch (Throwable var3) &#123; throw new UndeclaredThrowableException(var3); &#125; &#125; public final void sell() throws &#123; try &#123; super.h.invoke(this, m3, (Object[])null); &#125; catch (RuntimeException | Error var2) &#123; throw var2; &#125; catch (Throwable var3) &#123; throw new UndeclaredThrowableException(var3); &#125; &#125; public final int hashCode() throws &#123; try &#123; return ((Integer)super.h.invoke(this, m0, (Object[])null)).intValue(); &#125; catch (RuntimeException | Error var2) &#123; throw var2; &#125; catch (Throwable var3) &#123; throw new UndeclaredThrowableException(var3); &#125; &#125; //这里完成Method对象的初始化（通过反射在运行时获得Method对象） static &#123; try &#123; m1 = Class.forName(\"java.lang.Object\").getMethod(\"equals\", new Class[]&#123;Class.forName(\"java.lang.Object\")&#125;); m2 = Class.forName(\"java.lang.Object\").getMethod(\"toString\", new Class[0]); m4 = Class.forName(\"Sell\").getMethod(\"ad\", new Class[0]); m3 = Class.forName(\"Sell\").getMethod(\"sell\", new Class[0]); m0 = Class.forName(\"java.lang.Object\").getMethod(\"hashCode\", new Class[0]); &#125; catch (NoSuchMethodException var2) &#123; throw new NoSuchMethodError(var2.getMessage()); &#125; catch (ClassNotFoundException var3) &#123; throw new NoClassDefFoundError(var3.getMessage()); &#125; &#125;&#125;我们可以看到，以上代码的逻辑十分简单，我们在注释中也做出了相关的说明。（以上代码中涉及到反射的使用，对于反射还不是很熟悉的小伙伴可以参考这里：Java核心技术点之反射）转载自：https://www.cnblogs.com/absfree/p/5392639.html","categories":[{"name":"设计模式","slug":"设计模式","permalink":"https://oncevan/oncevan.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}],"tags":[{"name":"Java基础","slug":"Java基础","permalink":"https://oncevan/oncevan.github.io/tags/Java%E5%9F%BA%E7%A1%80/"},{"name":"设计模式","slug":"设计模式","permalink":"https://oncevan/oncevan.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}]},{"title":"SpringMVC","slug":"SpringMVC","date":"2020-05-25T14:20:29.000Z","updated":"2020-06-09T00:17:42.432Z","comments":true,"path":"2020/05/25/SpringMVC/","link":"","permalink":"https://oncevan/oncevan.github.io/2020/05/25/SpringMVC/","excerpt":"","text":"1 MVC说起SpringMVC就不得不先谈一下MVC框架模式：在我们实际开发的最后到产品上线，供给客户使用，客户通过浏览器或者app等进行数据的操作，实现这个的有，处理发送请求，业务逻辑处理以及访问数据库，这三个功能我们是可以放到一块使用的，但是如果放在一起，代码便会很臃肿，不利于维护，于是便出现了代码分层思想，把代码按照功能分为三层，即模型层(Model)、显示层(View)、控制层(Controller)，这种代码的组织架构就叫MVC框架模式！相信做过开发的同学对上面这种处理流程并不陌生，我们通常都会编写Controller处理前端发来的请求，接着调用Service方法来实现业务方面的流程，接着调用Dao层处理数据…2 SpringMVC和MVC有什么关系？Spring MVC是一个基于Java的实现了MVC设计模式的请求驱动类型的轻量级Web框架，通过把Model，View，Controller分离，将web层进行职责解耦，把复杂的web应用分成逻辑清晰的几部分，简化开发，减少出错，方便组内开发人员之间的配合。下面是SpringMVC的处理流程：（1）用户发送请求至前端控制器DispatcherServlet；（2） DispatcherServlet收到请求后，调用HandlerMapping处理器映射器，请求获取Handle；（3）处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet；（4）DispatcherServlet 调用 HandlerAdapter处理器适配器；（5）HandlerAdapter 经过适配调用 具体处理器(Handler，也叫后端控制器)；（6）Handler执行完成返回ModelAndView；（7）HandlerAdapter将Handler执行结果ModelAndView返回给DispatcherServlet；（8）DispatcherServlet将ModelAndView传给ViewResolver视图解析器进行解析；（9）ViewResolver解析后返回具体View；（10）DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）（11）DispatcherServlet响应用户。3 SpringMVC有什么优点呢？可以支持各种视图技术,而不仅仅局限于JSP；与Spring框架集成（如IoC容器、AOP等）；清晰的角色分配：前端控制器(dispatcherServlet) , 请求到处理器映射（handlerMapping), 处理器适配器（HandlerAdapter), 视图解析器（ViewResolver）。支持各种请求资源的映射策略。4 与其他MVC实现的框架如Struts2的区别？SpringMVC的入口是一个servlet即前端控制器（DispatchServlet），而struts2入口是一个filter过虑器（StrutsPrepareAndExecuteFilter）。SpringMVC是基于方法开发(一个url对应一个方法)，请求参数传递到方法的形参，可以设计为单例或多例(建议单例)，struts2是基于类开发，传递参数是通过类的属性，只能设计为多例。Struts采用值栈存储请求和响应的数据，通过OGNL存取数据，SpringMVC通过参数解析器是将request请求内容解析，并给方法形参赋值，将数据和视图封装成ModelAndView对象，最后又将ModelAndView中的模型数据通过reques域传输到页面。Jsp视图解析器默认使用jstl。参考链接：https://blog.csdn.net/a745233700/article/details/80963758","categories":[{"name":"SpringMVC","slug":"SpringMVC","permalink":"https://oncevan/oncevan.github.io/categories/SpringMVC/"}],"tags":[{"name":"SpringMVC","slug":"SpringMVC","permalink":"https://oncevan/oncevan.github.io/tags/SpringMVC/"}]},{"title":"MyBatis一级缓存","slug":"MyBatis一级缓存","date":"2020-05-23T12:40:13.000Z","updated":"2020-06-09T00:15:58.590Z","comments":true,"path":"2020/05/23/MyBatis一级缓存/","link":"","permalink":"https://oncevan/oncevan.github.io/2020/05/23/MyBatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98/","excerpt":"0 写在前面MyBatis是一个简单，小巧但功能非常强大的ORM开源框架，它的功能强大也体现在它的缓存机制上。MyBatis提供了一级缓存、二级缓存 这两个缓存机制，能够很好地处理和维护缓存，以提高系统的性能。本文的目的则是向读者详细介绍MyBatis的一级缓存，深入源码，解析MyBatis一级缓存的实现原理，并且针对一级缓存的特点提出了在实际使用过程中应该注意的事项。本文主要讨论5个问题：1、什么是一级缓存？为什么使用一级缓存？2、MyBatis的一级缓存是怎样组织的？（即SqlSession对象中的缓存是怎样组织的？）3、一级缓存的生命周期有多长？4、Cache接口的设计以及CacheKey的定义5、一级缓存的性能分析以及应该注意的事项","text":"0 写在前面MyBatis是一个简单，小巧但功能非常强大的ORM开源框架，它的功能强大也体现在它的缓存机制上。MyBatis提供了一级缓存、二级缓存 这两个缓存机制，能够很好地处理和维护缓存，以提高系统的性能。本文的目的则是向读者详细介绍MyBatis的一级缓存，深入源码，解析MyBatis一级缓存的实现原理，并且针对一级缓存的特点提出了在实际使用过程中应该注意的事项。本文主要讨论5个问题：1、什么是一级缓存？为什么使用一级缓存？2、MyBatis的一级缓存是怎样组织的？（即SqlSession对象中的缓存是怎样组织的？）3、一级缓存的生命周期有多长？4、Cache接口的设计以及CacheKey的定义5、一级缓存的性能分析以及应该注意的事项1 什么是一级缓存？ 为什么使用一级缓存？对于会话（Session）级别的数据缓存，我们称之为一级数据缓存，简称一级缓存。每当我们使用MyBatis开启一次和数据库的会话，MyBatis会创建出一个SqlSession对象表示一次数据库会话。在对数据库的一次会话中，我们有可能会反复地执行完全相同的查询语句，如果不采取一些措施的话，每一次查询都会查询一次数据库,而我们在极短的时间内做了完全相同的查询，那么它们的结果极有可能完全相同，由于查询一次数据库的代价很大，这有可能造成很大的资源浪费。为了解决这一问题，减少资源的浪费，MyBatis会在表示会话的SqlSession对象中建立一个简单的缓存，将每次查询到的结果结果缓存起来，当下次查询的时候，如果判断先前有个完全一样的查询，会直接从缓存中直接将结果取出，返回给用户，不需要再进行一次数据库查询了。如下图所示，MyBatis会在一次会话的表示—-一个SqlSession对象中创建一个本地缓存(local cache)，对于每一次查询，都会尝试根据查询的条件去本地缓存中查找是否在缓存中，如果在缓存中，就直接从缓存中取出，然后返回给用户；否则，从数据库读取数据，将查询结果存入缓存并返回给用户。2 MyBatis中的一级缓存是怎样组织的？（即SqlSession中的缓存是怎样组织的？）由于MyBatis使用SqlSession对象表示一次数据库的会话，那么，对于会话级别的一级缓存也应该是在SqlSession中控制的。实际上, MyBatis只是一个MyBatis对外的接口，SqlSession将它的工作交给了Executor执行器这个角色来完成，负责完成对数据库的各种操作。当创建了一个SqlSession对象时，MyBatis会为这个SqlSession对象创建一个新的Executor执行器，而缓存信息就被维护在这个Executor执行器中，MyBatis将缓存和对缓存相关的操作封装成了Cache接口中。SqlSession、Executor、Cache之间的关系如下列类图所示：如上述的类图所示，Executor接口的实现类BaseExecutor中拥有一个Cache接口的实现类key，则对于BaseExecutor对象而言，它将使用key对象维护缓存。综上，SqlSession对象、Executor对象、Cache对象之间的关系如下图所示：由于Session级别的一级缓存实际上就是使用key维护的，那么key是怎样实现的呢？来实现的，没有其他的任何限制。如下是```key```的实现代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768&#96;&#96;&#96;javapackage org.apache.ibatis.cache.impl; import java.util.HashMap;import java.util.Map;import java.util.concurrent.locks.ReadWriteLock; import org.apache.ibatis.cache.Cache;import org.apache.ibatis.cache.CacheException; &#x2F;** * 使用简单的HashMap来维护缓存 * @author Clinton Begin *&#x2F;public class &#96;&#96;key&#96;&#96; implements Cache &#123; private String id; private Map&lt;Object, Object&gt; cache &#x3D; new HashMap&lt;Object, Object&gt;(); public &#96;&#96;key&#96;&#96;(String id) &#123; this.id &#x3D; id; &#125; public String getId() &#123; return id; &#125; public int getSize() &#123; return cache.size(); &#125; public void putObject(Object key, Object value) &#123; cache.put(key, value); &#125; public Object getObject(Object key) &#123; return cache.get(key); &#125; public Object removeObject(Object key) &#123; return cache.remove(key); &#125; public void clear() &#123; cache.clear(); &#125; public ReadWriteLock getReadWriteLock() &#123; return null; &#125; public boolean equals(Object o) &#123; if (getId() &#x3D;&#x3D; null) throw new CacheException(&quot;Cache instances require an ID.&quot;); if (this &#x3D;&#x3D; o) return true; if (!(o instanceof Cache)) return false; Cache otherCache &#x3D; (Cache) o; return getId().equals(otherCache.getId()); &#125; public int hashCode() &#123; if (getId() &#x3D;&#x3D; null) throw new CacheException(&quot;Cache instances require an ID.&quot;); return getId().hashCode(); &#125; &#125;3 一级缓存的生命周期有多长？MyBatis在开启一个数据库会话时，会 创建一个新的SqlSession对象，SqlSession对象中会有一个新的Executor对象，Executor对象中持有一个新的key对象；当会话结束时，SqlSession对象及其内部的Executor对象还有key对象也一并释放掉。如果SqlSession调用了close()方法，会释放掉一级缓存key对象，一级缓存将不可用；如果SqlSession调用了clearCache()，会清空key对象中的数据，但是该对象仍可使用；SqlSession中执行了任何一个update操作(update()、delete()、insert()) ，都会清空key对象的数据，但是该对象可以继续使用；4 SqlSession 一级缓存的工作流程对于某个查询，根据statementId,params,rowBounds来构建一个key值，根据这个key值去缓存Cache中取出对应的key值存储的缓存结果；判断从Cache中根据特定的key值取的数据数据是否为空，即是否命中；如果命中，则直接将缓存结果返回；如果没命中：4.1 去数据库中查询数据，得到查询结果；4.2 将key和查询到的结果分别作为key,value对存储到Cache中；4.3. 将查询结果返回；结束。5 Cache接口的设计以及CacheKey的定义（非常重要）如下图所示，MyBatis定义了一个org.apache.ibatis.cache.Cache接口作为其Cache提供者的SPI(Service Provider Interface) ，所有的MyBatis内部的Cache缓存，都应该实现这一接口。MyBatis定义了一个key实现类实现了Cache接口，实际上，在SqlSession对象里的Executor 对象内维护的Cache类型实例对象，就是key子类创建的。（MyBatis内部还有很多Cache接口的实现，一级缓存只会涉及到这一个key子类，Cache的其他实现将会放到二级缓存中介绍）。我们知道，Cache最核心的实现其实就是一个Map，将本次查询使用的特征值作为key，将查询结果作为value存储到Map中。现在最核心的问题出现了：怎样来确定一次查询的特征值？换句话说就是：怎样判断某两次查询是完全相同的查询？也可以这样说：如何确定Cache中的key值？MyBatis认为，对于两次查询，如果以下条件都完全一样，那么就认为它们是完全相同的两次查询：传入的 statementId查询时要求的结果集中的结果范围 （结果的范围通过rowBounds.offset和rowBounds.limit表示）；这次查询所产生的最终要传递给JDBC java.sql.Preparedstatement的Sql语句字符串（boundSql.getSql() ）传递给java.sql.Statement要设置的参数值现在分别解释上述四个条件：传入的statementId，对于MyBatis而言，你要使用它，必须需要一个statementId，它代表着你将执行什么样的Sql；MyBatis自身提供的分页功能是通过RowBounds来实现的，它通过rowBounds.offset和rowBounds.limit来过滤查询出来的结果集，这种分页功能是基于查询结果的再过滤，而不是进行数据库的物理分页；由于MyBatis底层还是依赖于JDBC实现的，那么，对于两次完全一模一样的查询，MyBatis要保证对于底层JDBC而言，也是完全一致的查询才行。而对于JDBC而言，两次查询，只要传入给JDBC的SQL语句完全一致，传入的参数也完全一致，就认为是两次查询是完全一致的。上述的第3个条件正是要求保证传递给JDBC的SQL语句完全一致；第4条则是保证传递给JDBC的参数也完全一致；3、4讲的有可能比较含糊，举一个例子：12345678&lt;select id=\"selectByCritiera\" parameterType=\"java.util.Map\" resultMap=\"BaseResultMap\"&gt; select employee_id,first_name,last_name,email,salary from louis.employees where employee_id = #&#123;employeeId&#125; and first_name= #&#123;firstName&#125; and last_name = #&#123;lastName&#125; and email = #&#123;email&#125;&lt;/select&gt;如果使用上述的”selectByCritiera”进行查询，那么，MyBatis会将上述的SQL中的#{} 都替换成 ? 如下：123456select employee_id,first_name,last_name,email,salary from louis.employees where employee_id = ? and first_name= ? and last_name = ? and email = ?MyBatis最终会使用上述的SQL字符串创建JDBC的java.sql.PreparedStatement对象，对于这个PreparedStatement对象，还需要对它设置参数，调用setXXX()来完成设值，第4条的条件，就是要求对设置JDBC的PreparedStatement的参数值也要完全一致。即3、4两条MyBatis最本质的要求就是：调用JDBC的时候，传入的SQL语句要完全相同，传递给JDBC的参数值也要完全相同。​综上所述,CacheKey由以下条件决定：statementId + rowBounds + 传递给JDBC的SQL + 传递给JDBC的参数值CacheKey的创建对于每次的查询请求，Executor都会根据传递的参数信息以及动态生成的SQL语句，将上面的条件根据一定的计算规则，创建一个对应的CacheKey对象。我们知道创建CacheKey的目的，就两个：根据CacheKey作为key,去Cache缓存中查找缓存结果；如果查找缓存命中失败，则通过此CacheKey作为key，将从数据库查询到的结果作为value，组成key,value对存储到Cache缓存中。CacheKey的构建被放置到了Executor接口的实现类BaseExecutor中，定义如下：123456789101112131415161718192021222324252627282930313233343536373839/** * 所属类: org.apache.ibatis.executor.BaseExecutor * 功能 : 根据传入信息构建CacheKey */public CacheKey createCacheKey(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql) &#123; if (closed) throw new ExecutorException(\"Executor was closed.\"); CacheKey cacheKey = new CacheKey(); //1.statementId cacheKey.update(ms.getId()); //2. rowBounds.offset cacheKey.update(rowBounds.getOffset()); //3. rowBounds.limit cacheKey.update(rowBounds.getLimit()); //4. SQL语句 cacheKey.update(boundSql.getSql()); //5. 将每一个要传递给JDBC的参数值也更新到CacheKey中 List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings(); TypeHandlerRegistry typeHandlerRegistry = ms.getConfiguration().getTypeHandlerRegistry(); for (int i = 0; i &lt; parameterMappings.size(); i++) &#123; // mimic DefaultParameterHandler logic ParameterMapping parameterMapping = parameterMappings.get(i); if (parameterMapping.getMode() != ParameterMode.OUT) &#123; Object value; String propertyName = parameterMapping.getProperty(); if (boundSql.hasAdditionalParameter(propertyName)) &#123; value = boundSql.getAdditionalParameter(propertyName); &#125; else if (parameterObject == null) &#123; value = null; &#125; else if (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) &#123; value = parameterObject; &#125; else &#123; MetaObject metaObject = configuration.newMetaObject(parameterObject); value = metaObject.getValue(propertyName); &#125; //将每一个要传递给JDBC的参数值也更新到CacheKey中 cacheKey.update(value); &#125; &#125; return cacheKey;&#125;CacheKey的hashcode生成算法刚才已经提到，Cache接口的实现，本质上是使用的HashMap&lt;k,v&gt;,而构建CacheKey的目的就是为了作为HashMap&lt;k,v&gt;中的key值。而HashMap是通过key值的hashcode 来组织和存储的，那么，构建CacheKey的过程实际上就是构造其hashCode的过程。下面的代码就是CacheKey的核心hashcode生成算法，感兴趣的话可以看一下：12345678910111213141516171819202122232425 public void update(Object object) &#123; if (object != null &amp;&amp; object.getClass().isArray()) &#123; int length = Array.getLength(object); for (int i = 0; i &lt; length; i++) &#123; Object element = Array.get(object, i); doUpdate(element); &#125; &#125; else &#123; doUpdate(object); &#125; &#125; private void doUpdate(Object object) &#123;//1. 得到对象的hashcode; int baseHashCode = object == null ? 1 : object.hashCode(); //对象计数递增 count++; checksum += baseHashCode; //2. 对象的hashcode 扩大count倍 baseHashCode *= count; //3. hashCode * 拓展因子（默认37）+拓展扩大后的对象hashCode值 hashcode = multiplier * hashcode + baseHashCode; updateList.add(object); &#125;一级缓存的性能分析我将从两个 一级缓存的特性来讨论SqlSession的一级缓存性能问题：1.MyBatis对会话（Session）级别的一级缓存设计的比较简单，就简单地使用了HashMap来维护，并没有对HashMap的容量和大小进行限制。读者有可能就觉得不妥了：如果我一直使用某一个SqlSession对象查询数据，这样会不会导致HashMap太大，而导致 java.lang.OutOfMemoryError错误啊？ 读者这么考虑也不无道理，不过MyBatis的确是这样设计的。MyBatis这样设计也有它自己的理由：a. 一般而言SqlSession的生存时间很短。一般情况下使用一个SqlSession对象执行的操作不会太多，执行完就会消亡；b. 对于某一个SqlSession对象而言，只要执行update操作（update、insert、delete），都会将这个SqlSession对象中对应的一级缓存清空掉，所以一般情况下不会出现缓存过大，影响JVM内存空间的问题；c. 可以手动地释放掉SqlSession对象中的缓存。2.一级缓存是一个粗粒度的缓存，没有更新缓存和缓存过期的概念MyBatis的一级缓存就是使用了简单的HashMap，MyBatis只负责将查询数据库的结果存储到缓存中去， 不会去判断缓存存放的时间是否过长、是否过期，因此也就没有对缓存的结果进行更新这一说了。根据一级缓存的特性，在使用的过程中，我认为应该注意：1、对于数据变化频率很大，并且需要高时效准确性的数据要求，我们使用SqlSession查询的时候，要控制好SqlSession的生存时间，SqlSession的生存时间越长，它其中缓存的数据有可能就越旧，从而造成和真实数据库的误差；同时对于这种情况，用户也可以手动地适时清空SqlSession中的缓存；2、对于只执行、并且频繁执行大范围的select操作的SqlSession对象，SqlSession对象的生存时间不应过长。举例：例1、看下面这个例子，下面的例子使用了同一个SqlSession指令了两次完全一样的查询，将两次查询所耗的时间打印出来，结果如下：123456789101112131415161718192021222324252627282930import com.louis.**MyBatis**.model.Employee; /** * SqlSession 简单查询演示类 * @author louluan */public class SelectDemo1 &#123; private static final Logger loger = Logger.getLogger(SelectDemo1.class); public static void main(String[] args) throws Exception &#123; InputStream inputStream = Resources.getResourceAsStream(\"mybatisConfig.xml\"); SqlSessionFactoryBuilder builder = new SqlSessionFactoryBuilder(); SqlSessionFactory factory = builder.build(inputStream); SqlSession sqlSession = factory.openSession(); //3.使用SqlSession查询 Map&lt;String,Object&gt; params = new HashMap&lt;String,Object&gt;(); params.put(\"min_salary\",10000); //a.查询工资低于10000的员工 Date first = new Date(); //第一次查询 List&lt;Employee&gt; result = sqlSession.selectList(\"com.louis.**MyBatis**.dao.EmployeesMapper.selectByMinSalary\",params); loger.info(\"first quest costs:\"+ (new Date().getTime()-first.getTime()) +\" ms\"); Date second = new Date(); result = sqlSession.selectList(\"com.louis.**MyBatis**.dao.EmployeesMapper.selectByMinSalary\",params); loger.info(\"second quest costs:\"+ (new Date().getTime()-second.getTime()) +\" ms\"); &#125; &#125;运行结果：由上面的结果你可以看到，第一次查询耗时464ms，而第二次查询耗时不足1ms,这是因为第一次查询后，MyBatis会将查询结果存储到SqlSession对象的缓存中，当后来有完全相同的查询时，直接从缓存中将结果取出。例2、对上面的例子做一下修改：在第二次调用查询前，对参数 HashMap类型的params多增加一些无关的值进去，然后再执行，看查询结果：从结果上看，虽然第二次查询时传递的params参数不一致，但还是从一级缓存中取出了第一次查询的缓存。读到这里，请大家晓得这一个问题：MyBatis认为的完全相同的查询，不是指使用SqlSession查询时传递给算起来Session的所有参数值完完全全相同，你只要保证statementId，rowBounds,最后生成的SQL语句，以及这个SQL语句所需要的参数完全一致就可以了。觉得本文不错，顺手点个赞哦～～您的鼓励，是我继续分享知识的强大动力！转载自：http://blog.csdn.net/luanlouis/原文链接：https://blog.csdn.net/luanlouis/article/details/41280959","categories":[{"name":"MyBatis","slug":"MyBatis","permalink":"https://oncevan/oncevan.github.io/categories/MyBatis/"}],"tags":[{"name":"MyBatis","slug":"MyBatis","permalink":"https://oncevan/oncevan.github.io/tags/MyBatis/"}]},{"title":"MyBatis概览","slug":"MyBatis","date":"2020-05-19T12:39:21.000Z","updated":"2020-06-09T00:14:34.130Z","comments":true,"path":"2020/05/19/MyBatis/","link":"","permalink":"https://oncevan/oncevan.github.io/2020/05/19/MyBatis/","excerpt":"1 MyBatis与JDBC1.1 jdbc编程步骤1、 加载数据库驱动2、 创建并获取数据库链接3、 创建jdbcstatement对象","text":"1 MyBatis与JDBC1.1 jdbc编程步骤1、 加载数据库驱动2、 创建并获取数据库链接3、 创建jdbcstatement对象4、 设置sql语句5、 设置sql语句中的参数(使用preparedStatement)6、 通过statement执行sql并获取结果7、 对sql执行结果进行解析处理8、 释放资源(resultSet、preparedstatement、connection)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import java.sql.*;public class d_ResultSet &#123; public static void main(String[] args) &#123; Connection conn=null; PreparedStatement ps=null; ResultSet rs=null; try &#123; Class.forName(\"com.mysql.jdbc.Driver\"); conn=DriverManager. getConnection(\"jdbc:mysql://localhost:3307/TestJdbc\",\"root\",\"123456\"); String sql=\"select id,username,pwd from t_user where id&gt;?\"; ps=conn.prepareStatement(sql); ps.setObject(1, 2); //把id大于2的记录都取出来 rs=ps.executeQuery();//ps.executeQuery() 执行并返回结果集 while(rs.next()) &#123;//rs.next()指向第一条 //getInt() 传入的参数是列索引 System.out.println(rs.getInt(1)+\"---\"+rs.getString(2)+\"---\"+rs.getString(3)); &#125; &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125;finally&#123; if(rs!=null)&#123; try &#123; rs.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; if(ps!=null)&#123; try &#123; ps.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; if(conn!=null)&#123; try &#123; conn.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125; &#125;1.2 JDBC问题总结数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库链接池可解决此问题。Sql语句在代码中硬编码，造成代码不易维护，实际应用sql变化的可能较大，sql变动需要改变Java代码。使用preparedStatement向占有位符号传参数存在硬编码，因为sql语句的where条件不一定，可能多也可能少，修改sql还要修改代码，系统不易维护。对结果集解析存在硬编码（查询列名），sql变化导致解析代码变化，系统不易维护，如果能将数据库记录封装成pojo对象解析比较方便。1.3 MyBatis介绍MyBatis 本是apache的一个开源项目iBatis， 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis，实质上MyBatis对ibatis进行一些改进。MyBatis是一个优秀的持久层框架，它对JDBC的操作数据库的过程进行封装，使开发者只需要关注 SQL 本身，而不需要花费精力去处理例如注册驱动、创建connection、创建statement、手动设置参数、结果集检索等jdbc繁杂的过程代码。MyBatis通过xml或注解的方式将要执行的各种statement（statement、preparedStatemnt、CallableStatement）配置起来，并通过java对象和statement中的sql进行映射生成最终执行的sql语句，最后由MyBatis框架执行sql并将结果映射成java对象并返回。1.4 MyBatis对JDBC的优化JDBC是Java提供的一个操作数据库的API； MyBatis是一个持久层ORM（对象关系映射Object relational Mapping）框架，底层是对JDBC的封装。MyBatis对JDBC操作数据库做了一系列的优化：MyBatis使用已有的连接池管理，避免浪费资源，提高程序可靠性。MyBatis提供插件自动生成DAO层代码，提高编码效率和准确性。MyBatis 提供了一级和二级缓存，提高了程序性能。MyBatis使用动态SQL语句，提高了SQL维护。（此优势是基于XML配置）MyBatis对数据库操作结果进行自动映射1.5 动态代理在MyBatis中的应用mybatis最令人印象深刻的特性恐怕就是interface与mapper的映射了。开发者只需要声明接口，并编写对应在xml中的sql，一个可以提供服务的dao层功能就完成了，竟然不需要编写interface的实现类。这个感觉起来非常神奇也令人疑惑不解的特性正是利用jdk的动态代理技术实现的。事实上，mybatis内部使用了多种动态代理技术，包括jdk自带、javassist、cglib等，参考链接：https://blog.csdn.net/joenqc/article/details/802336372 Mybatis工作原理流程解析：mybatis应用程序通过SqlSessionFactoryBuilder从mybatis-config.xml配置文件（也可以用Java文件配置的方式，需要添加@Configuration）来构建SqlSessionFactory（SqlSessionFactory是线程安全的）；然后，SqlSessionFactory的实例直接开启一个SqlSession，再通过SqlSession实例获得Mapper对象并运行Mapper映射的SQL语句，完成对数据库的CRUD和事务提交，之后关闭SqlSession。说明：SqlSession是单线程对象，因为它是非线程安全的，是持久化操作的独享对象，类似jdbc中的Connection，底层就封装了jdbc连接。详细流程如下：加载mybatis全局配置文件（数据源、mapper映射文件等），解析配置文件，MyBatis基于XML配置文件生成Configuration，和一个个MappedStatement（包括了参数映射配置、动态SQL语句、结果映射配置），其对应着&lt;select | update | delete | insert&gt;标签项。SqlSessionFactoryBuilder通过Configuration对象生成SqlSessionFactory，用来开启SqlSession。SqlSession对象完成和数据库的交互：用户程序调用mybatis接口层api（即Mapper接口中的方法）SqlSession通过调用api的Statement ID找到对应的MappedStatement对象通过Executor（负责动态SQL的生成和查询缓存的维护）将MappedStatement对象进行解析，sql参数转化、动态sql拼接，生成jdbc Statement对象 Executor接口有两个实现，一个是基本执行器、一个是缓存执行器。JDBC执行sql。借助MappedStatement中的结果映射关系，将返回结果转化成HashMap、JavaBean等存储结构并返回。参考链接：https://blog.csdn.net/u014745069/article/details/807881273 Tips3.1 #{}和${}的区别是什么？#{}是预编译处理，${}是字符串替换。MyBatis在处理#{}时，会将sql中的#{}替换为?号，调用PreparedStatement的set方法来赋值；MyBatis在处理${}时，就是把${}替换成变量的值，相当于直接显示数据。使用#{}可以有效的防止SQL注入，提高系统安全性。不是所有情况都是需要使用#，比如order by和%like%的时候需要使用${}。参考：https://blog.csdn.net/m0_37627053/article/details/80584239https://blog.csdn.net/weixin_40939471/article/details/976290243.2 statement和 prestatement比较1.后者的安全性较高，可以防止sql注入。2.后者先经过编译，效率较高3.3 parameterType和resultTypeparameterType：指定输入参数类型，mybatis通过ognl从输入对象中获取参数值拼接在sql中。resultType：指定输出结果类型，mybatis将sql查询结果的一行记录数据映射为resultType指定类型的对象。3.4 selectOne和selectList动态代理对象调用sqlSession.selectOne() 和 sqlSession.selectList()是根据mapper接口方法的返回值决定，如果返回list则调用selectList方法，如果返回单个对象则调用selectOne方法。3.5 Mapper方法最终是如何执行的Mapper 接口在初始SqlSessionFactory 注册的。Mapper 接口注册在了名为 MapperRegistry 类的 HashMap中， key = Mapper class value = 创建当前Mapper的工厂。Mapper 注册之后，可以从SqlSession中getSqlSession.getMapper 运用了 JDK动态代理，产生了目标Mapper接口的代理对象。动态代理的 代理类是 MapperProxy ，这里边最终完成了增删改查方法的调用。3.6 MyBatis与Hibernate有哪些不同？Mybatis和hibernate不同，它不完全是一个ORM框架，因为MyBatis需要程序员自己编写Sql语句。Mybatis直接编写原生态sql，可以严格控制sql执行性能，灵活度高，非常适合对关系数据模型要求不高的软件开发，因为这类软件需求变化频繁，一但需求变化要求迅速输出成果。但是灵活的前提是mybatis无法做到数据库无关性，如果需要实现支持多种数据库的软件，则需要自定义多套sql映射文件，工作量大。Hibernate对象/关系映射能力强，数据库无关性好，对于关系模型要求高的软件，如果用hibernate开发可以节省很多代码，提高效率。3.7 为什么说Mybatis是半自动ORM映射工具？Hibernate属于全自动ORM映射工具，使用Hibernate查询关联对象或者关联集合对象时，可以根据对象关系模型直接获取，所以它是全自动的。而Mybatis在查询关联对象或关联集合对象时，需要手动编写sql来完成，所以，称之为半自动ORM映射工具。3.8 如何获取自动生成的(主)键值?insert 方法总是返回一个int值 ，这个值代表的是插入的行数。如果采用自增长策略，自动生成的键值在 insert 方法执行完后可以被设置到传入的参数对象中。usegeneratedkeys=”true” keyproperty=”id”3.9 使用MyBatis的mapper接口调用时有哪些要求？Mapper接口方法名和mapper.xml中定义的每个sql的id相同；Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql 的parameterType的类型相同；Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同；Mapper.xml文件中的namespace即是mapper接口的类路径。3.10 和spring使用一级缓存失效spring结合mybatis后，一级缓存作用：在未开启事物的情况之下，每次查询，spring都会关闭旧的sqlSession而创建新的sqlSession,因此此时的一级缓存是没有启作用的我们需要访问数据spring检查到了这种需求，于是去申请一个mybatis的sqlsession（资源池），并将申请到的sqlsession与当前线程绑定，放入threadlocal里面sqlSessionTemplate从threadlocal获取到sqlsession，去执行查询查询结束，清空threadlocal中与当前线程绑定的sqlsession，释放资源我们又需要访问数据返回到步骤2在开启事物的情况之下，spring使用threadLocal获取当前资源绑定同一个sqlSession，因此此时一级缓存是有效的getSqlSession方法里面维护了个SqlSessionHolder，关联了事务与session，如果存在则直接取出，否则则新建个session，所以在有事务的里，每个session都是同一个，故能用上缓存了3.10 一对一、一对多关联查询在resultMap标签中，使用association标签123456789101112131415161718192021222324252627282930313233343536&lt;mapper namespace=\"com.lcb.mapping.userMapper\"&gt; &lt;!--association 一对一关联查询 --&gt; &lt;select id=\"getClass\" parameterType=\"int\" resultMap=\"ClassesResultMap\"&gt; select * from class c,teacher t where c.teacher_id=t.t_id and c.c_id=#&#123;id&#125; &lt;/select&gt; &lt;resultMap type=\"com.lcb.user.Classes\" id=\"ClassesResultMap\"&gt; &lt;!-- 实体类的字段名和数据表的字段名映射 --&gt; &lt;id property=\"id\" column=\"c_id\"/&gt; &lt;result property=\"name\" column=\"c_name\"/&gt; &lt;association property=\"teacher\" javaType=\"com.lcb.user.Teacher\"&gt; &lt;id property=\"id\" column=\"t_id\"/&gt; &lt;result property=\"name\" column=\"t_name\"/&gt; &lt;/association&gt; &lt;/resultMap&gt; &lt;!--collection 一对多关联查询 --&gt; &lt;select id=\"getClass2\" parameterType=\"int\" resultMap=\"ClassesResultMap2\"&gt; select * from class c,teacher t,student s where c.teacher_id=t.t_id and c.c_id=s.class_id and c.c_id=#&#123;id&#125; &lt;/select&gt; &lt;resultMap type=\"com.lcb.user.Classes\" id=\"ClassesResultMap2\"&gt; &lt;id property=\"id\" column=\"c_id\"/&gt; &lt;result property=\"name\" column=\"c_name\"/&gt; &lt;association property=\"teacher\" javaType=\"com.lcb.user.Teacher\"&gt; &lt;id property=\"id\" column=\"t_id\"/&gt; &lt;result property=\"name\" column=\"t_name\"/&gt; &lt;/association&gt; &lt;collection property=\"student\" ofType=\"com.lcb.user.Student\"&gt; &lt;id property=\"id\" column=\"s_id\"/&gt; &lt;result property=\"name\" column=\"s_name\"/&gt; &lt;/collection&gt; &lt;/resultMap&gt; &lt;/mapper&gt;参考链接：https://blog.csdn.net/u014745069/article/details/80788127https://blog.csdn.net/qq_41877184/article/details/93394718https://blog.csdn.net/qq_30225725/article/details/88074408https://blog.csdn.net/a745233700/article/details/80977133https://blog.csdn.net/Wang_huanA/article/details/88072367https://blog.csdn.net/a745233700/article/details/80977133","categories":[{"name":"MyBatis","slug":"MyBatis","permalink":"https://oncevan/oncevan.github.io/categories/MyBatis/"}],"tags":[{"name":"MyBatis","slug":"MyBatis","permalink":"https://oncevan/oncevan.github.io/tags/MyBatis/"}]},{"title":"AQS","slug":"AQS","date":"2020-05-17T12:39:21.000Z","updated":"2020-06-09T00:10:08.530Z","comments":true,"path":"2020/05/17/AQS/","link":"","permalink":"https://oncevan/oncevan.github.io/2020/05/17/AQS/","excerpt":"AQS三要素1、state状态这里state的具体含义，会根据具体实现类的不同而不同，比如在Semaphore里，它表示“剩余许可证的数量”，而在CountDownLatch里，它表示“还需要倒数的数量”state是volatile修饰的，会被并发地修改，所以所有修改state地方法都需要保证线程安全，比如getState，setState以及compareAndSetState操作来读取和更新这个状态。这些方法都依赖于j.u.c.atomic包的支持在ReentrantLock中，state用来表示“锁”的占有情况，包括可重入计数，当state的值为0的时候，标识改Lock不被任何线程所占有，其他线程就可以来占有","text":"AQS三要素1、state状态这里state的具体含义，会根据具体实现类的不同而不同，比如在Semaphore里，它表示“剩余许可证的数量”，而在CountDownLatch里，它表示“还需要倒数的数量”state是volatile修饰的，会被并发地修改，所以所有修改state地方法都需要保证线程安全，比如getState，setState以及compareAndSetState操作来读取和更新这个状态。这些方法都依赖于j.u.c.atomic包的支持在ReentrantLock中，state用来表示“锁”的占有情况，包括可重入计数，当state的值为0的时候，标识改Lock不被任何线程所占有，其他线程就可以来占有2、FIFO队列（控制线程抢锁和配合）这个队列用来存放“等待的线程”，AQS就是“排队管理器”，当多个线程争用同一把锁时，必须有排队机制将那些没能拿到锁的线程串在一起。当锁释放时，锁管理器就会挑选一个合适的线程来占有这个刚释放的锁AQS会维护一个等待的线程队列，把线程都放到这个队列里，这个队列是个双向链表的形式3、期望协作工具类去实现的获取/释放等重要方法这里的获取和释放方法，是利用AQS的协作工具类里最重要的方法，是由协作类自己去实现的，并且含义各不相同获取方法获取操作会依赖state变量，经常会阻塞（比如获取不到锁的时候）在Semaphore中，获取就是acquire方法，作用是获取一个许可证而在CountDownLatch里面，获取就是await方法，作用是“等待，直到倒数结束”释放方法释放操作不会阻塞在Semaphore中，释放就是release方法，作用是释放一个许可证CountDownLatch里面，获取就是countDown方法，作用就是“倒数1个数”AQS源码分析1、AQS用法写一个类，想好协作的逻辑，实现获取/释放方法（比如Semaphore的逻辑就是许可证的分发）内部写一个Sync继承AbstractQueuedSynchronizer根据是否独占来重写tryAcquire/tryRelease 或 tryAcquireShared(int acquires) /tryReleaseShared(int releases) 等方法，在之前写的获取/释放方法中调用AQS的acquire/release或者Shared方法2、AQS在CountDownLatch的运用总结（源码分析已省略）调用CountDownLatch的await方法时，便会尝试获取“共享锁”，不过一开始是获取不到该锁的，于是线程被阻塞而“共享锁”可获取到的条件，就是“锁计数器”的值为0而“锁计数器”的初始值为count，每当一个线程调用该CountDownLatch的对象countDown()方法时，才将“锁计数器”-13、AQS在Semaphore中的运用彩蛋【Java技术之AQS详解】https://www.jianshu.com/p/da9d051dcc3d【Java开发之AQS详解】https://www.cnblogs.com/waterystone/p/4920797.html","categories":[{"name":"J.U.C","slug":"J-U-C","permalink":"https://oncevan/oncevan.github.io/categories/J-U-C/"}],"tags":[{"name":"多线程与并发","slug":"多线程与并发","permalink":"https://oncevan/oncevan.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91/"},{"name":"J.U.C","slug":"J-U-C","permalink":"https://oncevan/oncevan.github.io/tags/J-U-C/"}]},{"title":"线程协作","slug":"线程协作","date":"2020-05-15T14:22:13.000Z","updated":"2020-06-09T00:34:36.854Z","comments":true,"path":"2020/05/15/线程协作/","link":"","permalink":"https://oncevan/oncevan.github.io/2020/05/15/%E7%BA%BF%E7%A8%8B%E5%8D%8F%E4%BD%9C/","excerpt":"1、控制并发流程1.1、什么是控制并发流程控制并发流程的工具类，作用就是帮助我们程序员更容易的让线程之间合作让线程之间相互配合，来满足业务逻辑比如让线程A等待线程B执行完毕后再执行等合作策略","text":"1、控制并发流程1.1、什么是控制并发流程控制并发流程的工具类，作用就是帮助我们程序员更容易的让线程之间合作让线程之间相互配合，来满足业务逻辑比如让线程A等待线程B执行完毕后再执行等合作策略1.2、控制并发流程的工具类CountDownLatch字面解读：倒数门闩例子：购物拼团满人后才能购买；大巴满人发车流程：倒数结束之前，一直处于等待状态，知道倒计时结束了，此流程才继续工作方法CountDownLatch（int count）：仅有这一个构造函数，参数count为需要倒数的数值await()：调用await()方法的线程会被挂起，它会等待知道count值为0才继续执行countDown()：将count值减1，直到为0时，等待的线程会被唤起。典型用法用法一：一个线程等待多个线程都执行完毕，再继续自己的工作用法二：多个线程等待某一个线程的信号，同时开始执行注意点CountDownLatch不可重用（不可回滚重置），也就是说，倒数完成后，不能再次执行倒数。可以考虑使用CyclicBarrier或者创建新的CountDownLatch实例2、信号量SemaphoreSemaphore可以用来限制或管理数量有限的资源的使用情况信号量的作用是维护一个许可证的计数，线程可以“获取”许可证，那信号量剩余的许可证就减一，线程也可以“释放”一个许可证，那信号量的许可证就加一，当信号量所拥有的许可证数量为0，那么下一个还想要获取许可证的线程，就需要等待，直到有另外的线程释放了许可证2.1、信号量使用流程初始化Semaphore并指定许可证的数量在需要信号量的代码前加acquire()或者acquireUninterruptibly()方法任务执行结束后，调用release（）来释放许可证2.2、信号量主要方法new Semaphore(int permits,boolean fair):传入许可证的数量，设置是否公平，公平是指遵循先来先得，（一般设置为公平比较合理）acquire:获取许可证，允许中断发生，获得的许可证数量可大一1acquireUninterruptibly:获得许可证，不允许中断发生tryAcquire:和tryLock很像，查看现在是否有空闲的许可证，如果有的话就获取，没有的话也没关系，可以执行别的任务tryAcquire(timeout):和tryAcquire一样，只不过设置了超时的时间release()：归还许可证，用完以后需要归还，最好和获取的许可证数量一致3、CountDownLatch字面解读：倒数门闩例子：购物拼团满人后才能购买；大巴满人发车流程：倒数结束之前，一直处于等待状态，知道倒计时结束了，此流程才继续工作3.1、主要方法CountDownLatch（int count）：仅有这一个构造函数，参数count为需要倒数的数值await()：调用await()方法的线程会被挂起，它会等待知道count值为0才继续执行countDown()：将count值减1，直到为0时，等待的线程会被唤起。3.2、典型用法用法一：一个线程等待多个线程都执行完毕，再继续自己的工作用法二：多个线程等待某一个线程的信号，同时开始执行3.3、注意点CountDownLatch不可重用（不可回滚重置），也就是说，倒数完成后，不能再次执行倒数。可以考虑使用CyclicBarrier或者创建新的CountDownLatch实例4、Condition接口（又称条件对象）4.1、作用当线程1需要等待某个条件才能执行的hi后，他就去执行Condition.await()方法，一旦执行了await()方法，线程就会进入阻塞状态然后通常会有另一个线程，假设是线程2，去执行对应的条件，直到这个条件达成的时候，线程2就会去执行condition.signal()方法，这时JVM就会从被阻塞的线程里找到那些等待该condition的线程，当线程1就会收到可执行信号的时候，它的线程状态就会变成Runnble可执行状态signalAll()和signal()的区别signalAll()会唤起所有的正在等待的线程但是signal()是公平的，只会唤起哪个等待时间最长的线程4.2、代码演示普通示例1234567891011121314151617181920212223242526272829303132333435363738394041424344public class ConditionDemo&#123; private ReentrantLock lock = new ReentrantLock(); private Condition condition = lock.newCondition();//Condition依赖于锁 void method1() throws InterruptException&#123; lock.lock();//获取锁 try&#123; System.out.println(\"条件不满足，开始await\"); condition.await(); System.out.println(\"条件满足了，开始执行后续的任务\"); &#125;finally&#123; lock.unlock(); &#125; &#125; void method2()&#123; lock.lock(); try&#123; System.out.println(\"准备工作完成，唤醒其他的线程\"); condition.signal(); &#125;finally&#123; lock.unlock(); &#125; &#125; public static void main(String[] args)&#123; ConditionDemo conditionDemo = new ConditonDemo(); new Thread(new Runnable()&#123; @Override public void run()&#123; try&#123; Thread.sleep(1000); conditionDemo.method2(); &#125;catch(InterruptedException e)&#123; e.printStackTrace(); &#125; &#125; &#125;).start(); conditionDemo.method1();//和Thread的顺序不能变换，换了会一直阻塞在method1 &#125;&#125;/*** 条件不满足，开始await* 准备工作完成，唤醒其他线程* 条件满足了，开始执行后续的任务*/实现消费者生产者模式12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273public class ConditionDemo &#123; private int queueSize = 10; private PriorityQueue&lt;Integer&gt; queue = new PriorityQueue&lt;Integer&gt;(queueSize); private Lock lock = new ReentrantLock(); private Condition notFull = lock.newCondition();//生产者使用 private Condition notEmpty = lock.newCondition();//消费者使用 public static void main(String[] args) &#123; ConditionDemo conditionDemo = new ConditionDemo(); Producer producer = conditionDemo.new Producer(); Consumer consumer = conditionDemo.new Consumer(); producer.start(); consumer.start(); &#125; class Consumer extends Thread&#123; @Override public void run()&#123; consume(); &#125; //消费者 private void consume()&#123; while (true)&#123; lock.lock(); try&#123; while (queue.size() == 0)&#123; System.out.println(\"队列空，等待数据\"); try &#123; notEmpty.await(); &#125;catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; queue.poll(); notFull.signal(); System.out.println(\"从队列里取走了一条数据，队列剩余\"+queue.size()+\"个元素\"); &#125; finally &#123; lock.unlock(); &#125; &#125; &#125; &#125; class Producer extends Thread&#123; @Override public void run()&#123; producer(); &#125; //消费者 private void producer()&#123; while (true)&#123; lock.lock(); try&#123; while (queue.size() == queueSize)&#123; System.out.println(\"队列满，等待取出\"); try &#123; notFull.await(); &#125;catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; queue.offer(1); notEmpty.signal(); System.out.println(\"生产一条数据到队列目前有\"+(queueSize-queue.size())+\"个元素\"); &#125; finally &#123; lock.unlock(); &#125; &#125; &#125; &#125;&#125;4.3、注意点实际上，如果说Lock用来代替synchronized，那么Condition就是用来代替相对应的Object.wait/notify的（await、signal），所以在用法和性质上，几乎都一样await方法会自动释放持有的Lock锁，和Object.wait一样，不需要自己手动先释放锁调用await的时候，必须持有锁，否则会抛出异常，和Object.wait一样5、CyclicBarrier循环栅栏5.1、作用CyclicBarrier循环栅栏和CountDownLatch很类似，都能阻塞一组线程当大量线程相互配合，分别计算不同任务，并且需要最后统一汇总的时候，我们可以使用CyclicBarrier。CyclicBarrier可以构造一个集结点，当某一个线程执行完毕，它会到集合点等待，直到所有线程都到了集合点，那么该栅栏就会被撤销，所有线程再统一出发，继续执行剩下的任务5.2、代码演示123456789101112131415161718192021222324252627282930313233343536373839404142434445464748public class ConditionDemo &#123; public static void main(String[] args)&#123; CyclicBarrier cyclicBarrier = new CyclicBarrier(3, new Runnable() &#123; public void run() &#123; System.out.println(\"所有人都到场了，大家统一出发！\"); &#125; &#125;); //这里的i改成6的话会分为两拨集合 3个一拨，这说明CyclicBarrier是可重用的 for (int i = 0; i &lt; 3; i++) &#123; new Thread(new Task(i,cyclicBarrier)).start(); &#125; &#125; static class Task implements Runnable&#123; private int id; private CyclicBarrier cyclicBarrier; public Task(int id, CyclicBarrier cyclicBarrier) &#123; this.id = id; this.cyclicBarrier = cyclicBarrier; &#125; public void run() &#123; System.out.println(\"线程\"+id+\"前往集合地点\"); try &#123; Thread.sleep((long) (Math.random()*10000)); System.out.println(\"线程\"+id+\"到达集合地点，开始等待其他线程\"); cyclicBarrier.await(); //await下面是集合完以后的操作 //System.out.println(\"线程\"+id+\"出发了\"); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; catch (BrokenBarrierException e) &#123; e.printStackTrace(); &#125; &#125; &#125;&#125;/** 结果如下： * 线程0前往集合地点 * 线程2前往集合地点 * 线程1前往集合地点 * 线程1到达集合地点，开始等待其他线程 * 线程0到达集合地点，开始等待其他线程 * 线程2到达集合地点，开始等待其他线程 * 所有人都到场了，大家统一出发！ */5.3、CyclicBarrier和CountDownLatch的区别作用不同：CyclicBarrier要等固定数量的线程都到达了栅栏位置才能继续执行，而CountDownLatch只需等待数字到0，也就是说CountDownLatch用于事件，但是CyclicBarrier是用于线程的。可重用性不同：CountDownLatch在倒数到0并触发门闩打开后就不能再次使用了，除非新建新的实例；而CyclicBarrier可以重复使用。CyclicBarrier等线程集合后可以执行统一的工作彩蛋【CountDownLatch与join的区别】https://www.jianshu.com/p/795151ac271b【CountDownLatch】https://www.jianshu.com/p/e233bb37d2e6","categories":[{"name":"多线程与并发","slug":"多线程与并发","permalink":"https://oncevan/oncevan.github.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91/"}],"tags":[{"name":"多线程与并发","slug":"多线程与并发","permalink":"https://oncevan/oncevan.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91/"}]},{"title":"并发容器","slug":"并发容器","date":"2020-05-15T13:49:14.000Z","updated":"2020-06-09T00:10:38.499Z","comments":true,"path":"2020/05/15/并发容器/","link":"","permalink":"https://oncevan/oncevan.github.io/2020/05/15/%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8/","excerpt":"1、并发容器概览ConcurrentHashMap：线程安全的HashMapCopyOnWriteArrayList：线程安全的ListBlockingQueue：这是一个接口，表示阻塞队列，非常适用于作为数据共享的通道ConcurrentLinkedQueue：高效的非阻塞并发队列，使用链表实现。可以看做一个线程安全的LinkedListConcurrentSkipListMap：是一个Map，使用跳表的数据结构进行快速查找","text":"1、并发容器概览ConcurrentHashMap：线程安全的HashMapCopyOnWriteArrayList：线程安全的ListBlockingQueue：这是一个接口，表示阻塞队列，非常适用于作为数据共享的通道ConcurrentLinkedQueue：高效的非阻塞并发队列，使用链表实现。可以看做一个线程安全的LinkedListConcurrentSkipListMap：是一个Map，使用跳表的数据结构进行快速查找2、同步容器Vector和Hashtable：这两个容器的方法都是使用了synchronized修饰，虽然是线程安全的，但是在多线程的情况下的效率是比较低的ArrayList和HashMap：虽然这两个类不是线程安全的，但是可以用Collections.synchronizedList(new ArrayList&lt;E&gt;())和Collections.synchronizedMap(new HashMap&lt;K,V&gt;())使之变成安全的，但是效率也是不高ConcurrentHashMap和CopyOnWriteArrayList：取代同步的HashMap和同步的ArrayList绝大多数并发情况下，ConcurrentHashMap和CopyOnWriteArrayList的性能都更好如果一个list经常改动：同步的Arraylist的性能优于CopyOnWriteArrayList，因为CopyOnWriteArrayList适用于读多写少的情况ConcurrentHashMap在任何情况下的性能都要比HashMap或Vector要好3、ConcurrentHashMap3.1、Map简介HashMap：HashMap由数组+链表组成，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的。如果通过hash定位到数组位置没有链表，则查找、添加速度很快。否则，就要解决hash冲突，操作链表。遍历链表时，通过key对象的equals方法逐一比对。构造hashmap的时候有两个参数，initialCapacity初始容量（默认16）、loadFactor装载因子（默认0.75）。向容器中添加元素的时候，如果元素个数达到阈值（元素个数=数组长度*loadFactor），就要自动扩容。使用一个新的数组代替已有的数组，每次扩容为先前的两倍。经过 rehash 之后，元素的位置要么在原位置，要么在原位置再移动2次幂的位置。Hashtable：Hashtable对外提供的public函数几乎都是同步的（synchronized关键字修饰），线程安全。key和value都不能为null。HashTable的数据结构和HashMap一样，采用Entry数组 + 链表的方法实现。HashTabale初始的容量为11，负载因子为0.75，这点和HashMap不同，HashMap初始化时容量大小总是2的幂次方，即使给定一个不是2的幂次方容量的值，也会自动初始化为最接近其2的幂次方的容量。LinkedHashMap：LinkedHashMap保证数据可以保持插入顺序LinkedHashMap在HashMap的基础上多了一个双向链表来维持顺序。TreeMap：TreeMap的数据结构是红黑树。HashMap和Hashtable不保证数据有序，LinkedHashMap保证数据可以保持插入顺序，而TreeMap可以按key的大小顺序排序。3.2、为什么需要ConcurrentHashMap为什么HashMap是线程不安全的？同时put碰撞导致数据丢失假设两个线程计算出来的hash值一样，那么两个key会放到同一个位置，导致最终一个数据会丢失同时put扩容导致数据丢失两个线程同时扩容，那么最后也只会保存一个线程中的扩容HashMap死循环造成的CPU100%主要存在于JDK1.7当中，多个线程同时扩容的时候会造成死循环，也就是你指向我我指向你，因为HashMap并不是为了并发情况下设计的JDK1.7的ConcurrentHashMap实现和分析Java 7中的ConcurrentHashMap最外层是多个segment，每个segment的底层数据结构与HashMap类似，仍然是数组和链表组成的拉链法每个segment独立上ReentrantLock锁（重入锁），每个segment之间互不影响，提高了并发效率ConcurrentHashMap默认有16个segemnt，所以最多可以支持16个线程并发写（操作分布在不同的segment上）。这个默认值可以在初始化的时候设置为其他值，但是一旦初始化以后，是不可以扩容的JDK1.8的ConcurrentHashMap实现和分析4、CopyOnWriteArrayList4.1、诞生的历史和原因代替Vector和SynchronizedList，就和ConcurrenthHashMap代理SynchronizedMap的原因一样Vector和SynchronizedList的锁的粒度太大，并发效率相对比较低，并且迭代时无法编辑Copy-On-Write并发容器还包括CopyOnWriteArraySet，用来代替同步Set4.2、适用场景读操作可以尽可能快，而写即使慢一些也没有太大关系读多写少：黑名单、每日更新、监听器：迭代操作远多于修改操作4.3、读写规则回顾读写锁：读读共享、其他都互斥（写写互斥、读写互斥、写读互斥）读写锁规则的升级：读取时完全不用加锁的，并且更厉害的是，写入也不会阻塞读取操作。只有写入和写入之间需要进行同步等待4.4、实现原理创建新副本，读写分离。写入的时候是Copy一个新的，然后在新的里面添加数据“不可变原理”：4.5、缺点数据一致性问题：CopyOnWrite容器只能保证数据的最终一致性，不能保证数据的实时一致性内存占用问题：因为CopyOnWrite的写是复制机制，所以在进行写操作的时候，内存里会同时驻扎两个对象的内存。add方法：首先获取ReentrantLock，然后调用Array.copyOf(elements，len+1)复制出一个新数组，把需要新加的数据set进新数组最后一个位置，然后setArray(newElements)更新为新的数组5、并发队列5.1、为什么使用队列用队列可以在线程间传递数据：生产者和消费者模式考虑锁等线程安全问题的重任从“你”转移到了“队列”上5.2、并发队列简介QueueBlockingQueue5.3、阻塞队列简介阻塞队列是具有阻塞功能的队列，所以它首先是一个队列，其次是具有阻塞功能通常，阻塞队列的一段是给生产者放数据用，另一端给消费者拿数据用。阻塞队列是线程安全的，所以生产者和消费者都可以是多线程的take方法：获取并移除队列的头结点，一旦执行take的时候，队列里无数据，则阻塞，直到队列里有数据put方法：插入元素，如果队列已满，那么再执行put方法的时候就put不进去，则阻塞，直到队列中还有空位置add、remove、elementoffer、poll、peekArrayBlockingQueue：有界队列，指定容量，默认公平可以设置LinkedBlockingQueue：无界队列，容量为Integer.MAX_VALUESynchronousQueue：容量为0，是一个极好的用力啊直接传递的并发数据结构，同时也是线程池Executors.newCachedThreadPool（）使用的阻塞队列PriorityBlockingQueue：支持优先级、自然顺序而不是先进先出，无界队列，PriorityQueue的线程安全版本最后JUC包提供的容器，分为3类：Concurrent、CopyOnWrite、BlockingConcurrent的特点是大部分通过CAS实现并发，而CopyOnWrite则是通过复制一份原始数据来实现的，Blocking通过ReentrantLock实质上就是AQS实现的彩蛋【HashMap和ConcurrentHashMap的扩容机制】https://www.cnblogs.com/lfs2640666960/p/9621461.html【为什么hashMap的容量扩容时一定是2的幂次】https://blog.csdn.net/gududedabai/article/details/85784161","categories":[{"name":"J.U.C","slug":"J-U-C","permalink":"https://oncevan/oncevan.github.io/categories/J-U-C/"}],"tags":[{"name":"多线程与并发","slug":"多线程与并发","permalink":"https://oncevan/oncevan.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91/"},{"name":"J.U.C","slug":"J-U-C","permalink":"https://oncevan/oncevan.github.io/tags/J-U-C/"}]},{"title":"不变性与final","slug":"不变性与final","date":"2020-05-15T13:30:24.000Z","updated":"2020-06-09T00:11:06.786Z","comments":true,"path":"2020/05/15/不变性与final/","link":"","permalink":"https://oncevan/oncevan.github.io/2020/05/15/%E4%B8%8D%E5%8F%98%E6%80%A7%E4%B8%8Efinal/","excerpt":"1、不变性1.1、什么是不变性（Immutable）如果对象在被创建后，状态就不能被修改，那么它就是不可变的。具有不变性的对象一定是 线程安全的，我们不需要对其采取任何额外的安全措施，也能保证线程安全12345public class Person&#123; private final int age = 18;//如果用private修饰，那么别的类不仅不可以修改，而且读取也可以 final String name = \"Alice\";//只用final，别的类仅可以读取，不可修改 int score = 0;//如果加了这行代码，那么Person就不具备不变性&#125;","text":"1、不变性1.1、什么是不变性（Immutable）如果对象在被创建后，状态就不能被修改，那么它就是不可变的。具有不变性的对象一定是 线程安全的，我们不需要对其采取任何额外的安全措施，也能保证线程安全12345public class Person&#123; private final int age = 18;//如果用private修饰，那么别的类不仅不可以修改，而且读取也可以 final String name = \"Alice\";//只用final，别的类仅可以读取，不可修改 int score = 0;//如果加了这行代码，那么Person就不具备不变性&#125;2、final2.1、final的作用不同版本的JDK中final有所不同早期锁定效率：早期的Java实现版本中，会将final方法转为内嵌调用现在类防止被继承方法防止被重写变量防止被修改（被final修饰的变量，不管变量是哪种变量，切记不可变的是变量的引用而非引用指向对象的内容）天生是线程安全的，而不需要额外的同步开销2.2、final的三种用法2.2.1、final修饰变量含义：被final修饰的变量，意味着值不能被修改。如果变量是对象，那么对象的应用不能变，但是对象自身的内容依然可以变化final修饰:3种变量final instance variable（类中的final属性）final static variable（类中的static final属性）final local variable（方法中的final变量）final修饰变量：赋值时机属性被声明为final后，该变量则只能被赋值一次。且一旦被赋值，final的变量就不能再被改变，无论如何也不会变。final instance variable（类中的final属性）第一种是在声明变量的等号右边直接赋值123public class finalTest&#123; private final int a = 6;&#125;第二种就是在构造函数中赋值123456public class finalTest&#123; private final int a; public finalTest(int a)&#123; this.a = a; &#125;&#125;第三就是在类的初始代码块中赋值（不常用）123456public class finalTest&#123; private final int a; &#123; a = 7; &#125;&#125;如果不采用第一种赋值方法，那么就必须在第2、3种挑一个来赋值，而不能不赋值，这是final语法规定的final static variable（类中的static final属性）第一种是在声明变量的等号右边直接赋值123public class finalTest&#123; private static final int a = 7;&#125;第二种是用static初始代码块赋值，但是不能用普通的初始代码块赋值123456public class finalTest&#123; private static final int a; static &#123; a = 7; &#125;&#125;final local variable（方法中的final变量）和前面两种不同，这里的变量是在方法里的，所以没有构造函数，也不存在初始化代码块。所以它不规定赋值时机，只要求在使用前必须赋值，这个方法中的非final变量也是一样的。2.2.2、final修饰方法构造方法不允许final修饰不可被重写，也就是不能被Override,即便是子类有同样的名字的方法（同名方法会报错，参数不同除外），那也不是Override，这个和static方法是一个道理引申：static方法不能被重写，但是子类与父类中可以存在同名的static方法，但是两者毫无关系2.2.3、final修饰类不可被继承：比如说常用的String类就是final修饰的，我们没见过哪个类是继承String类的2.2.4、final的注意点final修饰对象的时候，只是对象的引用不变，而对象本身的属性是可以变化的12345678910public class Person&#123; final int age = 18; final String name = \"Alice\"; int score = 0;&#125;public class Test&#123; public static void main()&#123; final Person person = new Person();//即使这个对象类型被final修饰了，但是由于Person类中的score没有被final修饰，所以不能保证Person对象不可变 &#125;&#125;3、不变性和final的关系不变性并不意味着简单地用final修饰就是不可变对于基本数据类型，确实被final修饰后就具有不变性但是对于对象类型，需要改对象保证自身被创建后，状态永远不会变才可以（参见上一条final注意点）如何利用final实现对象不可变把所有对象都声明为final？123456789101112131415public class Person&#123; //Person类中所有变量都使用了final修饰 final int age = 18; final String name = \"Alice\"; final Test test = new Test();&#125;public class Test&#123; String test public static void main()&#123; Person person = new Person(); person.test = \"111\"; System.out.println(person.test);//打印出111 person.test = \"222\"; System.out.println(person.test);//打印出222， &#125;&#125;这就说明即使Person中的所有变量都是使用了final修饰，但是由于Test中的test变量没有被final修饰，导致Person对象还是可变的，所以即使所有变量都使用final修饰也不能保证这个对象就是不可变的一个属性是对象类型的不可变对象的正确例子12345678910public final ImmutableDemo&#123; private final Set&lt;String&gt; students = new HashSet&lt;&gt;(); public ImmutableDemo()&#123; students.add(\"111\"); students.add(\"222\"); &#125; public boolean isStudent(String name)&#123; return students.conteins(name); &#125;&#125;这里虽然没有任何一个变量被final修饰了，但是它是不可变的。总结(满足以下条件时，对象才是不可变的)对象创建后，其状态就不能修改所有属性都是final修饰的对象创建过程中没有发生逸出4、栈封闭在方法里新建的局部变量，时机上是存储在每个线程私有的栈空间，而每个栈的栈空间是不能被其他线程所访问到的，所以不会有线程安全问题。这就是“栈封闭”技术，是“线程封闭”技术的一种情况。12345678910111213141516171819202122232425262728/*** 栈内的数据是线程安全的:10000* 栈内的数据是线程安全的:10000* 16114*/public class StackConfinement implements Runnable&#123; int index = 0; public void inThread()&#123; int neverGoOut = 0； for(int i=0;i&lt;10000;i++)&#123;neverGoOut++&#125; System.out.println(\"栈内的数据是线程安全的：\"+neverGoOut) &#125; @Override public void run()&#123; for(int i=0;i&lt;10000;i++)&#123;index++&#125; inThread(); &#125; public static void main(String[] args) throws Exception&#123; StackConfinement r1 = new StackConfinement(); Thread thread1 = new Thread(r1); Thread thread2 = new Thread(r1); thread1.start(); thread2.start(); thread1.join(); thread2.join(); System.out.println(r1.index) &#125;&#125;思考题由于b被final修饰，后期不会再变化，就相当于常量了，，所以String c = b+2；就是wukong2，而a已经建立了一个“wukong2”，c没有必要再去新建一个对象，这时候会直接指向和a一样的地址，所以第一句为trued指向常量池中的wukong，而且由于d没有被final修饰，所以编译器在使用d的时候不会提前知道d是什么值，所以e的值要在运行的时候确定，运行时确定的e会在堆上生成wukong2，所以第二句输出false12345678public static void main(String[] args)z&#123; String a = \"wukong2\"; final String b = getDaShiXion(); String c = b +2 ; System.out.println(a==c);&#125;private static String getDaShiXion()&#123; return \"wukong\";结果和上面第二种情况一样，也是false。","categories":[{"name":"J.U.C","slug":"J-U-C","permalink":"https://oncevan/oncevan.github.io/categories/J-U-C/"}],"tags":[{"name":"J.U.C","slug":"J-U-C","permalink":"https://oncevan/oncevan.github.io/tags/J-U-C/"},{"name":"Java基础之语法","slug":"Java基础之语法","permalink":"https://oncevan/oncevan.github.io/tags/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E8%AF%AD%E6%B3%95/"}]},{"title":"CAS","slug":"CAS","date":"2020-05-01T12:29:17.000Z","updated":"2020-06-09T00:04:48.927Z","comments":true,"path":"2020/05/01/CAS/","link":"","permalink":"https://oncevan/oncevan.github.io/2020/05/01/CAS/","excerpt":"1、什么是CAS判断内存中某个位置的值是否为预期值，如果是则更改为新的值，这个过程是原子的，中间不予许中断，解决数据一致性问题。","text":"1、什么是CAS判断内存中某个位置的值是否为预期值，如果是则更改为新的值，这个过程是原子的，中间不予许中断，解决数据一致性问题。2、等价代码12345678910public class SimulateCAS&#123; private volatile int value; public synchronized int compareAndSwap(int expectedValue,int newValue)&#123; int oldValue = value; if(oldValue == expectedValue)&#123; value = newValue; &#125; return oldValue; &#125;&#125;3、案例演示两个线程竞争1234567891011121314151617181920212223242526272829303132/*** 演示两个线程竞争修改value的值，最终查看结果* 虽然有两个操作都会执行run方法，但是cas方法让最后value的值始终为1*/public class TwoThreadCompetition implements Runnable&#123; private volatile int value; public synchronized int compareAndSwap(int expectedValue,int newValue)&#123; int oldValue = value; if(oldValue == expectedValue)&#123; value = newValue; &#125; return oldValue; &#125; public static void main(String[] args) throws InterruptedException&#123; TwoThreadsCompetition r = new TwoThreadsCompetition(); r.value = 0; Runnable target; Thread t1 = new Thread(r); Thread t2 = new Thread(r); t1.start(); t2.start(); t1.join(); t2.join(); System.out.println(r.value); &#125; @Override public void run()&#123; compareAndSwap(0,1); &#125;&#125;4、应用场景乐观锁并发容器：ConcurrentHashMap原子类Java中是如何利用CAS实现原子操作的？AtomicInteger加载Unsafe工具，用来直接操作内存数据用Unsafe来实现底层操作用volatile修饰value字段，保证可见性（如果不加多个线程之间看不到最新的数据）举例：getAndAddInt分析CAS加上do…while自旋形成乐观锁Unsafe类Unsafe是CAS的核心类。Java无法直接访问底层操作系统，而是通过本地（native）方法来访问。不过尽管如此，JVM还是开了一个后门，JDK中有一个类Unsafe，它提供了硬件级别的原子操作valueOffset表示的是变量值在内存中的偏移地址，因为Unsafe就是根据内存偏移地址获取数据的原值的，这样我们就能通过unsafe来实现CAS了Unsafe类中的compareAndSwapInt方法中先拿到变量value在内存中的地址，通过Atomic::cmpxchg实现了原子性的比较和替换，x是即将更新的值，e是原来的值5、CAS的缺点ABA问题：一个线程one从内存位置V中取出A，这时候另一个线程two也从内存中取出A，并且线程two进行了一些操作将A变成了B，然后又将V位置的数据变成了A，而这时候线程one进行 CAS操作的时候发现内存中仍然是A，然后one线程提示操作成功。尽管one线程的CAS操作成功，但是不代表这个线程是没问题的为了解决ABA问题，在原子引用类上加上版本号，这个有点类似于mysql的乐观锁一样，每个线程更改一次都需要更改版本号，那么多线程同时获取到同一个版本号的时候也只有一个线程可以更改成功。自旋时间过长","categories":[{"name":"J.U.C","slug":"J-U-C","permalink":"https://oncevan/oncevan.github.io/categories/J-U-C/"}],"tags":[{"name":"多线程与并发","slug":"多线程与并发","permalink":"https://oncevan/oncevan.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91/"},{"name":"J.U.C","slug":"J-U-C","permalink":"https://oncevan/oncevan.github.io/tags/J-U-C/"}]},{"title":"Atomic包","slug":"Atomic包","date":"2020-04-29T13:29:02.000Z","updated":"2020-06-09T00:03:18.470Z","comments":true,"path":"2020/04/29/Atomic包/","link":"","permalink":"https://oncevan/oncevan.github.io/2020/04/29/Atomic%E5%8C%85/","excerpt":"1、原子类什么是原子类？不可分割一个操作是不可中断的，即便是多线程的情况下也可以保证有什么作用？原子类的作用和锁类似，是为了保证并发情况下线程安全。不过与锁相比，有一定的优势：粒度更细：原子变量可以把竞争范围缩小到变量级别，这是我们可以获得的最细粒度的情况了，通常锁的粒度都要大于原子变量的粒度效率更高：通常，使用原子类的效率会比使用锁的效率更高，除了高度竞争的情况","text":"1、原子类什么是原子类？不可分割一个操作是不可中断的，即便是多线程的情况下也可以保证有什么作用？原子类的作用和锁类似，是为了保证并发情况下线程安全。不过与锁相比，有一定的优势：粒度更细：原子变量可以把竞争范围缩小到变量级别，这是我们可以获得的最细粒度的情况了，通常锁的粒度都要大于原子变量的粒度效率更高：通常，使用原子类的效率会比使用锁的效率更高，除了高度竞争的情况2、原子类分类3、AtomicIntegerFieldUpdateAtomicIntegerFieldUpdate对普通变量升级为具有原子功能使用场景：偶尔需要一个原子Get-Set操作使用条件：变量必须是可见的，比如如果是private就不能使用，另外不支持对static变量进行使用12345678910111213141516171819202122232425262728293031public class AtomicIntegerFieldUpdaterDemo implements Runnable&#123; static Candidate tom; static Candidate peter; public static AtomicIntegerFieldUpdater&lt;Candidate&gt; scoreUpdater = AtomicIntegerFieldUpdater.newUpdater(Candidate.class,\"score\");、、 @Override public void run() &#123; for (int i = 0; i &lt; 1000; i++) &#123; peter.score++; scoreUpdater.getAndIncrement(tom); &#125; &#125; public static class Candidate &#123; volatile int score; //保证升级的变量是可见的，不能是static的变量 &#125; public static void main(String[] args) throws InterruptedException &#123; tom = new Candidate(); peter = new Candidate(); Lock r = new Lock(); Thread t1 = new Thread(r); Thread t2 = new Thread(r); t1.start(); t2.start(); t1.join(); t2.join(); System.out.println(\"普通变量：\"+peter.score); System.out.println(\"升级后的变量：\"+tom.score); &#125;&#125;4、Adder累加器是Java8引入的，相对是比较新的一个类高并发下LongAdder比AtomicLong效率高，不过本质是空间换时间竞争激烈的时候。LongAdder把不同线程对应到不同的Cell上进行修改，降低了冲突的概率，是多段锁的理念，提高了并发性12345678910111213141516171819202122232425262728293031323334353637/** * 描述：演示高并发情景下，LongAdder比AtomicLong性能好 * 结果：100000000 * AtomicLong耗费的时间：3701 */public class Lock &#123; public static void main(String[] args) throws InterruptedException &#123; AtomicLong counter = new AtomicLong(0); ExecutorService service = Executors.newFixedThreadPool(20); long start = System.currentTimeMillis(); for (int i = 0; i &lt; 10000; i++) &#123; service.submit(new Task(counter)); &#125; service.shutdown(); while(!service.isTerminated())&#123; &#125; long end = System.currentTimeMillis()-start; System.out.println(counter.get()); System.out.println(\"AtomicLong耗费的时间：\"+end); &#125; private static class Task implements Runnable&#123; private AtomicLong counter; public Task(AtomicLong counter) &#123; this.counter = counter; &#125; @Override public void run() &#123; for (int i = 0; i &lt;10000 ; i++) &#123; counter.incrementAndGet(); &#125; &#125; &#125;&#125;12345678910111213141516171819202122232425262728293031323334353637/** * 描述：演示高并发情景下，LongAdder比AtomicLong性能好 * 结果：100000000 * LongAdder耗费的时间：559 */public class Lock &#123; public static void main(String[] args) throws InterruptedException &#123; LongAdder counter = new LongAdder(); ExecutorService service = Executors.newFixedThreadPool(20); long start = System.currentTimeMillis(); for (int i = 0; i &lt; 10000; i++) &#123; service.submit(new Task(counter)); &#125; service.shutdown(); while(!service.isTerminated())&#123; &#125; long end = System.currentTimeMillis()-start; System.out.println(counter.sum()); System.out.println(\"LongAdder耗费的时间：\"+end); &#125; private static class Task implements Runnable&#123; private LongAdder counter; public Task(LongAdder counter) &#123; this.counter = counter; &#125; @Override public void run() &#123; for (int i = 0; i &lt;10000 ; i++) &#123; counter.increment(); &#125; &#125; &#125;&#125;原因：由于竞争很激烈，每一次加法，AtomicLong都要flush和refresh，导致很耗费资源thread1和thread2之间不能通信，所以线程1改变的值需要写到local cache再写到shared cache中，thread2才可以知道ctr的值在内部，这个LongAdder的实现原理和刚才的AtomicLong是不同的，刚才的AtomicLong的实现原理是每一次加法都需要做同步，所以在高并发的时候会导致冲突比较多，也就降低了效率。而LongAdder,每个线程会有自己的一个计数器，仅用来自己线程内计数，这样一来就不会和其他线程的计数器干扰如图中所示，第一个线程的计数器数值，也就是ctr‘，为1的时候，可能线程2的计数器ctr’‘的数值已经是3了，他们之间并不存在竞争关系，所以在加和的过程中，根本不需要同步机制，也不需要AtomicLong的flush和refresh。这里也没有一个公共的counter来给所有的线程统一计数。LongAdder引入了分段累加的概念，内部有一个base变量和一个Cell[]数组共同参与计数base变量：竞争不激烈，直接累加到该变量上Cell数组：竞争激烈，各个线程分散累加到自己的槽Cell[ i ]中sum源码就是如果Cell为空sum函数直接就返回base的值，如果Cell不为空就遍历并累加Cell到sum当中，相当于sum为Cell的值和base的值的总和。由于sum函数中没有加锁，但是Cell中的元素的值随时可能变化，所以到最后可能前面的元素的值发生了变化导致返回的sum不是那么精确。在低争用下，AtomicLong和LongAdder这两个类具有相似的特征。但是在竞争激烈的情况下，LongAdder的预期吞吐量要高得多，但是要消耗更多的空间。LongAdder适合的场景是统计求和计数的场景，而且LongAdder基本只提供了add方法，AtomicLong还具有cas方法LongAccumulator累加器：对计算的顺序没有要求，适用于并行计算","categories":[{"name":"J.U.C","slug":"J-U-C","permalink":"https://oncevan/oncevan.github.io/categories/J-U-C/"}],"tags":[{"name":"多线程与并发","slug":"多线程与并发","permalink":"https://oncevan/oncevan.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91/"},{"name":"J.U.C","slug":"J-U-C","permalink":"https://oncevan/oncevan.github.io/tags/J-U-C/"}]},{"title":"ThreadLocal","slug":"ThreadLocal","date":"2020-04-29T10:21:34.000Z","updated":"2020-06-08T23:58:50.328Z","comments":true,"path":"2020/04/29/ThreadLocal/","link":"","permalink":"https://oncevan/oncevan.github.io/2020/04/29/ThreadLocal/","excerpt":"1、两大使用场景典型场景1：每个线程需要一个独享的对象（通常是工具类，典型需要使用的类有SimpleDate Format和Random）典型场景2：每个线程内需要保存全局变量（例如在拦截器中获取用户信息），可以让不同方法直接使用，避免参数传递的麻烦","text":"1、两大使用场景典型场景1：每个线程需要一个独享的对象（通常是工具类，典型需要使用的类有SimpleDate Format和Random）典型场景2：每个线程内需要保存全局变量（例如在拦截器中获取用户信息），可以让不同方法直接使用，避免参数传递的麻烦1.1、典型场景1每个Thread内有自己的实例副本，不共享比喻：老师只能发一本教材，但是有多个学生，一起做笔记有线程安全问题，复印后每人一册后没有问题。1.1.1、SimpleDateFormat的进化之路2个线程分别用自己的SimpleDateFormat，这没问题；后来延申出10个，那么就有10个 线程和10个SimpleDateFormat，这虽然写法不优雅（应该复用对象），但勉强可以接受；但是假设有1000个打印日期的任务，需要1000个线程使用SimpleDateFormat，那么创建销毁线程的开销很大。第一种方法是使用上一章讲到的newFixedThreadPool(10)来将1000个任务交给这10个线程去执行，这种方法的缺陷是SimpleDateFormat需要被创建1000次；第二种是将SimpleDateFormat定义为静态变量，那么就不用创建1000次，但是缺陷是这么多线程共用一个SimpleDateFormat会发生线程不安全问题；第三种是给生成date的函数中的关键代码上锁，这样就避免了线程不安全的问题。但是又引发了效率问题，1000个任务一个一个排队解决效率很低，更好的解决办法是使用ThreadLocal12345678910111213141516171819202122232425public class ThreadLocalNormalUsage&#123; public static ExecutorService threadPool = Executors.newFixedThreadPool(10); static SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\"); public static void main(String[] args) throws Exception&#123; for(int i=0;i&lt;1000;i++)&#123; int finalI = i; threadPool.submit(new Runnable()&#123; @Override public void run()&#123; Stirng Date = new ThreadLocalNormalUsage04.date(finalI); System.out.println(date); &#125; &#125;) &#125; threadPool.shutdown(); &#125; public String date(int seconds)&#123; Date date = new Date(1000 * seconds); String s = null; synchronized (ThreadLocalNormalUsage04.class)&#123; //类锁 s = dateFormat.format(date); &#125; return s; &#125;&#125;第四种是使用ThreadLocal，10个线程只需要创建出10个SimpleDateFormat对象，每个线程中有一个SimpleDateFormat对象，这样解决了线程安全问题同时也解决了效率问题123456789101112131415161718192021222324252627282930public class ThreadLocalNormalUsage05&#123; public static ExecutorService threadPool = Executors.newFixedThreadPool(10); public static void main(String[] args) throws Exception&#123; for(int i=0;i&lt;1000;i++)&#123; int finalI = i; threadPool.submit(new Runnable()&#123; @Override public void run()&#123; Stirng Date = new ThreadLocalNormalUsage05.date(finalI); System.out.println(date); &#125; &#125;) &#125; threadPool.shutdown(); &#125; public String date(int seconds)&#123; Date date = new Date(1000 * seconds); // SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\"); SimpleDateFormat dateFormat ThreadSafeFormatter.dateFormatThreadLocal.get();//获得类中返回的SimpleDateFormat return dateFormat.format(date); &#125;&#125;class ThreadSafeFormatter&#123; public static ThreadLocal&lt;SimpleDateFormat&gt; dateFormatThreadLocal = new ThreadLocal&lt;SimpleDateFormat&gt;()&#123; @Override protected SimpleDateFormat initialValue()&#123; return new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\"); &#125; &#125;&#125;1.2、典型场景2需求：每个线程内需要保存全局变量，可以让不同方法直接使用，避免参数传递的麻烦在此基础上可以演进，使用UserMap，第一个service将用户信息put进UserMap，之后的service久可以直接使用了，但是这又引发了线程不安全的问题。当多线程同时工作时，我们需要保证线程安全，可以用synchronized，也可以用ConcurrentHashMap，但无论用什么，都会对性能有所影响。解决方法用ThreadLocal保存一些业务内容（用户权限信息、从用户系统获取到的用户名、userID等等）这些信息在同一个线程内相同，但是不同的线程使用的业务你内容是不相同的1234567891011121314151617181920212223242526272829303132333435public class ThreadLocalNormalUsage06&#123; public static void main(String[] args)&#123; new Service1.process(); &#125;&#125;class Service1&#123; public void process()&#123; User user = new User(\"张三\"); UserContextHolder.holder.set(user); new Service2.process(); &#125;&#125;class Service2&#123; public void process()&#123; User user = UserContextHolder.holder.get(); System.out.println(user.name); new Service3.process(); &#125;&#125;class Service3&#123; public void process()&#123; User user = UserContextHolder.holder.get(); System.out.println(user.name); &#125;&#125;class UserContextHolder&#123; //一个Thread拥有一个ThreadLocalMap对象，一个ThreadLocalMap对象拥有多个ThreadLocal对象 public static ThreadLocal&lt;User&gt; holder = new ThreadLocal&lt;&gt;();&#125;class User&#123; String name; public User(String name)&#123; this.name = name; &#125;&#125;1.3 、总结ThreadLocal的两个作用让某个需要用到的对象在线程间隔离（每个线程都有自己独立的对象）在任何方法中给都能轻松获取到该对象根据共享对象的生成时机不同，选择initialValue或set来保存对象场景一：initialValue，在ThreadLocal第一个get的时候把对象给初始化出来，对象初始化的实际可以由我们控制场景二：set，如果需要保存到ThreadLocal里的对象的生成时机不由我们随意控制，例如拦截器生成的用户信息，用ThreadLocal.set直接放到ThreadLocal中，以便后续使用使用ThreadLocal带来的好处达到线程安全不需要加锁，提高执行效率更高效地利用内存、节省开销：相比于每个任务都新建一个SimpleDateFormat，显然用ThreadLocal可以节省内存和开销免去传参地繁琐：无论时场景一地工具类，还是场景二地用户名，都可以在任何地方直接通过ThreadLocal拿到，再也不需要每次都传递同样地参数。ThreadLocal使得代码耦合度更低，更优雅。2、ThreadLocal原理Thread、ThreadLocal、ThreadLocalMap三者之间的关系initialValue()：初始化该方法会返回当前线程对应的“初始值”，这是一个延迟加载的方法，只有在调用get方法的时候才会触发【get方法会检查ThreadLocalMap是否为空，为空的话就调用setInitialValue()来执行initialValue()默认返回null，如果没有重写initialValue()的话就会返回null】当线程第一次使用get方法访问呢变量时，将调用此方法，除非线程当前调用了set方法，在这种情况下，不会为线程调用本initialValue方法【get方法会检查ThreadLocalMap是否为空，不为空的话就返回set进去的result】通常每个线程最多调用一次此方法，但如果已经调用了remove()后，再调用get()则可以再次调用此方法如果不重写本方法，这个方法会返回null。一般使用匿名内部类的方法来重写initialValue()方法，以便再后续使用中可以初始化副本对象set()：为这个线程设置一个新值set方法先拿到线程的应用，再把线程的引用通过getMap方法获取ThreadLocalMap，如果map为空创建map，不为空则覆盖map中的值。ps：这个map以及map中的key和value都是保存在Thread类中的，而不是保存在ThreadLocal中get()：得到这个线程对应的value。如果是首次调用get，则会调用initialValue来得到这个值。get方法使先取出当前线程的ThreadLocalMap，然后调用map.getEntry（）方法，把本ThreadLocal的应用作为参数传入，取出map中属于本ThreadLocal的value。remove()：删除对应这个线程的值（使用该值的话会报空指针异常），m.remove()中传入的key值为this，说明只会删除对应的ThreadLocal，其他的不受影响通过源码分析可以看出，setInitoalValue和直接set最后都是利用map.set()方法来设置值，也就是说，最后都会对应到ThreadLocalMap的一个Entry，只不过起点（一个通过get()一个直接set()）和入口不一样3、ThreadLocal的注意点3.1、内存泄漏定义定于：内存泄漏是指某个对象不再有用，但是占用的内存却不能被回收3.2、内存泄漏的原因原因：Entry就是一个键值对，它的构造函数中Key、Value，如果是普通赋值直接就是value=v，但是它还有一行super(k)，说明Entry继承了WeakReference（弱引用），Key使用了弱引用中的构造函数进行赋值，说明Key就是一个弱引用，而普通赋值value=v是一个强引用，这就导致了内存泄漏的可能性。弱引用的特点是，如果这个对象只被弱引用关联（没有任何强引用关联），那么这个对象就可以被回收，所以弱引用不会阻止GC正常情况下，当线程终止，保存在ThreadLocal里的value会被垃圾回收器回收，因为没有任何强引用了。但是，如果线程不终止（比如线程需要保持很久），那么key对应的value就不能被回收，因为有以下的调用链，key为弱引用可以被回收，但是value不能被回收，所以在这种情况下发生了内存泄漏JDK已经考虑到这个问题，所以在set、remove、rehash方法中会扫描key为null的Entry，并把对应的value设置为null，这样value对象就可以被回收但是如果一个ThreadLocal不被使用，那么实际上set、remove、rehash方法也不会被调用，如果同时线程又不停止，那么调用链就一直存在，那么就导致了内存泄漏。3.3、如何避免内存泄漏（阿里规约）调用remove方法，就会删除对应的Entry对象，可以避免内存泄漏，所以使用完ThreadLocal之后，应该调用remove方法。service1、service2，到service3最后一个使用ThreadLocal后就调用remove方法。3.4、空指针异常java拆箱装箱导致的3.5、共享对象如果每个线程中ThreadLocal.set()放进去的对象本来就是多线程共享的同一个对象，比如static对象，那么多个线程的ThreadLocal.get()取得的还是这个共享对象本身，还是有并发访问问题。4、实际运用场景（Spring）DateTimeContextHolder类使用了ThreadLocalRequestContextHolder也使用了ThreadLocal优先使用框架的支持，而不是自己创造。例如在Spring中，如果可以使用RequestContextHolder，那么就不需要自己维护ThreadLocal，因为自己可能会忘记调用remove()方法等，造成内存泄漏。","categories":[{"name":"J.U.C","slug":"J-U-C","permalink":"https://oncevan/oncevan.github.io/categories/J-U-C/"}],"tags":[{"name":"多线程与并发","slug":"多线程与并发","permalink":"https://oncevan/oncevan.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91/"},{"name":"J.U.C","slug":"J-U-C","permalink":"https://oncevan/oncevan.github.io/tags/J-U-C/"}]},{"title":"锁","slug":"锁","date":"2020-04-28T11:34:15.000Z","updated":"2020-06-09T00:24:46.140Z","comments":true,"path":"2020/04/28/锁/","link":"","permalink":"https://oncevan/oncevan.github.io/2020/04/28/%E9%94%81/","excerpt":"1、Lock接口1.1、Lock简介、地位、作用锁是一种工具，用于控制对共享资源的访问Lock和synchronized，这两个是最常见的锁，它们都可以达到线程安全的目的，但是在使用和功能上又有较大的不同Lock并不是用来替代synchronized的，而是当使用synchronized不合适或不足以满足要求的时候，来提供高级功能的。Lock接口最常见的实现类是ReentrantLock通常情况下，Lock只允许一个线程来访问这个共享资源。不过有的时候，一些特殊的实现也允许并发访问，比如ReadWriteLock里面的ReadLock。","text":"1、Lock接口1.1、Lock简介、地位、作用锁是一种工具，用于控制对共享资源的访问Lock和synchronized，这两个是最常见的锁，它们都可以达到线程安全的目的，但是在使用和功能上又有较大的不同Lock并不是用来替代synchronized的，而是当使用synchronized不合适或不足以满足要求的时候，来提供高级功能的。Lock接口最常见的实现类是ReentrantLock通常情况下，Lock只允许一个线程来访问这个共享资源。不过有的时候，一些特殊的实现也允许并发访问，比如ReadWriteLock里面的ReadLock。1.2、为什么synchronized不够用？（为什么需要Lock？）1、效率低：锁的释放情况少，试图获得锁时不能设定超时、不 能中断一个正在试图获得锁的线程2、不够灵活（读写锁更灵活）：加锁和释放的时机单一，每个锁仅有单一的条件（某个对象），可能时不够的3、无法知道是否成功获取到锁1.3、Lock方法Lock（）就是最普通的获取锁。如果锁已被其他线程获取，则进行等待Lock不会像synchronized一样在异常的时候自动释放锁，因此最佳实践是，在finally中释放锁，以保证发生异常时锁一定被释放Lock()方法不能被中断，这会带来很大的隐患：一旦陷入死锁，Lock()就会陷入永远等待tryLock()、tryLock(long time,TimeUnit unit)、lockInterruptibly()tryLock()用来尝试获取锁，如果当前锁没有被其他线程占用，则获取成功返回true，否则返回false代表获取锁失败。相比于Lock，这样的方法显然功能更强大了，我们可以根据是否能获取到锁来决定后续程序的行为。该方法会立即返回，即便在拿不到锁时也不会一直等着。tryLock(long time,TimeUnit unit)：超时就放弃lockInterruptibly():相当于tryLock(long time,TimeUnit unit)把超时时间设置为无限。在等待锁的过程中，线程可以被中断1.4、Lock的可见性保证拓展：happens-before它真正的意思是前面的操作对后续的操作都是可见的，比如 A happen before B 的意思并不是说 A 操作发生在 B 操作之前，而是说 A 操作对于 B 操作一定是可见的。2、锁的分类2.1、乐观锁和悲观锁悲观锁：悲观锁又称互斥同步锁，悲观锁为了确保结果的正确性，会每次获取并修改数据时，把数据锁住，让其他线程无法访问数据，这样就可以确保数据内容万无一失。比如synchronized和Lock接口。改进的synchronized前面会有乐观的一部分！乐观锁：乐观锁又称非互斥同步锁，乐观锁在操作同步资源的时候不会锁住被操作的对象，在更新的时候，去对比在我修改的期间数据有没有被其他人改变过，如果没有被改变过，就说明真的是只有自己在操作，那就正常去修改数据，如果数据和一开始拿到的不一样了，说明其他线程在这段时间内改过数据，那就不能继续刚才的更新数据过程了，我会选择放弃、报错、重试等策略。乐观锁的实现一般都 是利用CAS算法来实现的。乐观锁的典型例子就是原子类、并发容器等。悲观锁的劣势阻塞和唤醒带来的性能劣势永久阻塞：如果持有锁的线程被永久阻塞，比如遇到无限循环、死锁等活跃性问题，那么等待该线程释放锁的那几个悲催的线程将永远得不到执行优先级反转：假如给线程设置了优先级，一旦优先级低的线程拿到同步资源后不运行或运行很慢，那么即便其他线程优先级很高也是不能执行的，这就是优先级反转开销对比悲观锁的原始开销要高于乐观锁，但是特点是一劳永逸，临界区持锁时间就算越来越长，也不会对互斥锁的开销造成影响相反，虽然乐观锁一开始的开销比悲观锁小，但是如果自旋时间很长或者不停重试，那么消耗的资源也会越来越多使用场景悲观锁：适合并发写入多的情况，适用于临界区持锁时间比较长的情况，悲观锁可以避免大量的无用自旋的消耗，典型情况：临界区有IO操作临界区代码复杂或者循环量大临界区竞争非常激烈乐观锁：适合并发写入少，大部分是读取的场景，不加锁的能让读取性能大幅提高2.2、可重入锁和非可重入锁可重入锁ReentrantLock：已获取锁后，再次获取该锁无需释放第一次获得的锁，这就是可重入锁 。（避免死锁，提升封装性）不可重入：已获取锁后，想要获得同一把锁必须先释放该锁，这就是非可重入锁2.3、公平锁与非公平锁公平指的是按照线程请求的顺序来分配锁；非公平指的是不完全按照请求的顺序，在一定情况下可以插队。注意：非公平也同样不提倡“插队”行为，这里的非公平指的是在“合适的时机”插队，而不是盲目插队。可以避免线程唤醒带来的空档期，提高效率（下一个线程由挂起到运行）举例：在线程1至此那个unlock释放锁之后，由于此时等待队列【线程2 线程3 线程4】线程2等待时间最久，所以线程2先得到执行，如果这个时候线程5恰好去执行lock()，由于ReentrantLock发现此时并没有线程持有Lock这把锁（线程2还没有来得及获取到，需要时间），线程5可以插队，直接拿到这把锁，这就是ReentrantLock默认的公平策略，也就是不公平。ReentrantLock默认是非公平锁，但是可以在参数填写true设置成公平锁2.4、共享锁和排他锁排他锁：又称独占锁、独享锁，如syncronized共享锁：又称读锁，获得共享锁之后，可以查看但无法修改和删除数据，其他线程此时也可以获取到共享锁，也可以查看但无法修改和删除数据共享锁和排他锁的典型是读写锁ReentrantReadWriteLock，其中读锁是共享锁，写锁是独享锁读写锁的作用在没有读写锁之前，我们假设使用ReentrantLock，那么虽然我们保证了线程安全，但也浪费了一定的资源：多个读操作同时进行，并没有线程安全问题在读的地方使用读锁，在写的地方使用写锁，灵活控制，如果没有写锁的情况下，读是无阻塞的，提高了程序执行效率读写锁的规则多个线程只申请读锁，都可以申请得到如果有一个线程已经占用了读锁，则此时其他线程如果要申请写锁，则申请写锁的线程会一直等待释放读锁如果有一个线程已经占用了写锁，则此时其他线程如果申请写锁或读锁，则申请得线程会一直等待释放写锁一句话总结：要么是一个或多个线程同时有读锁，要么是一个线程又写锁，但是两者不会同时出现（要么多读，要么一写）读锁插队策略情景：假设线程2和线程4正在同时读取，线程3想要写入，拿不到锁，于是进入等待队列，线程5不在队列里，现在过来想要读取此时有两种策略：策略1：获得读锁，和线程2和线程4同时读取读可以插队，效率高但是容易造成饥饿，假如线程5-1000都想要读，线程3就一直不能执行，造成饥饿策略2：把线程5加入等待队列就可以避免饥饿【ReentrantReadWriteLock的实现选择了策略2】非公平的情况，写锁可以随时插队；读锁只有在等待队列的头结点是读锁的情况下，这个时候进来的读取线程才可以插队，其他情况下都是不能插队的。公平的情况，不允许插队，完全按照等待队列中的顺序来执行锁的升降级为什么需要升降级因为如果一个写入线程后面只有读操作，但是它如果一直占用写锁就会降低效率，如果这个时候把它降级为读锁，那么其他读取线程可以同时使用读锁，这样就提高了效率写锁支持降级为读锁，读锁不支持升级为写锁为什么不支持锁的升级因为有可能会造成死锁，假如有多个线程同时在使用读锁，这个时候如果有个读锁升级为写锁，读锁和写锁不能同时存在，又或者这个时候多个读取线程都想升级写锁，那么就会很容易造成死锁。适用场景相比于ReentrantLock适用于一般场合，ReentrantReadWriteLock适用于读多写少的情况，合理使用可以进一步提高并发效率2.5、自旋锁和阻塞锁阻塞或唤醒一个java线程需要操作系统切换CPU状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长。在许多场景中，同步资源的锁定时间很短，为了这一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失。如果物理机器有多个处理器，能够让两个或两个以上的线程同时并行执行，我们就可以让后面那个请求锁的线程不放弃CPU的执行时间，看看持有锁的线程是否很快就会释放锁自旋锁：而为了让当前线程“稍等一下”，我们需要让当前线程进行自旋，如果自旋完成后前面锁定同步资源的线程已经释放了锁，那么当前线程就可以不必阻塞而是直接获取同步资源，从而避免切换线程的开销阻塞锁：和自旋锁相反，阻塞锁如果遇到没拿到锁的情况，会直接把线程阻塞，直到被唤醒自旋锁的缺点如果锁被占用的时间很长，那么自旋的线程只会浪费处理器资源在自旋的过程中，一直消耗着CPU，所以虽然自旋锁的起始开销低于悲观锁，但是随着自旋时间的增长，开销也是线性增长的适用场景自旋锁一般用于多核的服务器，在并发度不是特别高的情况下，比阻塞锁的效率高另外，自旋锁适用于临界区比较短小的情况，否则如果把临界区很大（线程一旦拿到锁，很久以后才会释放），那也是不合适的2.6、可中断锁在Java中，synchronized就不是可中断锁，而Lock是可中断锁，因为tryLock()和lockInterruptibly都能响应中断如果某一线程A正在执行锁中的代码，另一线程B正在等待获取该锁，可能由于等待时间过长，线程B不想等待了，想先处理其他事情，我们可以中断它，这种就是可中断锁。3、Java虚拟机对锁的优化自旋锁和自适应：在自旋一定次数后可能就会把自旋锁转为阻塞锁，可能这次自旋一百次后成功获取到同步资源，下次就不再自旋了等等锁消除：可能有些情况下不必要加锁，那么JVM可能就自动帮我们消除了锁锁粗化：有可能多次多同一个对象进行加锁解锁，可能就只用一个加锁解锁就可以了，JVM就会进行锁粗化优化。我们在写代码时如何优化锁和提高并发性能缩小同步代码块尽量不要锁住方法减少请求锁的次数避免人为制造“热点”锁中尽量不要再包含锁选择合适的锁类型或合适的工具类","categories":[{"name":"J.U.C","slug":"J-U-C","permalink":"https://oncevan/oncevan.github.io/categories/J-U-C/"}],"tags":[{"name":"J.U.C","slug":"J-U-C","permalink":"https://oncevan/oncevan.github.io/tags/J-U-C/"},{"name":"锁","slug":"锁","permalink":"https://oncevan/oncevan.github.io/tags/%E9%94%81/"}]},{"title":"线程容器","slug":"线程池","date":"2020-04-27T08:39:14.000Z","updated":"2020-06-08T23:56:26.619Z","comments":true,"path":"2020/04/27/线程池/","link":"","permalink":"https://oncevan/oncevan.github.io/2020/04/27/%E7%BA%BF%E7%A8%8B%E6%B1%A0/","excerpt":"线程池的好处加快响应速度合理利用cpu和内存统一管理 （创建线程开销太大，线程池避免了反复创建并销毁线程所带来的开销问题）","text":"线程池的好处加快响应速度合理利用cpu和内存统一管理 （创建线程开销太大，线程池避免了反复创建并销毁线程所带来的开销问题）线程池适合的场景当服务器接收到大量请求时，使用线程池是很合适的，它可以大大减少线程的创建和销毁次数，提高服务器的工作效率实际上，在开发中，如果需要创建5个以上的线程，那么就可以使用线程池来管理创建和停止线程池corePoolSize : 指的是核心线程数：线程池在完成初始化后，默认情况下，线程池中并没有任何数据，线程池会等待有任务到来时，再创建新线程去执行任务maxPoolSize：线程池有可能会在核心线程基础上，额外增加一些线程，但是这些新增加的线程数有一个上限，这就是maxPoolSize。线程创建规则1、如果线程数小于corePoolSize，即使其他工作线程处于空闲状态，也会创建一个新线程来运行新任务。2、如果线程数等于或大于corePoolSize但少于maxPoolSize，则将任务放入workQueue队列3、如果workQueue队伍已满，并且线程数小于maxPoolSize，则创建一个新线程来运行任务4、如果workQueue队列已满，并且线程数大于或等于maxPoolSize，则拒绝该任务。举例：线程池：核心池大小为5，最大池大小为10，队列为100因为线程中请求最多会创建5个，然后任务将被添加到队列中，直到达到100.当队列已满时，将创建最新的线程maxPoolSize，最多到10个线程，如果再来任务就拒绝。keepAliveTime如果当前的线程数多于corePoolSize，那么多余的线程空闲时间超过keepAliveTime，它们就会被终止ThreadFactory (用来创建线程)新的线程室友ThreadFactory创建的，默认使用Executors.defaultThreadFactory()，创建出来的线程给都在同一个线程组，拥有同样的NORM_PRIORITY优先级并且都不是守护线程。如果自己指定ThreadFactory，那么就可以改变线程名、线程组、优先级、是否为守护线程等。通常我们用默认的ThreadFactory就可以了。workQueue有三种最常见的队列类型直接交接：SynchronousQueue（只是简单的交接，里面不存任务）无界队列：LinkedBlockingQueue（不会被塞满，maxPoolSIze用不上了）有界队列：ArrayBlockingQueue线程池应该手动创建还是自动创建手动创建更好，因为这样可以让我们更加明确线程池的运行规则，避免资源耗尽的风险自动创建线程池会有哪些问题：newFixedThreadPool：固定的线程数（核心线程和最大线程数一样），使用的队列是无界队列，所以当请求数越来越多，并且无法即使处理完毕的时候，容易暂用大量的内容，可能会导致OOM。1ExecutorService executorService = Executors.newFixedThreadPool(10);singleThreadExecutor：只有一个线程（核心线程和最大线程数一样），这也会导致和上一个同样的问题。CachedThreadPool：可缓存线程池，这里的弊端在于第二个参数maximumPoolSize被设置为Integer.MAX_VALUE，这可能会创建数量非常多的线程，甚至超过了OOMScheduledThreadPool：支持定时和周期时间来执行任务- `workStealingPool`：JDK1.8加入，这个线程适用于可以产生子任务，产生的子任务可以加入当前线程下的队列，每个线程都会有自己的队列，如果一个线程子任务过多，其他线程有可能会帮助该线程执行子任务，所以这就造成线程任务执行的没有顺序的特点。正确创建线程池的方法：cpu密集型（加密，计算hash）：最佳线程数为cpu核心数的1-2倍耗时IO型（读写数据库、文件、网络读写）：最佳线程数一般会大于cpu核心很多倍停止线程池的正确方法1、shutdown：会把线程正在执行的任务和在workQueue中的任务全部执行完之后再停止工作，期间也会拒绝新任务。（isShotdown是否进入停止状态，只要运行完shutdown后就会返回true；isTerminated线程是否结束，只要线程还在运行后就是false，awaitTermination在等待时间内线程结束、在等待时间内未结束、在等待时间内被中断）2、shutdownNow：使用该命令后，正在运行的线程将会收到中断信号，正在等待队列的任务会返回一个runnableList再做进一步处理。1List&lt;Runable&gt; runnableList = executorService.shutdownNow();任务太多线程怎么拒绝（4种拒绝策略）1、AbortPolicy：抛出异常，表明没有提交成功。2、DiscardPolicy：默默丢弃任务，不会给出任何提示3、DiscardOldestPolicy：会把队列中存在时间最久（最老）的任务丢弃，腾出空间用来保存新的任务4、CallerRunPolicy：谁提交的任务谁负责执行，比如是主线程提交的任务也是主线程负责执行完成。好处有：形成一种负反馈，使主线程提交任务的速度变慢。实现原理线程池组成部分线程池管理器工作线程任务队列任务接口（Task）Executor家族ExecutorExecutorService：有初步管理线程池的能力，比如说shotdownExecutors：工具类，可帮助快速创建出线程池))线程池状态1、RUNNING：接受新任务并处理排队任务2、SHUTDOWN：不接受新任务，但处理排队任务【shutdown的效果】3、STOP：不接受新任务，也不处理排队任务、并中断正在进行的任务【shutdownNow的效果】4、TIDYING：所有任务都已终止，workerCount为零时，线程会转换到这个状态，并将运行terminate（）钩子方法5、TERMINATED：terminate运行完成","categories":[{"name":"J.U.C","slug":"J-U-C","permalink":"https://oncevan/oncevan.github.io/categories/J-U-C/"}],"tags":[{"name":"J.U.C","slug":"J-U-C","permalink":"https://oncevan/oncevan.github.io/tags/J-U-C/"},{"name":"线程池","slug":"线程池","permalink":"https://oncevan/oncevan.github.io/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"}]}],"categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://oncevan/oncevan.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"Java基础、红黑树","slug":"Java基础、红黑树","permalink":"https://oncevan/oncevan.github.io/categories/Java%E5%9F%BA%E7%A1%80%E3%80%81%E7%BA%A2%E9%BB%91%E6%A0%91/"},{"name":"设计模式","slug":"设计模式","permalink":"https://oncevan/oncevan.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"SpringMVC","slug":"SpringMVC","permalink":"https://oncevan/oncevan.github.io/categories/SpringMVC/"},{"name":"MyBatis","slug":"MyBatis","permalink":"https://oncevan/oncevan.github.io/categories/MyBatis/"},{"name":"J.U.C","slug":"J-U-C","permalink":"https://oncevan/oncevan.github.io/categories/J-U-C/"},{"name":"多线程与并发","slug":"多线程与并发","permalink":"https://oncevan/oncevan.github.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91/"}],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://oncevan/oncevan.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"红黑树","slug":"红黑树","permalink":"https://oncevan/oncevan.github.io/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"},{"name":"Java基础","slug":"Java基础","permalink":"https://oncevan/oncevan.github.io/tags/Java%E5%9F%BA%E7%A1%80/"},{"name":"设计模式","slug":"设计模式","permalink":"https://oncevan/oncevan.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"SpringMVC","slug":"SpringMVC","permalink":"https://oncevan/oncevan.github.io/tags/SpringMVC/"},{"name":"MyBatis","slug":"MyBatis","permalink":"https://oncevan/oncevan.github.io/tags/MyBatis/"},{"name":"多线程与并发","slug":"多线程与并发","permalink":"https://oncevan/oncevan.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91/"},{"name":"J.U.C","slug":"J-U-C","permalink":"https://oncevan/oncevan.github.io/tags/J-U-C/"},{"name":"Java基础之语法","slug":"Java基础之语法","permalink":"https://oncevan/oncevan.github.io/tags/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E8%AF%AD%E6%B3%95/"},{"name":"锁","slug":"锁","permalink":"https://oncevan/oncevan.github.io/tags/%E9%94%81/"},{"name":"线程池","slug":"线程池","permalink":"https://oncevan/oncevan.github.io/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"}]}